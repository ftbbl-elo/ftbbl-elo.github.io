(function(scope){
'use strict';

function F(arity, fun, wrapper) {
  wrapper.a = arity;
  wrapper.f = fun;
  return wrapper;
}

function F2(fun) {
  return F(2, fun, function(a) { return function(b) { return fun(a,b); }; })
}
function F3(fun) {
  return F(3, fun, function(a) {
    return function(b) { return function(c) { return fun(a, b, c); }; };
  });
}
function F4(fun) {
  return F(4, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return fun(a, b, c, d); }; }; };
  });
}
function F5(fun) {
  return F(5, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return fun(a, b, c, d, e); }; }; }; };
  });
}
function F6(fun) {
  return F(6, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return fun(a, b, c, d, e, f); }; }; }; }; };
  });
}
function F7(fun) {
  return F(7, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return fun(a, b, c, d, e, f, g); }; }; }; }; }; };
  });
}
function F8(fun) {
  return F(8, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) {
    return fun(a, b, c, d, e, f, g, h); }; }; }; }; }; }; };
  });
}
function F9(fun) {
  return F(9, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) { return function(i) {
    return fun(a, b, c, d, e, f, g, h, i); }; }; }; }; }; }; }; };
  });
}

function A2(fun, a, b) {
  return fun.a === 2 ? fun.f(a, b) : fun(a)(b);
}
function A3(fun, a, b, c) {
  return fun.a === 3 ? fun.f(a, b, c) : fun(a)(b)(c);
}
function A4(fun, a, b, c, d) {
  return fun.a === 4 ? fun.f(a, b, c, d) : fun(a)(b)(c)(d);
}
function A5(fun, a, b, c, d, e) {
  return fun.a === 5 ? fun.f(a, b, c, d, e) : fun(a)(b)(c)(d)(e);
}
function A6(fun, a, b, c, d, e, f) {
  return fun.a === 6 ? fun.f(a, b, c, d, e, f) : fun(a)(b)(c)(d)(e)(f);
}
function A7(fun, a, b, c, d, e, f, g) {
  return fun.a === 7 ? fun.f(a, b, c, d, e, f, g) : fun(a)(b)(c)(d)(e)(f)(g);
}
function A8(fun, a, b, c, d, e, f, g, h) {
  return fun.a === 8 ? fun.f(a, b, c, d, e, f, g, h) : fun(a)(b)(c)(d)(e)(f)(g)(h);
}
function A9(fun, a, b, c, d, e, f, g, h, i) {
  return fun.a === 9 ? fun.f(a, b, c, d, e, f, g, h, i) : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
}

console.warn('Compiled in DEV mode. Follow the advice at https://elm-lang.org/0.19.1/optimize for better performance and smaller assets.');


// EQUALITY

function _Utils_eq(x, y)
{
	for (
		var pair, stack = [], isEqual = _Utils_eqHelp(x, y, 0, stack);
		isEqual && (pair = stack.pop());
		isEqual = _Utils_eqHelp(pair.a, pair.b, 0, stack)
		)
	{}

	return isEqual;
}

function _Utils_eqHelp(x, y, depth, stack)
{
	if (depth > 100)
	{
		stack.push(_Utils_Tuple2(x,y));
		return true;
	}

	if (x === y)
	{
		return true;
	}

	if (typeof x !== 'object' || x === null || y === null)
	{
		typeof x === 'function' && _Debug_crash(5);
		return false;
	}

	/**/
	if (x.$ === 'Set_elm_builtin')
	{
		x = $elm$core$Set$toList(x);
		y = $elm$core$Set$toList(y);
	}
	if (x.$ === 'RBNode_elm_builtin' || x.$ === 'RBEmpty_elm_builtin')
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	/**_UNUSED/
	if (x.$ < 0)
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	for (var key in x)
	{
		if (!_Utils_eqHelp(x[key], y[key], depth + 1, stack))
		{
			return false;
		}
	}
	return true;
}

var _Utils_equal = F2(_Utils_eq);
var _Utils_notEqual = F2(function(a, b) { return !_Utils_eq(a,b); });



// COMPARISONS

// Code in Generate/JavaScript.hs, Basics.js, and List.js depends on
// the particular integer values assigned to LT, EQ, and GT.

function _Utils_cmp(x, y, ord)
{
	if (typeof x !== 'object')
	{
		return x === y ? /*EQ*/ 0 : x < y ? /*LT*/ -1 : /*GT*/ 1;
	}

	/**/
	if (x instanceof String)
	{
		var a = x.valueOf();
		var b = y.valueOf();
		return a === b ? 0 : a < b ? -1 : 1;
	}
	//*/

	/**_UNUSED/
	if (typeof x.$ === 'undefined')
	//*/
	/**/
	if (x.$[0] === '#')
	//*/
	{
		return (ord = _Utils_cmp(x.a, y.a))
			? ord
			: (ord = _Utils_cmp(x.b, y.b))
				? ord
				: _Utils_cmp(x.c, y.c);
	}

	// traverse conses until end of a list or a mismatch
	for (; x.b && y.b && !(ord = _Utils_cmp(x.a, y.a)); x = x.b, y = y.b) {} // WHILE_CONSES
	return ord || (x.b ? /*GT*/ 1 : y.b ? /*LT*/ -1 : /*EQ*/ 0);
}

var _Utils_lt = F2(function(a, b) { return _Utils_cmp(a, b) < 0; });
var _Utils_le = F2(function(a, b) { return _Utils_cmp(a, b) < 1; });
var _Utils_gt = F2(function(a, b) { return _Utils_cmp(a, b) > 0; });
var _Utils_ge = F2(function(a, b) { return _Utils_cmp(a, b) >= 0; });

var _Utils_compare = F2(function(x, y)
{
	var n = _Utils_cmp(x, y);
	return n < 0 ? $elm$core$Basics$LT : n ? $elm$core$Basics$GT : $elm$core$Basics$EQ;
});


// COMMON VALUES

var _Utils_Tuple0_UNUSED = 0;
var _Utils_Tuple0 = { $: '#0' };

function _Utils_Tuple2_UNUSED(a, b) { return { a: a, b: b }; }
function _Utils_Tuple2(a, b) { return { $: '#2', a: a, b: b }; }

function _Utils_Tuple3_UNUSED(a, b, c) { return { a: a, b: b, c: c }; }
function _Utils_Tuple3(a, b, c) { return { $: '#3', a: a, b: b, c: c }; }

function _Utils_chr_UNUSED(c) { return c; }
function _Utils_chr(c) { return new String(c); }


// RECORDS

function _Utils_update(oldRecord, updatedFields)
{
	var newRecord = {};

	for (var key in oldRecord)
	{
		newRecord[key] = oldRecord[key];
	}

	for (var key in updatedFields)
	{
		newRecord[key] = updatedFields[key];
	}

	return newRecord;
}


// APPEND

var _Utils_append = F2(_Utils_ap);

function _Utils_ap(xs, ys)
{
	// append Strings
	if (typeof xs === 'string')
	{
		return xs + ys;
	}

	// append Lists
	if (!xs.b)
	{
		return ys;
	}
	var root = _List_Cons(xs.a, ys);
	xs = xs.b
	for (var curr = root; xs.b; xs = xs.b) // WHILE_CONS
	{
		curr = curr.b = _List_Cons(xs.a, ys);
	}
	return root;
}



var _List_Nil_UNUSED = { $: 0 };
var _List_Nil = { $: '[]' };

function _List_Cons_UNUSED(hd, tl) { return { $: 1, a: hd, b: tl }; }
function _List_Cons(hd, tl) { return { $: '::', a: hd, b: tl }; }


var _List_cons = F2(_List_Cons);

function _List_fromArray(arr)
{
	var out = _List_Nil;
	for (var i = arr.length; i--; )
	{
		out = _List_Cons(arr[i], out);
	}
	return out;
}

function _List_toArray(xs)
{
	for (var out = []; xs.b; xs = xs.b) // WHILE_CONS
	{
		out.push(xs.a);
	}
	return out;
}

var _List_map2 = F3(function(f, xs, ys)
{
	for (var arr = []; xs.b && ys.b; xs = xs.b, ys = ys.b) // WHILE_CONSES
	{
		arr.push(A2(f, xs.a, ys.a));
	}
	return _List_fromArray(arr);
});

var _List_map3 = F4(function(f, xs, ys, zs)
{
	for (var arr = []; xs.b && ys.b && zs.b; xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A3(f, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map4 = F5(function(f, ws, xs, ys, zs)
{
	for (var arr = []; ws.b && xs.b && ys.b && zs.b; ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A4(f, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map5 = F6(function(f, vs, ws, xs, ys, zs)
{
	for (var arr = []; vs.b && ws.b && xs.b && ys.b && zs.b; vs = vs.b, ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A5(f, vs.a, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_sortBy = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		return _Utils_cmp(f(a), f(b));
	}));
});

var _List_sortWith = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		var ord = A2(f, a, b);
		return ord === $elm$core$Basics$EQ ? 0 : ord === $elm$core$Basics$LT ? -1 : 1;
	}));
});



var _JsArray_empty = [];

function _JsArray_singleton(value)
{
    return [value];
}

function _JsArray_length(array)
{
    return array.length;
}

var _JsArray_initialize = F3(function(size, offset, func)
{
    var result = new Array(size);

    for (var i = 0; i < size; i++)
    {
        result[i] = func(offset + i);
    }

    return result;
});

var _JsArray_initializeFromList = F2(function (max, ls)
{
    var result = new Array(max);

    for (var i = 0; i < max && ls.b; i++)
    {
        result[i] = ls.a;
        ls = ls.b;
    }

    result.length = i;
    return _Utils_Tuple2(result, ls);
});

var _JsArray_unsafeGet = F2(function(index, array)
{
    return array[index];
});

var _JsArray_unsafeSet = F3(function(index, value, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[index] = value;
    return result;
});

var _JsArray_push = F2(function(value, array)
{
    var length = array.length;
    var result = new Array(length + 1);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[length] = value;
    return result;
});

var _JsArray_foldl = F3(function(func, acc, array)
{
    var length = array.length;

    for (var i = 0; i < length; i++)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_foldr = F3(function(func, acc, array)
{
    for (var i = array.length - 1; i >= 0; i--)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_map = F2(function(func, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = func(array[i]);
    }

    return result;
});

var _JsArray_indexedMap = F3(function(func, offset, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = A2(func, offset + i, array[i]);
    }

    return result;
});

var _JsArray_slice = F3(function(from, to, array)
{
    return array.slice(from, to);
});

var _JsArray_appendN = F3(function(n, dest, source)
{
    var destLen = dest.length;
    var itemsToCopy = n - destLen;

    if (itemsToCopy > source.length)
    {
        itemsToCopy = source.length;
    }

    var size = destLen + itemsToCopy;
    var result = new Array(size);

    for (var i = 0; i < destLen; i++)
    {
        result[i] = dest[i];
    }

    for (var i = 0; i < itemsToCopy; i++)
    {
        result[i + destLen] = source[i];
    }

    return result;
});



// LOG

var _Debug_log_UNUSED = F2(function(tag, value)
{
	return value;
});

var _Debug_log = F2(function(tag, value)
{
	console.log(tag + ': ' + _Debug_toString(value));
	return value;
});


// TODOS

function _Debug_todo(moduleName, region)
{
	return function(message) {
		_Debug_crash(8, moduleName, region, message);
	};
}

function _Debug_todoCase(moduleName, region, value)
{
	return function(message) {
		_Debug_crash(9, moduleName, region, value, message);
	};
}


// TO STRING

function _Debug_toString_UNUSED(value)
{
	return '<internals>';
}

function _Debug_toString(value)
{
	return _Debug_toAnsiString(false, value);
}

function _Debug_toAnsiString(ansi, value)
{
	if (typeof value === 'function')
	{
		return _Debug_internalColor(ansi, '<function>');
	}

	if (typeof value === 'boolean')
	{
		return _Debug_ctorColor(ansi, value ? 'True' : 'False');
	}

	if (typeof value === 'number')
	{
		return _Debug_numberColor(ansi, value + '');
	}

	if (value instanceof String)
	{
		return _Debug_charColor(ansi, "'" + _Debug_addSlashes(value, true) + "'");
	}

	if (typeof value === 'string')
	{
		return _Debug_stringColor(ansi, '"' + _Debug_addSlashes(value, false) + '"');
	}

	if (typeof value === 'object' && '$' in value)
	{
		var tag = value.$;

		if (typeof tag === 'number')
		{
			return _Debug_internalColor(ansi, '<internals>');
		}

		if (tag[0] === '#')
		{
			var output = [];
			for (var k in value)
			{
				if (k === '$') continue;
				output.push(_Debug_toAnsiString(ansi, value[k]));
			}
			return '(' + output.join(',') + ')';
		}

		if (tag === 'Set_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Set')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Set$toList(value));
		}

		if (tag === 'RBNode_elm_builtin' || tag === 'RBEmpty_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Dict')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Dict$toList(value));
		}

		if (tag === 'Array_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Array')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Array$toList(value));
		}

		if (tag === '::' || tag === '[]')
		{
			var output = '[';

			value.b && (output += _Debug_toAnsiString(ansi, value.a), value = value.b)

			for (; value.b; value = value.b) // WHILE_CONS
			{
				output += ',' + _Debug_toAnsiString(ansi, value.a);
			}
			return output + ']';
		}

		var output = '';
		for (var i in value)
		{
			if (i === '$') continue;
			var str = _Debug_toAnsiString(ansi, value[i]);
			var c0 = str[0];
			var parenless = c0 === '{' || c0 === '(' || c0 === '[' || c0 === '<' || c0 === '"' || str.indexOf(' ') < 0;
			output += ' ' + (parenless ? str : '(' + str + ')');
		}
		return _Debug_ctorColor(ansi, tag) + output;
	}

	if (typeof DataView === 'function' && value instanceof DataView)
	{
		return _Debug_stringColor(ansi, '<' + value.byteLength + ' bytes>');
	}

	if (typeof File === 'function' && value instanceof File)
	{
		return _Debug_internalColor(ansi, '<' + value.name + '>');
	}

	if (typeof value === 'object')
	{
		var output = [];
		for (var key in value)
		{
			var field = key[0] === '_' ? key.slice(1) : key;
			output.push(_Debug_fadeColor(ansi, field) + ' = ' + _Debug_toAnsiString(ansi, value[key]));
		}
		if (output.length === 0)
		{
			return '{}';
		}
		return '{ ' + output.join(', ') + ' }';
	}

	return _Debug_internalColor(ansi, '<internals>');
}

function _Debug_addSlashes(str, isChar)
{
	var s = str
		.replace(/\\/g, '\\\\')
		.replace(/\n/g, '\\n')
		.replace(/\t/g, '\\t')
		.replace(/\r/g, '\\r')
		.replace(/\v/g, '\\v')
		.replace(/\0/g, '\\0');

	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}

function _Debug_ctorColor(ansi, string)
{
	return ansi ? '\x1b[96m' + string + '\x1b[0m' : string;
}

function _Debug_numberColor(ansi, string)
{
	return ansi ? '\x1b[95m' + string + '\x1b[0m' : string;
}

function _Debug_stringColor(ansi, string)
{
	return ansi ? '\x1b[93m' + string + '\x1b[0m' : string;
}

function _Debug_charColor(ansi, string)
{
	return ansi ? '\x1b[92m' + string + '\x1b[0m' : string;
}

function _Debug_fadeColor(ansi, string)
{
	return ansi ? '\x1b[37m' + string + '\x1b[0m' : string;
}

function _Debug_internalColor(ansi, string)
{
	return ansi ? '\x1b[94m' + string + '\x1b[0m' : string;
}

function _Debug_toHexDigit(n)
{
	return String.fromCharCode(n < 10 ? 48 + n : 55 + n);
}


// CRASH


function _Debug_crash_UNUSED(identifier)
{
	throw new Error('https://github.com/elm/core/blob/1.0.0/hints/' + identifier + '.md');
}


function _Debug_crash(identifier, fact1, fact2, fact3, fact4)
{
	switch(identifier)
	{
		case 0:
			throw new Error('What node should I take over? In JavaScript I need something like:\n\n    Elm.Main.init({\n        node: document.getElementById("elm-node")\n    })\n\nYou need to do this with any Browser.sandbox or Browser.element program.');

		case 1:
			throw new Error('Browser.application programs cannot handle URLs like this:\n\n    ' + document.location.href + '\n\nWhat is the root? The root of your file system? Try looking at this program with `elm reactor` or some other server.');

		case 2:
			var jsonErrorString = fact1;
			throw new Error('Problem with the flags given to your Elm program on initialization.\n\n' + jsonErrorString);

		case 3:
			var portName = fact1;
			throw new Error('There can only be one port named `' + portName + '`, but your program has multiple.');

		case 4:
			var portName = fact1;
			var problem = fact2;
			throw new Error('Trying to send an unexpected type of value through port `' + portName + '`:\n' + problem);

		case 5:
			throw new Error('Trying to use `(==)` on functions.\nThere is no way to know if functions are "the same" in the Elm sense.\nRead more about this at https://package.elm-lang.org/packages/elm/core/latest/Basics#== which describes why it is this way and what the better version will look like.');

		case 6:
			var moduleName = fact1;
			throw new Error('Your page is loading multiple Elm scripts with a module named ' + moduleName + '. Maybe a duplicate script is getting loaded accidentally? If not, rename one of them so I know which is which!');

		case 8:
			var moduleName = fact1;
			var region = fact2;
			var message = fact3;
			throw new Error('TODO in module `' + moduleName + '` ' + _Debug_regionToString(region) + '\n\n' + message);

		case 9:
			var moduleName = fact1;
			var region = fact2;
			var value = fact3;
			var message = fact4;
			throw new Error(
				'TODO in module `' + moduleName + '` from the `case` expression '
				+ _Debug_regionToString(region) + '\n\nIt received the following value:\n\n    '
				+ _Debug_toString(value).replace('\n', '\n    ')
				+ '\n\nBut the branch that handles it says:\n\n    ' + message.replace('\n', '\n    ')
			);

		case 10:
			throw new Error('Bug in https://github.com/elm/virtual-dom/issues');

		case 11:
			throw new Error('Cannot perform mod 0. Division by zero error.');
	}
}

function _Debug_regionToString(region)
{
	if (region.start.line === region.end.line)
	{
		return 'on line ' + region.start.line;
	}
	return 'on lines ' + region.start.line + ' through ' + region.end.line;
}



// MATH

var _Basics_add = F2(function(a, b) { return a + b; });
var _Basics_sub = F2(function(a, b) { return a - b; });
var _Basics_mul = F2(function(a, b) { return a * b; });
var _Basics_fdiv = F2(function(a, b) { return a / b; });
var _Basics_idiv = F2(function(a, b) { return (a / b) | 0; });
var _Basics_pow = F2(Math.pow);

var _Basics_remainderBy = F2(function(b, a) { return a % b; });

// https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/divmodnote-letter.pdf
var _Basics_modBy = F2(function(modulus, x)
{
	var answer = x % modulus;
	return modulus === 0
		? _Debug_crash(11)
		:
	((answer > 0 && modulus < 0) || (answer < 0 && modulus > 0))
		? answer + modulus
		: answer;
});


// TRIGONOMETRY

var _Basics_pi = Math.PI;
var _Basics_e = Math.E;
var _Basics_cos = Math.cos;
var _Basics_sin = Math.sin;
var _Basics_tan = Math.tan;
var _Basics_acos = Math.acos;
var _Basics_asin = Math.asin;
var _Basics_atan = Math.atan;
var _Basics_atan2 = F2(Math.atan2);


// MORE MATH

function _Basics_toFloat(x) { return x; }
function _Basics_truncate(n) { return n | 0; }
function _Basics_isInfinite(n) { return n === Infinity || n === -Infinity; }

var _Basics_ceiling = Math.ceil;
var _Basics_floor = Math.floor;
var _Basics_round = Math.round;
var _Basics_sqrt = Math.sqrt;
var _Basics_log = Math.log;
var _Basics_isNaN = isNaN;


// BOOLEANS

function _Basics_not(bool) { return !bool; }
var _Basics_and = F2(function(a, b) { return a && b; });
var _Basics_or  = F2(function(a, b) { return a || b; });
var _Basics_xor = F2(function(a, b) { return a !== b; });



var _String_cons = F2(function(chr, str)
{
	return chr + str;
});

function _String_uncons(string)
{
	var word = string.charCodeAt(0);
	return word
		? $elm$core$Maybe$Just(
			0xD800 <= word && word <= 0xDBFF
				? _Utils_Tuple2(_Utils_chr(string[0] + string[1]), string.slice(2))
				: _Utils_Tuple2(_Utils_chr(string[0]), string.slice(1))
		)
		: $elm$core$Maybe$Nothing;
}

var _String_append = F2(function(a, b)
{
	return a + b;
});

function _String_length(str)
{
	return str.length;
}

var _String_map = F2(function(func, string)
{
	var len = string.length;
	var array = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = string.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			array[i] = func(_Utils_chr(string[i] + string[i+1]));
			i += 2;
			continue;
		}
		array[i] = func(_Utils_chr(string[i]));
		i++;
	}
	return array.join('');
});

var _String_filter = F2(function(isGood, str)
{
	var arr = [];
	var len = str.length;
	var i = 0;
	while (i < len)
	{
		var char = str[i];
		var word = str.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += str[i];
			i++;
		}

		if (isGood(_Utils_chr(char)))
		{
			arr.push(char);
		}
	}
	return arr.join('');
});

function _String_reverse(str)
{
	var len = str.length;
	var arr = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = str.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			arr[len - i] = str[i + 1];
			i++;
			arr[len - i] = str[i - 1];
			i++;
		}
		else
		{
			arr[len - i] = str[i];
			i++;
		}
	}
	return arr.join('');
}

var _String_foldl = F3(function(func, state, string)
{
	var len = string.length;
	var i = 0;
	while (i < len)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += string[i];
			i++;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_foldr = F3(function(func, state, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_split = F2(function(sep, str)
{
	return str.split(sep);
});

var _String_join = F2(function(sep, strs)
{
	return strs.join(sep);
});

var _String_slice = F3(function(start, end, str) {
	return str.slice(start, end);
});

function _String_trim(str)
{
	return str.trim();
}

function _String_trimLeft(str)
{
	return str.replace(/^\s+/, '');
}

function _String_trimRight(str)
{
	return str.replace(/\s+$/, '');
}

function _String_words(str)
{
	return _List_fromArray(str.trim().split(/\s+/g));
}

function _String_lines(str)
{
	return _List_fromArray(str.split(/\r\n|\r|\n/g));
}

function _String_toUpper(str)
{
	return str.toUpperCase();
}

function _String_toLower(str)
{
	return str.toLowerCase();
}

var _String_any = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (isGood(_Utils_chr(char)))
		{
			return true;
		}
	}
	return false;
});

var _String_all = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (!isGood(_Utils_chr(char)))
		{
			return false;
		}
	}
	return true;
});

var _String_contains = F2(function(sub, str)
{
	return str.indexOf(sub) > -1;
});

var _String_startsWith = F2(function(sub, str)
{
	return str.indexOf(sub) === 0;
});

var _String_endsWith = F2(function(sub, str)
{
	return str.length >= sub.length &&
		str.lastIndexOf(sub) === str.length - sub.length;
});

var _String_indexes = F2(function(sub, str)
{
	var subLen = sub.length;

	if (subLen < 1)
	{
		return _List_Nil;
	}

	var i = 0;
	var is = [];

	while ((i = str.indexOf(sub, i)) > -1)
	{
		is.push(i);
		i = i + subLen;
	}

	return _List_fromArray(is);
});


// TO STRING

function _String_fromNumber(number)
{
	return number + '';
}


// INT CONVERSIONS

function _String_toInt(str)
{
	var total = 0;
	var code0 = str.charCodeAt(0);
	var start = code0 == 0x2B /* + */ || code0 == 0x2D /* - */ ? 1 : 0;

	for (var i = start; i < str.length; ++i)
	{
		var code = str.charCodeAt(i);
		if (code < 0x30 || 0x39 < code)
		{
			return $elm$core$Maybe$Nothing;
		}
		total = 10 * total + code - 0x30;
	}

	return i == start
		? $elm$core$Maybe$Nothing
		: $elm$core$Maybe$Just(code0 == 0x2D ? -total : total);
}


// FLOAT CONVERSIONS

function _String_toFloat(s)
{
	// check if it is a hex, octal, or binary number
	if (s.length === 0 || /[\sxbo]/.test(s))
	{
		return $elm$core$Maybe$Nothing;
	}
	var n = +s;
	// faster isNaN check
	return n === n ? $elm$core$Maybe$Just(n) : $elm$core$Maybe$Nothing;
}

function _String_fromList(chars)
{
	return _List_toArray(chars).join('');
}




function _Char_toCode(char)
{
	var code = char.charCodeAt(0);
	if (0xD800 <= code && code <= 0xDBFF)
	{
		return (code - 0xD800) * 0x400 + char.charCodeAt(1) - 0xDC00 + 0x10000
	}
	return code;
}

function _Char_fromCode(code)
{
	return _Utils_chr(
		(code < 0 || 0x10FFFF < code)
			? '\uFFFD'
			:
		(code <= 0xFFFF)
			? String.fromCharCode(code)
			:
		(code -= 0x10000,
			String.fromCharCode(Math.floor(code / 0x400) + 0xD800, code % 0x400 + 0xDC00)
		)
	);
}

function _Char_toUpper(char)
{
	return _Utils_chr(char.toUpperCase());
}

function _Char_toLower(char)
{
	return _Utils_chr(char.toLowerCase());
}

function _Char_toLocaleUpper(char)
{
	return _Utils_chr(char.toLocaleUpperCase());
}

function _Char_toLocaleLower(char)
{
	return _Utils_chr(char.toLocaleLowerCase());
}



/**/
function _Json_errorToString(error)
{
	return $elm$json$Json$Decode$errorToString(error);
}
//*/


// CORE DECODERS

function _Json_succeed(msg)
{
	return {
		$: 0,
		a: msg
	};
}

function _Json_fail(msg)
{
	return {
		$: 1,
		a: msg
	};
}

function _Json_decodePrim(decoder)
{
	return { $: 2, b: decoder };
}

var _Json_decodeInt = _Json_decodePrim(function(value) {
	return (typeof value !== 'number')
		? _Json_expecting('an INT', value)
		:
	(-2147483647 < value && value < 2147483647 && (value | 0) === value)
		? $elm$core$Result$Ok(value)
		:
	(isFinite(value) && !(value % 1))
		? $elm$core$Result$Ok(value)
		: _Json_expecting('an INT', value);
});

var _Json_decodeBool = _Json_decodePrim(function(value) {
	return (typeof value === 'boolean')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a BOOL', value);
});

var _Json_decodeFloat = _Json_decodePrim(function(value) {
	return (typeof value === 'number')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a FLOAT', value);
});

var _Json_decodeValue = _Json_decodePrim(function(value) {
	return $elm$core$Result$Ok(_Json_wrap(value));
});

var _Json_decodeString = _Json_decodePrim(function(value) {
	return (typeof value === 'string')
		? $elm$core$Result$Ok(value)
		: (value instanceof String)
			? $elm$core$Result$Ok(value + '')
			: _Json_expecting('a STRING', value);
});

function _Json_decodeList(decoder) { return { $: 3, b: decoder }; }
function _Json_decodeArray(decoder) { return { $: 4, b: decoder }; }

function _Json_decodeNull(value) { return { $: 5, c: value }; }

var _Json_decodeField = F2(function(field, decoder)
{
	return {
		$: 6,
		d: field,
		b: decoder
	};
});

var _Json_decodeIndex = F2(function(index, decoder)
{
	return {
		$: 7,
		e: index,
		b: decoder
	};
});

function _Json_decodeKeyValuePairs(decoder)
{
	return {
		$: 8,
		b: decoder
	};
}

function _Json_mapMany(f, decoders)
{
	return {
		$: 9,
		f: f,
		g: decoders
	};
}

var _Json_andThen = F2(function(callback, decoder)
{
	return {
		$: 10,
		b: decoder,
		h: callback
	};
});

function _Json_oneOf(decoders)
{
	return {
		$: 11,
		g: decoders
	};
}


// DECODING OBJECTS

var _Json_map1 = F2(function(f, d1)
{
	return _Json_mapMany(f, [d1]);
});

var _Json_map2 = F3(function(f, d1, d2)
{
	return _Json_mapMany(f, [d1, d2]);
});

var _Json_map3 = F4(function(f, d1, d2, d3)
{
	return _Json_mapMany(f, [d1, d2, d3]);
});

var _Json_map4 = F5(function(f, d1, d2, d3, d4)
{
	return _Json_mapMany(f, [d1, d2, d3, d4]);
});

var _Json_map5 = F6(function(f, d1, d2, d3, d4, d5)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5]);
});

var _Json_map6 = F7(function(f, d1, d2, d3, d4, d5, d6)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6]);
});

var _Json_map7 = F8(function(f, d1, d2, d3, d4, d5, d6, d7)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
});

var _Json_map8 = F9(function(f, d1, d2, d3, d4, d5, d6, d7, d8)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
});


// DECODE

var _Json_runOnString = F2(function(decoder, string)
{
	try
	{
		var value = JSON.parse(string);
		return _Json_runHelp(decoder, value);
	}
	catch (e)
	{
		return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'This is not valid JSON! ' + e.message, _Json_wrap(string)));
	}
});

var _Json_run = F2(function(decoder, value)
{
	return _Json_runHelp(decoder, _Json_unwrap(value));
});

function _Json_runHelp(decoder, value)
{
	switch (decoder.$)
	{
		case 2:
			return decoder.b(value);

		case 5:
			return (value === null)
				? $elm$core$Result$Ok(decoder.c)
				: _Json_expecting('null', value);

		case 3:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('a LIST', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _List_fromArray);

		case 4:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _Json_toElmArray);

		case 6:
			var field = decoder.d;
			if (typeof value !== 'object' || value === null || !(field in value))
			{
				return _Json_expecting('an OBJECT with a field named `' + field + '`', value);
			}
			var result = _Json_runHelp(decoder.b, value[field]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, field, result.a));

		case 7:
			var index = decoder.e;
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			if (index >= value.length)
			{
				return _Json_expecting('a LONGER array. Need index ' + index + ' but only see ' + value.length + ' entries', value);
			}
			var result = _Json_runHelp(decoder.b, value[index]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, index, result.a));

		case 8:
			if (typeof value !== 'object' || value === null || _Json_isArray(value))
			{
				return _Json_expecting('an OBJECT', value);
			}

			var keyValuePairs = _List_Nil;
			// TODO test perf of Object.keys and switch when support is good enough
			for (var key in value)
			{
				if (value.hasOwnProperty(key))
				{
					var result = _Json_runHelp(decoder.b, value[key]);
					if (!$elm$core$Result$isOk(result))
					{
						return $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, key, result.a));
					}
					keyValuePairs = _List_Cons(_Utils_Tuple2(key, result.a), keyValuePairs);
				}
			}
			return $elm$core$Result$Ok($elm$core$List$reverse(keyValuePairs));

		case 9:
			var answer = decoder.f;
			var decoders = decoder.g;
			for (var i = 0; i < decoders.length; i++)
			{
				var result = _Json_runHelp(decoders[i], value);
				if (!$elm$core$Result$isOk(result))
				{
					return result;
				}
				answer = answer(result.a);
			}
			return $elm$core$Result$Ok(answer);

		case 10:
			var result = _Json_runHelp(decoder.b, value);
			return (!$elm$core$Result$isOk(result))
				? result
				: _Json_runHelp(decoder.h(result.a), value);

		case 11:
			var errors = _List_Nil;
			for (var temp = decoder.g; temp.b; temp = temp.b) // WHILE_CONS
			{
				var result = _Json_runHelp(temp.a, value);
				if ($elm$core$Result$isOk(result))
				{
					return result;
				}
				errors = _List_Cons(result.a, errors);
			}
			return $elm$core$Result$Err($elm$json$Json$Decode$OneOf($elm$core$List$reverse(errors)));

		case 1:
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, decoder.a, _Json_wrap(value)));

		case 0:
			return $elm$core$Result$Ok(decoder.a);
	}
}

function _Json_runArrayDecoder(decoder, value, toElmValue)
{
	var len = value.length;
	var array = new Array(len);
	for (var i = 0; i < len; i++)
	{
		var result = _Json_runHelp(decoder, value[i]);
		if (!$elm$core$Result$isOk(result))
		{
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, i, result.a));
		}
		array[i] = result.a;
	}
	return $elm$core$Result$Ok(toElmValue(array));
}

function _Json_isArray(value)
{
	return Array.isArray(value) || (typeof FileList !== 'undefined' && value instanceof FileList);
}

function _Json_toElmArray(array)
{
	return A2($elm$core$Array$initialize, array.length, function(i) { return array[i]; });
}

function _Json_expecting(type, value)
{
	return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'Expecting ' + type, _Json_wrap(value)));
}


// EQUALITY

function _Json_equality(x, y)
{
	if (x === y)
	{
		return true;
	}

	if (x.$ !== y.$)
	{
		return false;
	}

	switch (x.$)
	{
		case 0:
		case 1:
			return x.a === y.a;

		case 2:
			return x.b === y.b;

		case 5:
			return x.c === y.c;

		case 3:
		case 4:
		case 8:
			return _Json_equality(x.b, y.b);

		case 6:
			return x.d === y.d && _Json_equality(x.b, y.b);

		case 7:
			return x.e === y.e && _Json_equality(x.b, y.b);

		case 9:
			return x.f === y.f && _Json_listEquality(x.g, y.g);

		case 10:
			return x.h === y.h && _Json_equality(x.b, y.b);

		case 11:
			return _Json_listEquality(x.g, y.g);
	}
}

function _Json_listEquality(aDecoders, bDecoders)
{
	var len = aDecoders.length;
	if (len !== bDecoders.length)
	{
		return false;
	}
	for (var i = 0; i < len; i++)
	{
		if (!_Json_equality(aDecoders[i], bDecoders[i]))
		{
			return false;
		}
	}
	return true;
}


// ENCODE

var _Json_encode = F2(function(indentLevel, value)
{
	return JSON.stringify(_Json_unwrap(value), null, indentLevel) + '';
});

function _Json_wrap(value) { return { $: 0, a: value }; }
function _Json_unwrap(value) { return value.a; }

function _Json_wrap_UNUSED(value) { return value; }
function _Json_unwrap_UNUSED(value) { return value; }

function _Json_emptyArray() { return []; }
function _Json_emptyObject() { return {}; }

var _Json_addField = F3(function(key, value, object)
{
	object[key] = _Json_unwrap(value);
	return object;
});

function _Json_addEntry(func)
{
	return F2(function(entry, array)
	{
		array.push(_Json_unwrap(func(entry)));
		return array;
	});
}

var _Json_encodeNull = _Json_wrap(null);



// TASKS

function _Scheduler_succeed(value)
{
	return {
		$: 0,
		a: value
	};
}

function _Scheduler_fail(error)
{
	return {
		$: 1,
		a: error
	};
}

function _Scheduler_binding(callback)
{
	return {
		$: 2,
		b: callback,
		c: null
	};
}

var _Scheduler_andThen = F2(function(callback, task)
{
	return {
		$: 3,
		b: callback,
		d: task
	};
});

var _Scheduler_onError = F2(function(callback, task)
{
	return {
		$: 4,
		b: callback,
		d: task
	};
});

function _Scheduler_receive(callback)
{
	return {
		$: 5,
		b: callback
	};
}


// PROCESSES

var _Scheduler_guid = 0;

function _Scheduler_rawSpawn(task)
{
	var proc = {
		$: 0,
		e: _Scheduler_guid++,
		f: task,
		g: null,
		h: []
	};

	_Scheduler_enqueue(proc);

	return proc;
}

function _Scheduler_spawn(task)
{
	return _Scheduler_binding(function(callback) {
		callback(_Scheduler_succeed(_Scheduler_rawSpawn(task)));
	});
}

function _Scheduler_rawSend(proc, msg)
{
	proc.h.push(msg);
	_Scheduler_enqueue(proc);
}

var _Scheduler_send = F2(function(proc, msg)
{
	return _Scheduler_binding(function(callback) {
		_Scheduler_rawSend(proc, msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});

function _Scheduler_kill(proc)
{
	return _Scheduler_binding(function(callback) {
		var task = proc.f;
		if (task.$ === 2 && task.c)
		{
			task.c();
		}

		proc.f = null;

		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
}


/* STEP PROCESSES

type alias Process =
  { $ : tag
  , id : unique_id
  , root : Task
  , stack : null | { $: SUCCEED | FAIL, a: callback, b: stack }
  , mailbox : [msg]
  }

*/


var _Scheduler_working = false;
var _Scheduler_queue = [];


function _Scheduler_enqueue(proc)
{
	_Scheduler_queue.push(proc);
	if (_Scheduler_working)
	{
		return;
	}
	_Scheduler_working = true;
	while (proc = _Scheduler_queue.shift())
	{
		_Scheduler_step(proc);
	}
	_Scheduler_working = false;
}


function _Scheduler_step(proc)
{
	while (proc.f)
	{
		var rootTag = proc.f.$;
		if (rootTag === 0 || rootTag === 1)
		{
			while (proc.g && proc.g.$ !== rootTag)
			{
				proc.g = proc.g.i;
			}
			if (!proc.g)
			{
				return;
			}
			proc.f = proc.g.b(proc.f.a);
			proc.g = proc.g.i;
		}
		else if (rootTag === 2)
		{
			proc.f.c = proc.f.b(function(newRoot) {
				proc.f = newRoot;
				_Scheduler_enqueue(proc);
			});
			return;
		}
		else if (rootTag === 5)
		{
			if (proc.h.length === 0)
			{
				return;
			}
			proc.f = proc.f.b(proc.h.shift());
		}
		else // if (rootTag === 3 || rootTag === 4)
		{
			proc.g = {
				$: rootTag === 3 ? 0 : 1,
				b: proc.f.b,
				i: proc.g
			};
			proc.f = proc.f.d;
		}
	}
}



function _Process_sleep(time)
{
	return _Scheduler_binding(function(callback) {
		var id = setTimeout(function() {
			callback(_Scheduler_succeed(_Utils_Tuple0));
		}, time);

		return function() { clearTimeout(id); };
	});
}




// PROGRAMS


var _Platform_worker = F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function() { return function() {} }
	);
});



// INITIALIZE A PROGRAM


function _Platform_initialize(flagDecoder, args, init, update, subscriptions, stepperBuilder)
{
	var result = A2(_Json_run, flagDecoder, _Json_wrap(args ? args['flags'] : undefined));
	$elm$core$Result$isOk(result) || _Debug_crash(2 /**/, _Json_errorToString(result.a) /**/);
	var managers = {};
	result = init(result.a);
	var model = result.a;
	var stepper = stepperBuilder(sendToApp, model);
	var ports = _Platform_setupEffects(managers, sendToApp);

	function sendToApp(msg, viewMetadata)
	{
		result = A2(update, msg, model);
		stepper(model = result.a, viewMetadata);
		_Platform_dispatchEffects(managers, result.b, subscriptions(model));
	}

	_Platform_dispatchEffects(managers, result.b, subscriptions(model));

	return ports ? { ports: ports } : {};
}



// TRACK PRELOADS
//
// This is used by code in elm/browser and elm/http
// to register any HTTP requests that are triggered by init.
//


var _Platform_preload;


function _Platform_registerPreload(url)
{
	_Platform_preload.add(url);
}



// EFFECT MANAGERS


var _Platform_effectManagers = {};


function _Platform_setupEffects(managers, sendToApp)
{
	var ports;

	// setup all necessary effect managers
	for (var key in _Platform_effectManagers)
	{
		var manager = _Platform_effectManagers[key];

		if (manager.a)
		{
			ports = ports || {};
			ports[key] = manager.a(key, sendToApp);
		}

		managers[key] = _Platform_instantiateManager(manager, sendToApp);
	}

	return ports;
}


function _Platform_createManager(init, onEffects, onSelfMsg, cmdMap, subMap)
{
	return {
		b: init,
		c: onEffects,
		d: onSelfMsg,
		e: cmdMap,
		f: subMap
	};
}


function _Platform_instantiateManager(info, sendToApp)
{
	var router = {
		g: sendToApp,
		h: undefined
	};

	var onEffects = info.c;
	var onSelfMsg = info.d;
	var cmdMap = info.e;
	var subMap = info.f;

	function loop(state)
	{
		return A2(_Scheduler_andThen, loop, _Scheduler_receive(function(msg)
		{
			var value = msg.a;

			if (msg.$ === 0)
			{
				return A3(onSelfMsg, router, value, state);
			}

			return cmdMap && subMap
				? A4(onEffects, router, value.i, value.j, state)
				: A3(onEffects, router, cmdMap ? value.i : value.j, state);
		}));
	}

	return router.h = _Scheduler_rawSpawn(A2(_Scheduler_andThen, loop, info.b));
}



// ROUTING


var _Platform_sendToApp = F2(function(router, msg)
{
	return _Scheduler_binding(function(callback)
	{
		router.g(msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});


var _Platform_sendToSelf = F2(function(router, msg)
{
	return A2(_Scheduler_send, router.h, {
		$: 0,
		a: msg
	});
});



// BAGS


function _Platform_leaf(home)
{
	return function(value)
	{
		return {
			$: 1,
			k: home,
			l: value
		};
	};
}


function _Platform_batch(list)
{
	return {
		$: 2,
		m: list
	};
}


var _Platform_map = F2(function(tagger, bag)
{
	return {
		$: 3,
		n: tagger,
		o: bag
	}
});



// PIPE BAGS INTO EFFECT MANAGERS


function _Platform_dispatchEffects(managers, cmdBag, subBag)
{
	var effectsDict = {};
	_Platform_gatherEffects(true, cmdBag, effectsDict, null);
	_Platform_gatherEffects(false, subBag, effectsDict, null);

	for (var home in managers)
	{
		_Scheduler_rawSend(managers[home], {
			$: 'fx',
			a: effectsDict[home] || { i: _List_Nil, j: _List_Nil }
		});
	}
}


function _Platform_gatherEffects(isCmd, bag, effectsDict, taggers)
{
	switch (bag.$)
	{
		case 1:
			var home = bag.k;
			var effect = _Platform_toEffect(isCmd, home, taggers, bag.l);
			effectsDict[home] = _Platform_insert(isCmd, effect, effectsDict[home]);
			return;

		case 2:
			for (var list = bag.m; list.b; list = list.b) // WHILE_CONS
			{
				_Platform_gatherEffects(isCmd, list.a, effectsDict, taggers);
			}
			return;

		case 3:
			_Platform_gatherEffects(isCmd, bag.o, effectsDict, {
				p: bag.n,
				q: taggers
			});
			return;
	}
}


function _Platform_toEffect(isCmd, home, taggers, value)
{
	function applyTaggers(x)
	{
		for (var temp = taggers; temp; temp = temp.q)
		{
			x = temp.p(x);
		}
		return x;
	}

	var map = isCmd
		? _Platform_effectManagers[home].e
		: _Platform_effectManagers[home].f;

	return A2(map, applyTaggers, value)
}


function _Platform_insert(isCmd, newEffect, effects)
{
	effects = effects || { i: _List_Nil, j: _List_Nil };

	isCmd
		? (effects.i = _List_Cons(newEffect, effects.i))
		: (effects.j = _List_Cons(newEffect, effects.j));

	return effects;
}



// PORTS


function _Platform_checkPortName(name)
{
	if (_Platform_effectManagers[name])
	{
		_Debug_crash(3, name)
	}
}



// OUTGOING PORTS


function _Platform_outgoingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		e: _Platform_outgoingPortMap,
		r: converter,
		a: _Platform_setupOutgoingPort
	};
	return _Platform_leaf(name);
}


var _Platform_outgoingPortMap = F2(function(tagger, value) { return value; });


function _Platform_setupOutgoingPort(name)
{
	var subs = [];
	var converter = _Platform_effectManagers[name].r;

	// CREATE MANAGER

	var init = _Process_sleep(0);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, cmdList, state)
	{
		for ( ; cmdList.b; cmdList = cmdList.b) // WHILE_CONS
		{
			// grab a separate reference to subs in case unsubscribe is called
			var currentSubs = subs;
			var value = _Json_unwrap(converter(cmdList.a));
			for (var i = 0; i < currentSubs.length; i++)
			{
				currentSubs[i](value);
			}
		}
		return init;
	});

	// PUBLIC API

	function subscribe(callback)
	{
		subs.push(callback);
	}

	function unsubscribe(callback)
	{
		// copy subs into a new array in case unsubscribe is called within a
		// subscribed callback
		subs = subs.slice();
		var index = subs.indexOf(callback);
		if (index >= 0)
		{
			subs.splice(index, 1);
		}
	}

	return {
		subscribe: subscribe,
		unsubscribe: unsubscribe
	};
}



// INCOMING PORTS


function _Platform_incomingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		f: _Platform_incomingPortMap,
		r: converter,
		a: _Platform_setupIncomingPort
	};
	return _Platform_leaf(name);
}


var _Platform_incomingPortMap = F2(function(tagger, finalTagger)
{
	return function(value)
	{
		return tagger(finalTagger(value));
	};
});


function _Platform_setupIncomingPort(name, sendToApp)
{
	var subs = _List_Nil;
	var converter = _Platform_effectManagers[name].r;

	// CREATE MANAGER

	var init = _Scheduler_succeed(null);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, subList, state)
	{
		subs = subList;
		return init;
	});

	// PUBLIC API

	function send(incomingValue)
	{
		var result = A2(_Json_run, converter, _Json_wrap(incomingValue));

		$elm$core$Result$isOk(result) || _Debug_crash(4, name, result.a);

		var value = result.a;
		for (var temp = subs; temp.b; temp = temp.b) // WHILE_CONS
		{
			sendToApp(temp.a(value));
		}
	}

	return { send: send };
}



// EXPORT ELM MODULES
//
// Have DEBUG and PROD versions so that we can (1) give nicer errors in
// debug mode and (2) not pay for the bits needed for that in prod mode.
//


function _Platform_export_UNUSED(exports)
{
	scope['Elm']
		? _Platform_mergeExportsProd(scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsProd(obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6)
				: _Platform_mergeExportsProd(obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}


function _Platform_export(exports)
{
	scope['Elm']
		? _Platform_mergeExportsDebug('Elm', scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsDebug(moduleName, obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6, moduleName)
				: _Platform_mergeExportsDebug(moduleName + '.' + name, obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}




// HELPERS


var _VirtualDom_divertHrefToApp;

var _VirtualDom_doc = typeof document !== 'undefined' ? document : {};


function _VirtualDom_appendChild(parent, child)
{
	parent.appendChild(child);
}

var _VirtualDom_init = F4(function(virtualNode, flagDecoder, debugMetadata, args)
{
	// NOTE: this function needs _Platform_export available to work

	/**_UNUSED/
	var node = args['node'];
	//*/
	/**/
	var node = args && args['node'] ? args['node'] : _Debug_crash(0);
	//*/

	node.parentNode.replaceChild(
		_VirtualDom_render(virtualNode, function() {}),
		node
	);

	return {};
});



// TEXT


function _VirtualDom_text(string)
{
	return {
		$: 0,
		a: string
	};
}



// NODE


var _VirtualDom_nodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 1,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_node = _VirtualDom_nodeNS(undefined);



// KEYED NODE


var _VirtualDom_keyedNodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 2,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_keyedNode = _VirtualDom_keyedNodeNS(undefined);



// CUSTOM


function _VirtualDom_custom(factList, model, render, diff)
{
	return {
		$: 3,
		d: _VirtualDom_organizeFacts(factList),
		g: model,
		h: render,
		i: diff
	};
}



// MAP


var _VirtualDom_map = F2(function(tagger, node)
{
	return {
		$: 4,
		j: tagger,
		k: node,
		b: 1 + (node.b || 0)
	};
});



// LAZY


function _VirtualDom_thunk(refs, thunk)
{
	return {
		$: 5,
		l: refs,
		m: thunk,
		k: undefined
	};
}

var _VirtualDom_lazy = F2(function(func, a)
{
	return _VirtualDom_thunk([func, a], function() {
		return func(a);
	});
});

var _VirtualDom_lazy2 = F3(function(func, a, b)
{
	return _VirtualDom_thunk([func, a, b], function() {
		return A2(func, a, b);
	});
});

var _VirtualDom_lazy3 = F4(function(func, a, b, c)
{
	return _VirtualDom_thunk([func, a, b, c], function() {
		return A3(func, a, b, c);
	});
});

var _VirtualDom_lazy4 = F5(function(func, a, b, c, d)
{
	return _VirtualDom_thunk([func, a, b, c, d], function() {
		return A4(func, a, b, c, d);
	});
});

var _VirtualDom_lazy5 = F6(function(func, a, b, c, d, e)
{
	return _VirtualDom_thunk([func, a, b, c, d, e], function() {
		return A5(func, a, b, c, d, e);
	});
});

var _VirtualDom_lazy6 = F7(function(func, a, b, c, d, e, f)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f], function() {
		return A6(func, a, b, c, d, e, f);
	});
});

var _VirtualDom_lazy7 = F8(function(func, a, b, c, d, e, f, g)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g], function() {
		return A7(func, a, b, c, d, e, f, g);
	});
});

var _VirtualDom_lazy8 = F9(function(func, a, b, c, d, e, f, g, h)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g, h], function() {
		return A8(func, a, b, c, d, e, f, g, h);
	});
});



// FACTS


var _VirtualDom_on = F2(function(key, handler)
{
	return {
		$: 'a0',
		n: key,
		o: handler
	};
});
var _VirtualDom_style = F2(function(key, value)
{
	return {
		$: 'a1',
		n: key,
		o: value
	};
});
var _VirtualDom_property = F2(function(key, value)
{
	return {
		$: 'a2',
		n: key,
		o: value
	};
});
var _VirtualDom_attribute = F2(function(key, value)
{
	return {
		$: 'a3',
		n: key,
		o: value
	};
});
var _VirtualDom_attributeNS = F3(function(namespace, key, value)
{
	return {
		$: 'a4',
		n: key,
		o: { f: namespace, o: value }
	};
});



// XSS ATTACK VECTOR CHECKS


function _VirtualDom_noScript(tag)
{
	return tag == 'script' ? 'p' : tag;
}

function _VirtualDom_noOnOrFormAction(key)
{
	return /^(on|formAction$)/i.test(key) ? 'data-' + key : key;
}

function _VirtualDom_noInnerHtmlOrFormAction(key)
{
	return key == 'innerHTML' || key == 'formAction' ? 'data-' + key : key;
}

function _VirtualDom_noJavaScriptUri_UNUSED(value)
{
	return /^javascript:/i.test(value.replace(/\s/g,'')) ? '' : value;
}

function _VirtualDom_noJavaScriptUri(value)
{
	return /^javascript:/i.test(value.replace(/\s/g,''))
		? 'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'
		: value;
}

function _VirtualDom_noJavaScriptOrHtmlUri_UNUSED(value)
{
	return /^\s*(javascript:|data:text\/html)/i.test(value) ? '' : value;
}

function _VirtualDom_noJavaScriptOrHtmlUri(value)
{
	return /^\s*(javascript:|data:text\/html)/i.test(value)
		? 'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'
		: value;
}



// MAP FACTS


var _VirtualDom_mapAttribute = F2(function(func, attr)
{
	return (attr.$ === 'a0')
		? A2(_VirtualDom_on, attr.n, _VirtualDom_mapHandler(func, attr.o))
		: attr;
});

function _VirtualDom_mapHandler(func, handler)
{
	var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);

	// 0 = Normal
	// 1 = MayStopPropagation
	// 2 = MayPreventDefault
	// 3 = Custom

	return {
		$: handler.$,
		a:
			!tag
				? A2($elm$json$Json$Decode$map, func, handler.a)
				:
			A3($elm$json$Json$Decode$map2,
				tag < 3
					? _VirtualDom_mapEventTuple
					: _VirtualDom_mapEventRecord,
				$elm$json$Json$Decode$succeed(func),
				handler.a
			)
	};
}

var _VirtualDom_mapEventTuple = F2(function(func, tuple)
{
	return _Utils_Tuple2(func(tuple.a), tuple.b);
});

var _VirtualDom_mapEventRecord = F2(function(func, record)
{
	return {
		message: func(record.message),
		stopPropagation: record.stopPropagation,
		preventDefault: record.preventDefault
	}
});



// ORGANIZE FACTS


function _VirtualDom_organizeFacts(factList)
{
	for (var facts = {}; factList.b; factList = factList.b) // WHILE_CONS
	{
		var entry = factList.a;

		var tag = entry.$;
		var key = entry.n;
		var value = entry.o;

		if (tag === 'a2')
		{
			(key === 'className')
				? _VirtualDom_addClass(facts, key, _Json_unwrap(value))
				: facts[key] = _Json_unwrap(value);

			continue;
		}

		var subFacts = facts[tag] || (facts[tag] = {});
		(tag === 'a3' && key === 'class')
			? _VirtualDom_addClass(subFacts, key, value)
			: subFacts[key] = value;
	}

	return facts;
}

function _VirtualDom_addClass(object, key, newClass)
{
	var classes = object[key];
	object[key] = classes ? classes + ' ' + newClass : newClass;
}



// RENDER


function _VirtualDom_render(vNode, eventNode)
{
	var tag = vNode.$;

	if (tag === 5)
	{
		return _VirtualDom_render(vNode.k || (vNode.k = vNode.m()), eventNode);
	}

	if (tag === 0)
	{
		return _VirtualDom_doc.createTextNode(vNode.a);
	}

	if (tag === 4)
	{
		var subNode = vNode.k;
		var tagger = vNode.j;

		while (subNode.$ === 4)
		{
			typeof tagger !== 'object'
				? tagger = [tagger, subNode.j]
				: tagger.push(subNode.j);

			subNode = subNode.k;
		}

		var subEventRoot = { j: tagger, p: eventNode };
		var domNode = _VirtualDom_render(subNode, subEventRoot);
		domNode.elm_event_node_ref = subEventRoot;
		return domNode;
	}

	if (tag === 3)
	{
		var domNode = vNode.h(vNode.g);
		_VirtualDom_applyFacts(domNode, eventNode, vNode.d);
		return domNode;
	}

	// at this point `tag` must be 1 or 2

	var domNode = vNode.f
		? _VirtualDom_doc.createElementNS(vNode.f, vNode.c)
		: _VirtualDom_doc.createElement(vNode.c);

	if (_VirtualDom_divertHrefToApp && vNode.c == 'a')
	{
		domNode.addEventListener('click', _VirtualDom_divertHrefToApp(domNode));
	}

	_VirtualDom_applyFacts(domNode, eventNode, vNode.d);

	for (var kids = vNode.e, i = 0; i < kids.length; i++)
	{
		_VirtualDom_appendChild(domNode, _VirtualDom_render(tag === 1 ? kids[i] : kids[i].b, eventNode));
	}

	return domNode;
}



// APPLY FACTS


function _VirtualDom_applyFacts(domNode, eventNode, facts)
{
	for (var key in facts)
	{
		var value = facts[key];

		key === 'a1'
			? _VirtualDom_applyStyles(domNode, value)
			:
		key === 'a0'
			? _VirtualDom_applyEvents(domNode, eventNode, value)
			:
		key === 'a3'
			? _VirtualDom_applyAttrs(domNode, value)
			:
		key === 'a4'
			? _VirtualDom_applyAttrsNS(domNode, value)
			:
		((key !== 'value' && key !== 'checked') || domNode[key] !== value) && (domNode[key] = value);
	}
}



// APPLY STYLES


function _VirtualDom_applyStyles(domNode, styles)
{
	var domNodeStyle = domNode.style;

	for (var key in styles)
	{
		domNodeStyle[key] = styles[key];
	}
}



// APPLY ATTRS


function _VirtualDom_applyAttrs(domNode, attrs)
{
	for (var key in attrs)
	{
		var value = attrs[key];
		typeof value !== 'undefined'
			? domNode.setAttribute(key, value)
			: domNode.removeAttribute(key);
	}
}



// APPLY NAMESPACED ATTRS


function _VirtualDom_applyAttrsNS(domNode, nsAttrs)
{
	for (var key in nsAttrs)
	{
		var pair = nsAttrs[key];
		var namespace = pair.f;
		var value = pair.o;

		typeof value !== 'undefined'
			? domNode.setAttributeNS(namespace, key, value)
			: domNode.removeAttributeNS(namespace, key);
	}
}



// APPLY EVENTS


function _VirtualDom_applyEvents(domNode, eventNode, events)
{
	var allCallbacks = domNode.elmFs || (domNode.elmFs = {});

	for (var key in events)
	{
		var newHandler = events[key];
		var oldCallback = allCallbacks[key];

		if (!newHandler)
		{
			domNode.removeEventListener(key, oldCallback);
			allCallbacks[key] = undefined;
			continue;
		}

		if (oldCallback)
		{
			var oldHandler = oldCallback.q;
			if (oldHandler.$ === newHandler.$)
			{
				oldCallback.q = newHandler;
				continue;
			}
			domNode.removeEventListener(key, oldCallback);
		}

		oldCallback = _VirtualDom_makeCallback(eventNode, newHandler);
		domNode.addEventListener(key, oldCallback,
			_VirtualDom_passiveSupported
			&& { passive: $elm$virtual_dom$VirtualDom$toHandlerInt(newHandler) < 2 }
		);
		allCallbacks[key] = oldCallback;
	}
}



// PASSIVE EVENTS


var _VirtualDom_passiveSupported;

try
{
	window.addEventListener('t', null, Object.defineProperty({}, 'passive', {
		get: function() { _VirtualDom_passiveSupported = true; }
	}));
}
catch(e) {}



// EVENT HANDLERS


function _VirtualDom_makeCallback(eventNode, initialHandler)
{
	function callback(event)
	{
		var handler = callback.q;
		var result = _Json_runHelp(handler.a, event);

		if (!$elm$core$Result$isOk(result))
		{
			return;
		}

		var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);

		// 0 = Normal
		// 1 = MayStopPropagation
		// 2 = MayPreventDefault
		// 3 = Custom

		var value = result.a;
		var message = !tag ? value : tag < 3 ? value.a : value.message;
		var stopPropagation = tag == 1 ? value.b : tag == 3 && value.stopPropagation;
		var currentEventNode = (
			stopPropagation && event.stopPropagation(),
			(tag == 2 ? value.b : tag == 3 && value.preventDefault) && event.preventDefault(),
			eventNode
		);
		var tagger;
		var i;
		while (tagger = currentEventNode.j)
		{
			if (typeof tagger == 'function')
			{
				message = tagger(message);
			}
			else
			{
				for (var i = tagger.length; i--; )
				{
					message = tagger[i](message);
				}
			}
			currentEventNode = currentEventNode.p;
		}
		currentEventNode(message, stopPropagation); // stopPropagation implies isSync
	}

	callback.q = initialHandler;

	return callback;
}

function _VirtualDom_equalEvents(x, y)
{
	return x.$ == y.$ && _Json_equality(x.a, y.a);
}



// DIFF


// TODO: Should we do patches like in iOS?
//
// type Patch
//   = At Int Patch
//   | Batch (List Patch)
//   | Change ...
//
// How could it not be better?
//
function _VirtualDom_diff(x, y)
{
	var patches = [];
	_VirtualDom_diffHelp(x, y, patches, 0);
	return patches;
}


function _VirtualDom_pushPatch(patches, type, index, data)
{
	var patch = {
		$: type,
		r: index,
		s: data,
		t: undefined,
		u: undefined
	};
	patches.push(patch);
	return patch;
}


function _VirtualDom_diffHelp(x, y, patches, index)
{
	if (x === y)
	{
		return;
	}

	var xType = x.$;
	var yType = y.$;

	// Bail if you run into different types of nodes. Implies that the
	// structure has changed significantly and it's not worth a diff.
	if (xType !== yType)
	{
		if (xType === 1 && yType === 2)
		{
			y = _VirtualDom_dekey(y);
			yType = 1;
		}
		else
		{
			_VirtualDom_pushPatch(patches, 0, index, y);
			return;
		}
	}

	// Now we know that both nodes are the same $.
	switch (yType)
	{
		case 5:
			var xRefs = x.l;
			var yRefs = y.l;
			var i = xRefs.length;
			var same = i === yRefs.length;
			while (same && i--)
			{
				same = xRefs[i] === yRefs[i];
			}
			if (same)
			{
				y.k = x.k;
				return;
			}
			y.k = y.m();
			var subPatches = [];
			_VirtualDom_diffHelp(x.k, y.k, subPatches, 0);
			subPatches.length > 0 && _VirtualDom_pushPatch(patches, 1, index, subPatches);
			return;

		case 4:
			// gather nested taggers
			var xTaggers = x.j;
			var yTaggers = y.j;
			var nesting = false;

			var xSubNode = x.k;
			while (xSubNode.$ === 4)
			{
				nesting = true;

				typeof xTaggers !== 'object'
					? xTaggers = [xTaggers, xSubNode.j]
					: xTaggers.push(xSubNode.j);

				xSubNode = xSubNode.k;
			}

			var ySubNode = y.k;
			while (ySubNode.$ === 4)
			{
				nesting = true;

				typeof yTaggers !== 'object'
					? yTaggers = [yTaggers, ySubNode.j]
					: yTaggers.push(ySubNode.j);

				ySubNode = ySubNode.k;
			}

			// Just bail if different numbers of taggers. This implies the
			// structure of the virtual DOM has changed.
			if (nesting && xTaggers.length !== yTaggers.length)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			// check if taggers are "the same"
			if (nesting ? !_VirtualDom_pairwiseRefEqual(xTaggers, yTaggers) : xTaggers !== yTaggers)
			{
				_VirtualDom_pushPatch(patches, 2, index, yTaggers);
			}

			// diff everything below the taggers
			_VirtualDom_diffHelp(xSubNode, ySubNode, patches, index + 1);
			return;

		case 0:
			if (x.a !== y.a)
			{
				_VirtualDom_pushPatch(patches, 3, index, y.a);
			}
			return;

		case 1:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKids);
			return;

		case 2:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKeyedKids);
			return;

		case 3:
			if (x.h !== y.h)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
			factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

			var patch = y.i(x.g, y.g);
			patch && _VirtualDom_pushPatch(patches, 5, index, patch);

			return;
	}
}

// assumes the incoming arrays are the same length
function _VirtualDom_pairwiseRefEqual(as, bs)
{
	for (var i = 0; i < as.length; i++)
	{
		if (as[i] !== bs[i])
		{
			return false;
		}
	}

	return true;
}

function _VirtualDom_diffNodes(x, y, patches, index, diffKids)
{
	// Bail if obvious indicators have changed. Implies more serious
	// structural changes such that it's not worth it to diff.
	if (x.c !== y.c || x.f !== y.f)
	{
		_VirtualDom_pushPatch(patches, 0, index, y);
		return;
	}

	var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
	factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

	diffKids(x, y, patches, index);
}



// DIFF FACTS


// TODO Instead of creating a new diff object, it's possible to just test if
// there *is* a diff. During the actual patch, do the diff again and make the
// modifications directly. This way, there's no new allocations. Worth it?
function _VirtualDom_diffFacts(x, y, category)
{
	var diff;

	// look for changes and removals
	for (var xKey in x)
	{
		if (xKey === 'a1' || xKey === 'a0' || xKey === 'a3' || xKey === 'a4')
		{
			var subDiff = _VirtualDom_diffFacts(x[xKey], y[xKey] || {}, xKey);
			if (subDiff)
			{
				diff = diff || {};
				diff[xKey] = subDiff;
			}
			continue;
		}

		// remove if not in the new facts
		if (!(xKey in y))
		{
			diff = diff || {};
			diff[xKey] =
				!category
					? (typeof x[xKey] === 'string' ? '' : null)
					:
				(category === 'a1')
					? ''
					:
				(category === 'a0' || category === 'a3')
					? undefined
					:
				{ f: x[xKey].f, o: undefined };

			continue;
		}

		var xValue = x[xKey];
		var yValue = y[xKey];

		// reference equal, so don't worry about it
		if (xValue === yValue && xKey !== 'value' && xKey !== 'checked'
			|| category === 'a0' && _VirtualDom_equalEvents(xValue, yValue))
		{
			continue;
		}

		diff = diff || {};
		diff[xKey] = yValue;
	}

	// add new stuff
	for (var yKey in y)
	{
		if (!(yKey in x))
		{
			diff = diff || {};
			diff[yKey] = y[yKey];
		}
	}

	return diff;
}



// DIFF KIDS


function _VirtualDom_diffKids(xParent, yParent, patches, index)
{
	var xKids = xParent.e;
	var yKids = yParent.e;

	var xLen = xKids.length;
	var yLen = yKids.length;

	// FIGURE OUT IF THERE ARE INSERTS OR REMOVALS

	if (xLen > yLen)
	{
		_VirtualDom_pushPatch(patches, 6, index, {
			v: yLen,
			i: xLen - yLen
		});
	}
	else if (xLen < yLen)
	{
		_VirtualDom_pushPatch(patches, 7, index, {
			v: xLen,
			e: yKids
		});
	}

	// PAIRWISE DIFF EVERYTHING ELSE

	for (var minLen = xLen < yLen ? xLen : yLen, i = 0; i < minLen; i++)
	{
		var xKid = xKids[i];
		_VirtualDom_diffHelp(xKid, yKids[i], patches, ++index);
		index += xKid.b || 0;
	}
}



// KEYED DIFF


function _VirtualDom_diffKeyedKids(xParent, yParent, patches, rootIndex)
{
	var localPatches = [];

	var changes = {}; // Dict String Entry
	var inserts = []; // Array { index : Int, entry : Entry }
	// type Entry = { tag : String, vnode : VNode, index : Int, data : _ }

	var xKids = xParent.e;
	var yKids = yParent.e;
	var xLen = xKids.length;
	var yLen = yKids.length;
	var xIndex = 0;
	var yIndex = 0;

	var index = rootIndex;

	while (xIndex < xLen && yIndex < yLen)
	{
		var x = xKids[xIndex];
		var y = yKids[yIndex];

		var xKey = x.a;
		var yKey = y.a;
		var xNode = x.b;
		var yNode = y.b;

		var newMatch = undefined;
		var oldMatch = undefined;

		// check if keys match

		if (xKey === yKey)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNode, localPatches, index);
			index += xNode.b || 0;

			xIndex++;
			yIndex++;
			continue;
		}

		// look ahead 1 to detect insertions and removals.

		var xNext = xKids[xIndex + 1];
		var yNext = yKids[yIndex + 1];

		if (xNext)
		{
			var xNextKey = xNext.a;
			var xNextNode = xNext.b;
			oldMatch = yKey === xNextKey;
		}

		if (yNext)
		{
			var yNextKey = yNext.a;
			var yNextNode = yNext.b;
			newMatch = xKey === yNextKey;
		}


		// swap x and y
		if (newMatch && oldMatch)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			_VirtualDom_insertNode(changes, localPatches, xKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNextNode, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		// insert y
		if (newMatch)
		{
			index++;
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			index += xNode.b || 0;

			xIndex += 1;
			yIndex += 2;
			continue;
		}

		// remove x
		if (oldMatch)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 1;
			continue;
		}

		// remove x, insert y
		if (xNext && xNextKey === yNextKey)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNextNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		break;
	}

	// eat up any remaining nodes with removeNode and insertNode

	while (xIndex < xLen)
	{
		index++;
		var x = xKids[xIndex];
		var xNode = x.b;
		_VirtualDom_removeNode(changes, localPatches, x.a, xNode, index);
		index += xNode.b || 0;
		xIndex++;
	}

	while (yIndex < yLen)
	{
		var endInserts = endInserts || [];
		var y = yKids[yIndex];
		_VirtualDom_insertNode(changes, localPatches, y.a, y.b, undefined, endInserts);
		yIndex++;
	}

	if (localPatches.length > 0 || inserts.length > 0 || endInserts)
	{
		_VirtualDom_pushPatch(patches, 8, rootIndex, {
			w: localPatches,
			x: inserts,
			y: endInserts
		});
	}
}



// CHANGES FROM KEYED DIFF


var _VirtualDom_POSTFIX = '_elmW6BL';


function _VirtualDom_insertNode(changes, localPatches, key, vnode, yIndex, inserts)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		entry = {
			c: 0,
			z: vnode,
			r: yIndex,
			s: undefined
		};

		inserts.push({ r: yIndex, A: entry });
		changes[key] = entry;

		return;
	}

	// this key was removed earlier, a match!
	if (entry.c === 1)
	{
		inserts.push({ r: yIndex, A: entry });

		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(entry.z, vnode, subPatches, entry.r);
		entry.r = yIndex;
		entry.s.s = {
			w: subPatches,
			A: entry
		};

		return;
	}

	// this key has already been inserted or moved, a duplicate!
	_VirtualDom_insertNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, yIndex, inserts);
}


function _VirtualDom_removeNode(changes, localPatches, key, vnode, index)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		var patch = _VirtualDom_pushPatch(localPatches, 9, index, undefined);

		changes[key] = {
			c: 1,
			z: vnode,
			r: index,
			s: patch
		};

		return;
	}

	// this key was inserted earlier, a match!
	if (entry.c === 0)
	{
		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(vnode, entry.z, subPatches, index);

		_VirtualDom_pushPatch(localPatches, 9, index, {
			w: subPatches,
			A: entry
		});

		return;
	}

	// this key has already been removed or moved, a duplicate!
	_VirtualDom_removeNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, index);
}



// ADD DOM NODES
//
// Each DOM node has an "index" assigned in order of traversal. It is important
// to minimize our crawl over the actual DOM, so these indexes (along with the
// descendantsCount of virtual nodes) let us skip touching entire subtrees of
// the DOM if we know there are no patches there.


function _VirtualDom_addDomNodes(domNode, vNode, patches, eventNode)
{
	_VirtualDom_addDomNodesHelp(domNode, vNode, patches, 0, 0, vNode.b, eventNode);
}


// assumes `patches` is non-empty and indexes increase monotonically.
function _VirtualDom_addDomNodesHelp(domNode, vNode, patches, i, low, high, eventNode)
{
	var patch = patches[i];
	var index = patch.r;

	while (index === low)
	{
		var patchType = patch.$;

		if (patchType === 1)
		{
			_VirtualDom_addDomNodes(domNode, vNode.k, patch.s, eventNode);
		}
		else if (patchType === 8)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var subPatches = patch.s.w;
			if (subPatches.length > 0)
			{
				_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
			}
		}
		else if (patchType === 9)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var data = patch.s;
			if (data)
			{
				data.A.s = domNode;
				var subPatches = data.w;
				if (subPatches.length > 0)
				{
					_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
				}
			}
		}
		else
		{
			patch.t = domNode;
			patch.u = eventNode;
		}

		i++;

		if (!(patch = patches[i]) || (index = patch.r) > high)
		{
			return i;
		}
	}

	var tag = vNode.$;

	if (tag === 4)
	{
		var subNode = vNode.k;

		while (subNode.$ === 4)
		{
			subNode = subNode.k;
		}

		return _VirtualDom_addDomNodesHelp(domNode, subNode, patches, i, low + 1, high, domNode.elm_event_node_ref);
	}

	// tag must be 1 or 2 at this point

	var vKids = vNode.e;
	var childNodes = domNode.childNodes;
	for (var j = 0; j < vKids.length; j++)
	{
		low++;
		var vKid = tag === 1 ? vKids[j] : vKids[j].b;
		var nextLow = low + (vKid.b || 0);
		if (low <= index && index <= nextLow)
		{
			i = _VirtualDom_addDomNodesHelp(childNodes[j], vKid, patches, i, low, nextLow, eventNode);
			if (!(patch = patches[i]) || (index = patch.r) > high)
			{
				return i;
			}
		}
		low = nextLow;
	}
	return i;
}



// APPLY PATCHES


function _VirtualDom_applyPatches(rootDomNode, oldVirtualNode, patches, eventNode)
{
	if (patches.length === 0)
	{
		return rootDomNode;
	}

	_VirtualDom_addDomNodes(rootDomNode, oldVirtualNode, patches, eventNode);
	return _VirtualDom_applyPatchesHelp(rootDomNode, patches);
}

function _VirtualDom_applyPatchesHelp(rootDomNode, patches)
{
	for (var i = 0; i < patches.length; i++)
	{
		var patch = patches[i];
		var localDomNode = patch.t
		var newNode = _VirtualDom_applyPatch(localDomNode, patch);
		if (localDomNode === rootDomNode)
		{
			rootDomNode = newNode;
		}
	}
	return rootDomNode;
}

function _VirtualDom_applyPatch(domNode, patch)
{
	switch (patch.$)
	{
		case 0:
			return _VirtualDom_applyPatchRedraw(domNode, patch.s, patch.u);

		case 4:
			_VirtualDom_applyFacts(domNode, patch.u, patch.s);
			return domNode;

		case 3:
			domNode.replaceData(0, domNode.length, patch.s);
			return domNode;

		case 1:
			return _VirtualDom_applyPatchesHelp(domNode, patch.s);

		case 2:
			if (domNode.elm_event_node_ref)
			{
				domNode.elm_event_node_ref.j = patch.s;
			}
			else
			{
				domNode.elm_event_node_ref = { j: patch.s, p: patch.u };
			}
			return domNode;

		case 6:
			var data = patch.s;
			for (var i = 0; i < data.i; i++)
			{
				domNode.removeChild(domNode.childNodes[data.v]);
			}
			return domNode;

		case 7:
			var data = patch.s;
			var kids = data.e;
			var i = data.v;
			var theEnd = domNode.childNodes[i];
			for (; i < kids.length; i++)
			{
				domNode.insertBefore(_VirtualDom_render(kids[i], patch.u), theEnd);
			}
			return domNode;

		case 9:
			var data = patch.s;
			if (!data)
			{
				domNode.parentNode.removeChild(domNode);
				return domNode;
			}
			var entry = data.A;
			if (typeof entry.r !== 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
			}
			entry.s = _VirtualDom_applyPatchesHelp(domNode, data.w);
			return domNode;

		case 8:
			return _VirtualDom_applyPatchReorder(domNode, patch);

		case 5:
			return patch.s(domNode);

		default:
			_Debug_crash(10); // 'Ran into an unknown patch!'
	}
}


function _VirtualDom_applyPatchRedraw(domNode, vNode, eventNode)
{
	var parentNode = domNode.parentNode;
	var newNode = _VirtualDom_render(vNode, eventNode);

	if (!newNode.elm_event_node_ref)
	{
		newNode.elm_event_node_ref = domNode.elm_event_node_ref;
	}

	if (parentNode && newNode !== domNode)
	{
		parentNode.replaceChild(newNode, domNode);
	}
	return newNode;
}


function _VirtualDom_applyPatchReorder(domNode, patch)
{
	var data = patch.s;

	// remove end inserts
	var frag = _VirtualDom_applyPatchReorderEndInsertsHelp(data.y, patch);

	// removals
	domNode = _VirtualDom_applyPatchesHelp(domNode, data.w);

	// inserts
	var inserts = data.x;
	for (var i = 0; i < inserts.length; i++)
	{
		var insert = inserts[i];
		var entry = insert.A;
		var node = entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u);
		domNode.insertBefore(node, domNode.childNodes[insert.r]);
	}

	// add end inserts
	if (frag)
	{
		_VirtualDom_appendChild(domNode, frag);
	}

	return domNode;
}


function _VirtualDom_applyPatchReorderEndInsertsHelp(endInserts, patch)
{
	if (!endInserts)
	{
		return;
	}

	var frag = _VirtualDom_doc.createDocumentFragment();
	for (var i = 0; i < endInserts.length; i++)
	{
		var insert = endInserts[i];
		var entry = insert.A;
		_VirtualDom_appendChild(frag, entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u)
		);
	}
	return frag;
}


function _VirtualDom_virtualize(node)
{
	// TEXT NODES

	if (node.nodeType === 3)
	{
		return _VirtualDom_text(node.textContent);
	}


	// WEIRD NODES

	if (node.nodeType !== 1)
	{
		return _VirtualDom_text('');
	}


	// ELEMENT NODES

	var attrList = _List_Nil;
	var attrs = node.attributes;
	for (var i = attrs.length; i--; )
	{
		var attr = attrs[i];
		var name = attr.name;
		var value = attr.value;
		attrList = _List_Cons( A2(_VirtualDom_attribute, name, value), attrList );
	}

	var tag = node.tagName.toLowerCase();
	var kidList = _List_Nil;
	var kids = node.childNodes;

	for (var i = kids.length; i--; )
	{
		kidList = _List_Cons(_VirtualDom_virtualize(kids[i]), kidList);
	}
	return A3(_VirtualDom_node, tag, attrList, kidList);
}

function _VirtualDom_dekey(keyedNode)
{
	var keyedKids = keyedNode.e;
	var len = keyedKids.length;
	var kids = new Array(len);
	for (var i = 0; i < len; i++)
	{
		kids[i] = keyedKids[i].b;
	}

	return {
		$: 1,
		c: keyedNode.c,
		d: keyedNode.d,
		e: kids,
		f: keyedNode.f,
		b: keyedNode.b
	};
}




// ELEMENT


var _Debugger_element;

var _Browser_element = _Debugger_element || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function(sendToApp, initialModel) {
			var view = impl.view;
			/**_UNUSED/
			var domNode = args['node'];
			//*/
			/**/
			var domNode = args && args['node'] ? args['node'] : _Debug_crash(0);
			//*/
			var currNode = _VirtualDom_virtualize(domNode);

			return _Browser_makeAnimator(initialModel, function(model)
			{
				var nextNode = view(model);
				var patches = _VirtualDom_diff(currNode, nextNode);
				domNode = _VirtualDom_applyPatches(domNode, currNode, patches, sendToApp);
				currNode = nextNode;
			});
		}
	);
});



// DOCUMENT


var _Debugger_document;

var _Browser_document = _Debugger_document || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function(sendToApp, initialModel) {
			var divertHrefToApp = impl.setup && impl.setup(sendToApp)
			var view = impl.view;
			var title = _VirtualDom_doc.title;
			var bodyNode = _VirtualDom_doc.body;
			var currNode = _VirtualDom_virtualize(bodyNode);
			return _Browser_makeAnimator(initialModel, function(model)
			{
				_VirtualDom_divertHrefToApp = divertHrefToApp;
				var doc = view(model);
				var nextNode = _VirtualDom_node('body')(_List_Nil)(doc.body);
				var patches = _VirtualDom_diff(currNode, nextNode);
				bodyNode = _VirtualDom_applyPatches(bodyNode, currNode, patches, sendToApp);
				currNode = nextNode;
				_VirtualDom_divertHrefToApp = 0;
				(title !== doc.title) && (_VirtualDom_doc.title = title = doc.title);
			});
		}
	);
});



// ANIMATION


var _Browser_cancelAnimationFrame =
	typeof cancelAnimationFrame !== 'undefined'
		? cancelAnimationFrame
		: function(id) { clearTimeout(id); };

var _Browser_requestAnimationFrame =
	typeof requestAnimationFrame !== 'undefined'
		? requestAnimationFrame
		: function(callback) { return setTimeout(callback, 1000 / 60); };


function _Browser_makeAnimator(model, draw)
{
	draw(model);

	var state = 0;

	function updateIfNeeded()
	{
		state = state === 1
			? 0
			: ( _Browser_requestAnimationFrame(updateIfNeeded), draw(model), 1 );
	}

	return function(nextModel, isSync)
	{
		model = nextModel;

		isSync
			? ( draw(model),
				state === 2 && (state = 1)
				)
			: ( state === 0 && _Browser_requestAnimationFrame(updateIfNeeded),
				state = 2
				);
	};
}



// APPLICATION


function _Browser_application(impl)
{
	var onUrlChange = impl.onUrlChange;
	var onUrlRequest = impl.onUrlRequest;
	var key = function() { key.a(onUrlChange(_Browser_getUrl())); };

	return _Browser_document({
		setup: function(sendToApp)
		{
			key.a = sendToApp;
			_Browser_window.addEventListener('popstate', key);
			_Browser_window.navigator.userAgent.indexOf('Trident') < 0 || _Browser_window.addEventListener('hashchange', key);

			return F2(function(domNode, event)
			{
				if (!event.ctrlKey && !event.metaKey && !event.shiftKey && event.button < 1 && !domNode.target && !domNode.hasAttribute('download'))
				{
					event.preventDefault();
					var href = domNode.href;
					var curr = _Browser_getUrl();
					var next = $elm$url$Url$fromString(href).a;
					sendToApp(onUrlRequest(
						(next
							&& curr.protocol === next.protocol
							&& curr.host === next.host
							&& curr.port_.a === next.port_.a
						)
							? $elm$browser$Browser$Internal(next)
							: $elm$browser$Browser$External(href)
					));
				}
			});
		},
		init: function(flags)
		{
			return A3(impl.init, flags, _Browser_getUrl(), key);
		},
		view: impl.view,
		update: impl.update,
		subscriptions: impl.subscriptions
	});
}

function _Browser_getUrl()
{
	return $elm$url$Url$fromString(_VirtualDom_doc.location.href).a || _Debug_crash(1);
}

var _Browser_go = F2(function(key, n)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		n && history.go(n);
		key();
	}));
});

var _Browser_pushUrl = F2(function(key, url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		history.pushState({}, '', url);
		key();
	}));
});

var _Browser_replaceUrl = F2(function(key, url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		history.replaceState({}, '', url);
		key();
	}));
});



// GLOBAL EVENTS


var _Browser_fakeNode = { addEventListener: function() {}, removeEventListener: function() {} };
var _Browser_doc = typeof document !== 'undefined' ? document : _Browser_fakeNode;
var _Browser_window = typeof window !== 'undefined' ? window : _Browser_fakeNode;

var _Browser_on = F3(function(node, eventName, sendToSelf)
{
	return _Scheduler_spawn(_Scheduler_binding(function(callback)
	{
		function handler(event)	{ _Scheduler_rawSpawn(sendToSelf(event)); }
		node.addEventListener(eventName, handler, _VirtualDom_passiveSupported && { passive: true });
		return function() { node.removeEventListener(eventName, handler); };
	}));
});

var _Browser_decodeEvent = F2(function(decoder, event)
{
	var result = _Json_runHelp(decoder, event);
	return $elm$core$Result$isOk(result) ? $elm$core$Maybe$Just(result.a) : $elm$core$Maybe$Nothing;
});



// PAGE VISIBILITY


function _Browser_visibilityInfo()
{
	return (typeof _VirtualDom_doc.hidden !== 'undefined')
		? { hidden: 'hidden', change: 'visibilitychange' }
		:
	(typeof _VirtualDom_doc.mozHidden !== 'undefined')
		? { hidden: 'mozHidden', change: 'mozvisibilitychange' }
		:
	(typeof _VirtualDom_doc.msHidden !== 'undefined')
		? { hidden: 'msHidden', change: 'msvisibilitychange' }
		:
	(typeof _VirtualDom_doc.webkitHidden !== 'undefined')
		? { hidden: 'webkitHidden', change: 'webkitvisibilitychange' }
		: { hidden: 'hidden', change: 'visibilitychange' };
}



// ANIMATION FRAMES


function _Browser_rAF()
{
	return _Scheduler_binding(function(callback)
	{
		var id = _Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(Date.now()));
		});

		return function() {
			_Browser_cancelAnimationFrame(id);
		};
	});
}


function _Browser_now()
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(Date.now()));
	});
}



// DOM STUFF


function _Browser_withNode(id, doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			var node = document.getElementById(id);
			callback(node
				? _Scheduler_succeed(doStuff(node))
				: _Scheduler_fail($elm$browser$Browser$Dom$NotFound(id))
			);
		});
	});
}


function _Browser_withWindow(doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(doStuff()));
		});
	});
}


// FOCUS and BLUR


var _Browser_call = F2(function(functionName, id)
{
	return _Browser_withNode(id, function(node) {
		node[functionName]();
		return _Utils_Tuple0;
	});
});



// WINDOW VIEWPORT


function _Browser_getViewport()
{
	return {
		scene: _Browser_getScene(),
		viewport: {
			x: _Browser_window.pageXOffset,
			y: _Browser_window.pageYOffset,
			width: _Browser_doc.documentElement.clientWidth,
			height: _Browser_doc.documentElement.clientHeight
		}
	};
}

function _Browser_getScene()
{
	var body = _Browser_doc.body;
	var elem = _Browser_doc.documentElement;
	return {
		width: Math.max(body.scrollWidth, body.offsetWidth, elem.scrollWidth, elem.offsetWidth, elem.clientWidth),
		height: Math.max(body.scrollHeight, body.offsetHeight, elem.scrollHeight, elem.offsetHeight, elem.clientHeight)
	};
}

var _Browser_setViewport = F2(function(x, y)
{
	return _Browser_withWindow(function()
	{
		_Browser_window.scroll(x, y);
		return _Utils_Tuple0;
	});
});



// ELEMENT VIEWPORT


function _Browser_getViewportOf(id)
{
	return _Browser_withNode(id, function(node)
	{
		return {
			scene: {
				width: node.scrollWidth,
				height: node.scrollHeight
			},
			viewport: {
				x: node.scrollLeft,
				y: node.scrollTop,
				width: node.clientWidth,
				height: node.clientHeight
			}
		};
	});
}


var _Browser_setViewportOf = F3(function(id, x, y)
{
	return _Browser_withNode(id, function(node)
	{
		node.scrollLeft = x;
		node.scrollTop = y;
		return _Utils_Tuple0;
	});
});



// ELEMENT


function _Browser_getElement(id)
{
	return _Browser_withNode(id, function(node)
	{
		var rect = node.getBoundingClientRect();
		var x = _Browser_window.pageXOffset;
		var y = _Browser_window.pageYOffset;
		return {
			scene: _Browser_getScene(),
			viewport: {
				x: x,
				y: y,
				width: _Browser_doc.documentElement.clientWidth,
				height: _Browser_doc.documentElement.clientHeight
			},
			element: {
				x: x + rect.left,
				y: y + rect.top,
				width: rect.width,
				height: rect.height
			}
		};
	});
}



// LOAD and RELOAD


function _Browser_reload(skipCache)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		_VirtualDom_doc.location.reload(skipCache);
	}));
}

function _Browser_load(url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		try
		{
			_Browser_window.location = url;
		}
		catch(err)
		{
			// Only Firefox can throw a NS_ERROR_MALFORMED_URI exception here.
			// Other browsers reload the page, so let's be consistent about that.
			_VirtualDom_doc.location.reload(false);
		}
	}));
}



// SEND REQUEST

var _Http_toTask = F3(function(router, toTask, request)
{
	return _Scheduler_binding(function(callback)
	{
		function done(response) {
			callback(toTask(request.expect.a(response)));
		}

		var xhr = new XMLHttpRequest();
		xhr.addEventListener('error', function() { done($elm$http$Http$NetworkError_); });
		xhr.addEventListener('timeout', function() { done($elm$http$Http$Timeout_); });
		xhr.addEventListener('load', function() { done(_Http_toResponse(request.expect.b, xhr)); });
		$elm$core$Maybe$isJust(request.tracker) && _Http_track(router, xhr, request.tracker.a);

		try {
			xhr.open(request.method, request.url, true);
		} catch (e) {
			return done($elm$http$Http$BadUrl_(request.url));
		}

		_Http_configureRequest(xhr, request);

		request.body.a && xhr.setRequestHeader('Content-Type', request.body.a);
		xhr.send(request.body.b);

		return function() { xhr.c = true; xhr.abort(); };
	});
});


// CONFIGURE

function _Http_configureRequest(xhr, request)
{
	for (var headers = request.headers; headers.b; headers = headers.b) // WHILE_CONS
	{
		xhr.setRequestHeader(headers.a.a, headers.a.b);
	}
	xhr.timeout = request.timeout.a || 0;
	xhr.responseType = request.expect.d;
	xhr.withCredentials = request.allowCookiesFromOtherDomains;
}


// RESPONSES

function _Http_toResponse(toBody, xhr)
{
	return A2(
		200 <= xhr.status && xhr.status < 300 ? $elm$http$Http$GoodStatus_ : $elm$http$Http$BadStatus_,
		_Http_toMetadata(xhr),
		toBody(xhr.response)
	);
}


// METADATA

function _Http_toMetadata(xhr)
{
	return {
		url: xhr.responseURL,
		statusCode: xhr.status,
		statusText: xhr.statusText,
		headers: _Http_parseHeaders(xhr.getAllResponseHeaders())
	};
}


// HEADERS

function _Http_parseHeaders(rawHeaders)
{
	if (!rawHeaders)
	{
		return $elm$core$Dict$empty;
	}

	var headers = $elm$core$Dict$empty;
	var headerPairs = rawHeaders.split('\r\n');
	for (var i = headerPairs.length; i--; )
	{
		var headerPair = headerPairs[i];
		var index = headerPair.indexOf(': ');
		if (index > 0)
		{
			var key = headerPair.substring(0, index);
			var value = headerPair.substring(index + 2);

			headers = A3($elm$core$Dict$update, key, function(oldValue) {
				return $elm$core$Maybe$Just($elm$core$Maybe$isJust(oldValue)
					? value + ', ' + oldValue.a
					: value
				);
			}, headers);
		}
	}
	return headers;
}


// EXPECT

var _Http_expect = F3(function(type, toBody, toValue)
{
	return {
		$: 0,
		d: type,
		b: toBody,
		a: toValue
	};
});

var _Http_mapExpect = F2(function(func, expect)
{
	return {
		$: 0,
		d: expect.d,
		b: expect.b,
		a: function(x) { return func(expect.a(x)); }
	};
});

function _Http_toDataView(arrayBuffer)
{
	return new DataView(arrayBuffer);
}


// BODY and PARTS

var _Http_emptyBody = { $: 0 };
var _Http_pair = F2(function(a, b) { return { $: 0, a: a, b: b }; });

function _Http_toFormData(parts)
{
	for (var formData = new FormData(); parts.b; parts = parts.b) // WHILE_CONS
	{
		var part = parts.a;
		formData.append(part.a, part.b);
	}
	return formData;
}

var _Http_bytesToBlob = F2(function(mime, bytes)
{
	return new Blob([bytes], { type: mime });
});


// PROGRESS

function _Http_track(router, xhr, tracker)
{
	// TODO check out lengthComputable on loadstart event

	xhr.upload.addEventListener('progress', function(event) {
		if (xhr.c) { return; }
		_Scheduler_rawSpawn(A2($elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, $elm$http$Http$Sending({
			sent: event.loaded,
			size: event.total
		}))));
	});
	xhr.addEventListener('progress', function(event) {
		if (xhr.c) { return; }
		_Scheduler_rawSpawn(A2($elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, $elm$http$Http$Receiving({
			received: event.loaded,
			size: event.lengthComputable ? $elm$core$Maybe$Just(event.total) : $elm$core$Maybe$Nothing
		}))));
	});
}

function _Url_percentEncode(string)
{
	return encodeURIComponent(string);
}

function _Url_percentDecode(string)
{
	try
	{
		return $elm$core$Maybe$Just(decodeURIComponent(string));
	}
	catch (e)
	{
		return $elm$core$Maybe$Nothing;
	}
}

// BYTES

function _Bytes_width(bytes)
{
	return bytes.byteLength;
}

var _Bytes_getHostEndianness = F2(function(le, be)
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(new Uint8Array(new Uint32Array([1]))[0] === 1 ? le : be));
	});
});


// ENCODERS

function _Bytes_encode(encoder)
{
	var mutableBytes = new DataView(new ArrayBuffer($elm$bytes$Bytes$Encode$getWidth(encoder)));
	$elm$bytes$Bytes$Encode$write(encoder)(mutableBytes)(0);
	return mutableBytes;
}


// SIGNED INTEGERS

var _Bytes_write_i8  = F3(function(mb, i, n) { mb.setInt8(i, n); return i + 1; });
var _Bytes_write_i16 = F4(function(mb, i, n, isLE) { mb.setInt16(i, n, isLE); return i + 2; });
var _Bytes_write_i32 = F4(function(mb, i, n, isLE) { mb.setInt32(i, n, isLE); return i + 4; });


// UNSIGNED INTEGERS

var _Bytes_write_u8  = F3(function(mb, i, n) { mb.setUint8(i, n); return i + 1 ;});
var _Bytes_write_u16 = F4(function(mb, i, n, isLE) { mb.setUint16(i, n, isLE); return i + 2; });
var _Bytes_write_u32 = F4(function(mb, i, n, isLE) { mb.setUint32(i, n, isLE); return i + 4; });


// FLOATS

var _Bytes_write_f32 = F4(function(mb, i, n, isLE) { mb.setFloat32(i, n, isLE); return i + 4; });
var _Bytes_write_f64 = F4(function(mb, i, n, isLE) { mb.setFloat64(i, n, isLE); return i + 8; });


// BYTES

var _Bytes_write_bytes = F3(function(mb, offset, bytes)
{
	for (var i = 0, len = bytes.byteLength, limit = len - 4; i <= limit; i += 4)
	{
		mb.setUint32(offset + i, bytes.getUint32(i));
	}
	for (; i < len; i++)
	{
		mb.setUint8(offset + i, bytes.getUint8(i));
	}
	return offset + len;
});


// STRINGS

function _Bytes_getStringWidth(string)
{
	for (var width = 0, i = 0; i < string.length; i++)
	{
		var code = string.charCodeAt(i);
		width +=
			(code < 0x80) ? 1 :
			(code < 0x800) ? 2 :
			(code < 0xD800 || 0xDBFF < code) ? 3 : (i++, 4);
	}
	return width;
}

var _Bytes_write_string = F3(function(mb, offset, string)
{
	for (var i = 0; i < string.length; i++)
	{
		var code = string.charCodeAt(i);
		offset +=
			(code < 0x80)
				? (mb.setUint8(offset, code)
				, 1
				)
				:
			(code < 0x800)
				? (mb.setUint16(offset, 0xC080 /* 0b1100000010000000 */
					| (code >>> 6 & 0x1F /* 0b00011111 */) << 8
					| code & 0x3F /* 0b00111111 */)
				, 2
				)
				:
			(code < 0xD800 || 0xDBFF < code)
				? (mb.setUint16(offset, 0xE080 /* 0b1110000010000000 */
					| (code >>> 12 & 0xF /* 0b00001111 */) << 8
					| code >>> 6 & 0x3F /* 0b00111111 */)
				, mb.setUint8(offset + 2, 0x80 /* 0b10000000 */
					| code & 0x3F /* 0b00111111 */)
				, 3
				)
				:
			(code = (code - 0xD800) * 0x400 + string.charCodeAt(++i) - 0xDC00 + 0x10000
			, mb.setUint32(offset, 0xF0808080 /* 0b11110000100000001000000010000000 */
				| (code >>> 18 & 0x7 /* 0b00000111 */) << 24
				| (code >>> 12 & 0x3F /* 0b00111111 */) << 16
				| (code >>> 6 & 0x3F /* 0b00111111 */) << 8
				| code & 0x3F /* 0b00111111 */)
			, 4
			);
	}
	return offset;
});


// DECODER

var _Bytes_decode = F2(function(decoder, bytes)
{
	try {
		return $elm$core$Maybe$Just(A2(decoder, bytes, 0).b);
	} catch(e) {
		return $elm$core$Maybe$Nothing;
	}
});

var _Bytes_read_i8  = F2(function(      bytes, offset) { return _Utils_Tuple2(offset + 1, bytes.getInt8(offset)); });
var _Bytes_read_i16 = F3(function(isLE, bytes, offset) { return _Utils_Tuple2(offset + 2, bytes.getInt16(offset, isLE)); });
var _Bytes_read_i32 = F3(function(isLE, bytes, offset) { return _Utils_Tuple2(offset + 4, bytes.getInt32(offset, isLE)); });
var _Bytes_read_u8  = F2(function(      bytes, offset) { return _Utils_Tuple2(offset + 1, bytes.getUint8(offset)); });
var _Bytes_read_u16 = F3(function(isLE, bytes, offset) { return _Utils_Tuple2(offset + 2, bytes.getUint16(offset, isLE)); });
var _Bytes_read_u32 = F3(function(isLE, bytes, offset) { return _Utils_Tuple2(offset + 4, bytes.getUint32(offset, isLE)); });
var _Bytes_read_f32 = F3(function(isLE, bytes, offset) { return _Utils_Tuple2(offset + 4, bytes.getFloat32(offset, isLE)); });
var _Bytes_read_f64 = F3(function(isLE, bytes, offset) { return _Utils_Tuple2(offset + 8, bytes.getFloat64(offset, isLE)); });

var _Bytes_read_bytes = F3(function(len, bytes, offset)
{
	return _Utils_Tuple2(offset + len, new DataView(bytes.buffer, bytes.byteOffset + offset, len));
});

var _Bytes_read_string = F3(function(len, bytes, offset)
{
	var string = '';
	var end = offset + len;
	for (; offset < end;)
	{
		var byte = bytes.getUint8(offset++);
		string +=
			(byte < 128)
				? String.fromCharCode(byte)
				:
			((byte & 0xE0 /* 0b11100000 */) === 0xC0 /* 0b11000000 */)
				? String.fromCharCode((byte & 0x1F /* 0b00011111 */) << 6 | bytes.getUint8(offset++) & 0x3F /* 0b00111111 */)
				:
			((byte & 0xF0 /* 0b11110000 */) === 0xE0 /* 0b11100000 */)
				? String.fromCharCode(
					(byte & 0xF /* 0b00001111 */) << 12
					| (bytes.getUint8(offset++) & 0x3F /* 0b00111111 */) << 6
					| bytes.getUint8(offset++) & 0x3F /* 0b00111111 */
				)
				:
				(byte =
					((byte & 0x7 /* 0b00000111 */) << 18
						| (bytes.getUint8(offset++) & 0x3F /* 0b00111111 */) << 12
						| (bytes.getUint8(offset++) & 0x3F /* 0b00111111 */) << 6
						| bytes.getUint8(offset++) & 0x3F /* 0b00111111 */
					) - 0x10000
				, String.fromCharCode(Math.floor(byte / 0x400) + 0xD800, byte % 0x400 + 0xDC00)
				);
	}
	return _Utils_Tuple2(offset, string);
});

var _Bytes_decodeFailure = F2(function() { throw 0; });



var _Bitwise_and = F2(function(a, b)
{
	return a & b;
});

var _Bitwise_or = F2(function(a, b)
{
	return a | b;
});

var _Bitwise_xor = F2(function(a, b)
{
	return a ^ b;
});

function _Bitwise_complement(a)
{
	return ~a;
};

var _Bitwise_shiftLeftBy = F2(function(offset, a)
{
	return a << offset;
});

var _Bitwise_shiftRightBy = F2(function(offset, a)
{
	return a >> offset;
});

var _Bitwise_shiftRightZfBy = F2(function(offset, a)
{
	return a >>> offset;
});
var $author$project$Main$LinkClicked = function (a) {
	return {$: 'LinkClicked', a: a};
};
var $author$project$Main$UrlChanged = function (a) {
	return {$: 'UrlChanged', a: a};
};
var $elm$core$Basics$EQ = {$: 'EQ'};
var $elm$core$Basics$GT = {$: 'GT'};
var $elm$core$Basics$LT = {$: 'LT'};
var $elm$core$List$cons = _List_cons;
var $elm$core$Dict$foldr = F3(
	function (func, acc, t) {
		foldr:
		while (true) {
			if (t.$ === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var key = t.b;
				var value = t.c;
				var left = t.d;
				var right = t.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldr, func, acc, right)),
					$temp$t = left;
				func = $temp$func;
				acc = $temp$acc;
				t = $temp$t;
				continue foldr;
			}
		}
	});
var $elm$core$Dict$toList = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, list) {
				return A2(
					$elm$core$List$cons,
					_Utils_Tuple2(key, value),
					list);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Dict$keys = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, keyList) {
				return A2($elm$core$List$cons, key, keyList);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Set$toList = function (_v0) {
	var dict = _v0.a;
	return $elm$core$Dict$keys(dict);
};
var $elm$core$Elm$JsArray$foldr = _JsArray_foldr;
var $elm$core$Array$foldr = F3(
	function (func, baseCase, _v0) {
		var tree = _v0.c;
		var tail = _v0.d;
		var helper = F2(
			function (node, acc) {
				if (node.$ === 'SubTree') {
					var subTree = node.a;
					return A3($elm$core$Elm$JsArray$foldr, helper, acc, subTree);
				} else {
					var values = node.a;
					return A3($elm$core$Elm$JsArray$foldr, func, acc, values);
				}
			});
		return A3(
			$elm$core$Elm$JsArray$foldr,
			helper,
			A3($elm$core$Elm$JsArray$foldr, func, baseCase, tail),
			tree);
	});
var $elm$core$Array$toList = function (array) {
	return A3($elm$core$Array$foldr, $elm$core$List$cons, _List_Nil, array);
};
var $elm$core$Result$Err = function (a) {
	return {$: 'Err', a: a};
};
var $elm$json$Json$Decode$Failure = F2(
	function (a, b) {
		return {$: 'Failure', a: a, b: b};
	});
var $elm$json$Json$Decode$Field = F2(
	function (a, b) {
		return {$: 'Field', a: a, b: b};
	});
var $elm$json$Json$Decode$Index = F2(
	function (a, b) {
		return {$: 'Index', a: a, b: b};
	});
var $elm$core$Result$Ok = function (a) {
	return {$: 'Ok', a: a};
};
var $elm$json$Json$Decode$OneOf = function (a) {
	return {$: 'OneOf', a: a};
};
var $elm$core$Basics$False = {$: 'False'};
var $elm$core$Basics$add = _Basics_add;
var $elm$core$Maybe$Just = function (a) {
	return {$: 'Just', a: a};
};
var $elm$core$Maybe$Nothing = {$: 'Nothing'};
var $elm$core$String$all = _String_all;
var $elm$core$Basics$and = _Basics_and;
var $elm$core$Basics$append = _Utils_append;
var $elm$json$Json$Encode$encode = _Json_encode;
var $elm$core$String$fromInt = _String_fromNumber;
var $elm$core$String$join = F2(
	function (sep, chunks) {
		return A2(
			_String_join,
			sep,
			_List_toArray(chunks));
	});
var $elm$core$String$split = F2(
	function (sep, string) {
		return _List_fromArray(
			A2(_String_split, sep, string));
	});
var $elm$json$Json$Decode$indent = function (str) {
	return A2(
		$elm$core$String$join,
		'\n    ',
		A2($elm$core$String$split, '\n', str));
};
var $elm$core$List$foldl = F3(
	function (func, acc, list) {
		foldl:
		while (true) {
			if (!list.b) {
				return acc;
			} else {
				var x = list.a;
				var xs = list.b;
				var $temp$func = func,
					$temp$acc = A2(func, x, acc),
					$temp$list = xs;
				func = $temp$func;
				acc = $temp$acc;
				list = $temp$list;
				continue foldl;
			}
		}
	});
var $elm$core$List$length = function (xs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, i) {
				return i + 1;
			}),
		0,
		xs);
};
var $elm$core$List$map2 = _List_map2;
var $elm$core$Basics$le = _Utils_le;
var $elm$core$Basics$sub = _Basics_sub;
var $elm$core$List$rangeHelp = F3(
	function (lo, hi, list) {
		rangeHelp:
		while (true) {
			if (_Utils_cmp(lo, hi) < 1) {
				var $temp$lo = lo,
					$temp$hi = hi - 1,
					$temp$list = A2($elm$core$List$cons, hi, list);
				lo = $temp$lo;
				hi = $temp$hi;
				list = $temp$list;
				continue rangeHelp;
			} else {
				return list;
			}
		}
	});
var $elm$core$List$range = F2(
	function (lo, hi) {
		return A3($elm$core$List$rangeHelp, lo, hi, _List_Nil);
	});
var $elm$core$List$indexedMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$map2,
			f,
			A2(
				$elm$core$List$range,
				0,
				$elm$core$List$length(xs) - 1),
			xs);
	});
var $elm$core$Char$toCode = _Char_toCode;
var $elm$core$Char$isLower = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (97 <= code) && (code <= 122);
};
var $elm$core$Char$isUpper = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 90) && (65 <= code);
};
var $elm$core$Basics$or = _Basics_or;
var $elm$core$Char$isAlpha = function (_char) {
	return $elm$core$Char$isLower(_char) || $elm$core$Char$isUpper(_char);
};
var $elm$core$Char$isDigit = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 57) && (48 <= code);
};
var $elm$core$Char$isAlphaNum = function (_char) {
	return $elm$core$Char$isLower(_char) || ($elm$core$Char$isUpper(_char) || $elm$core$Char$isDigit(_char));
};
var $elm$core$List$reverse = function (list) {
	return A3($elm$core$List$foldl, $elm$core$List$cons, _List_Nil, list);
};
var $elm$core$String$uncons = _String_uncons;
var $elm$json$Json$Decode$errorOneOf = F2(
	function (i, error) {
		return '\n\n(' + ($elm$core$String$fromInt(i + 1) + (') ' + $elm$json$Json$Decode$indent(
			$elm$json$Json$Decode$errorToString(error))));
	});
var $elm$json$Json$Decode$errorToString = function (error) {
	return A2($elm$json$Json$Decode$errorToStringHelp, error, _List_Nil);
};
var $elm$json$Json$Decode$errorToStringHelp = F2(
	function (error, context) {
		errorToStringHelp:
		while (true) {
			switch (error.$) {
				case 'Field':
					var f = error.a;
					var err = error.b;
					var isSimple = function () {
						var _v1 = $elm$core$String$uncons(f);
						if (_v1.$ === 'Nothing') {
							return false;
						} else {
							var _v2 = _v1.a;
							var _char = _v2.a;
							var rest = _v2.b;
							return $elm$core$Char$isAlpha(_char) && A2($elm$core$String$all, $elm$core$Char$isAlphaNum, rest);
						}
					}();
					var fieldName = isSimple ? ('.' + f) : ('[\'' + (f + '\']'));
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, fieldName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 'Index':
					var i = error.a;
					var err = error.b;
					var indexName = '[' + ($elm$core$String$fromInt(i) + ']');
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, indexName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 'OneOf':
					var errors = error.a;
					if (!errors.b) {
						return 'Ran into a Json.Decode.oneOf with no possibilities' + function () {
							if (!context.b) {
								return '!';
							} else {
								return ' at json' + A2(
									$elm$core$String$join,
									'',
									$elm$core$List$reverse(context));
							}
						}();
					} else {
						if (!errors.b.b) {
							var err = errors.a;
							var $temp$error = err,
								$temp$context = context;
							error = $temp$error;
							context = $temp$context;
							continue errorToStringHelp;
						} else {
							var starter = function () {
								if (!context.b) {
									return 'Json.Decode.oneOf';
								} else {
									return 'The Json.Decode.oneOf at json' + A2(
										$elm$core$String$join,
										'',
										$elm$core$List$reverse(context));
								}
							}();
							var introduction = starter + (' failed in the following ' + ($elm$core$String$fromInt(
								$elm$core$List$length(errors)) + ' ways:'));
							return A2(
								$elm$core$String$join,
								'\n\n',
								A2(
									$elm$core$List$cons,
									introduction,
									A2($elm$core$List$indexedMap, $elm$json$Json$Decode$errorOneOf, errors)));
						}
					}
				default:
					var msg = error.a;
					var json = error.b;
					var introduction = function () {
						if (!context.b) {
							return 'Problem with the given value:\n\n';
						} else {
							return 'Problem with the value at json' + (A2(
								$elm$core$String$join,
								'',
								$elm$core$List$reverse(context)) + ':\n\n    ');
						}
					}();
					return introduction + ($elm$json$Json$Decode$indent(
						A2($elm$json$Json$Encode$encode, 4, json)) + ('\n\n' + msg));
			}
		}
	});
var $elm$core$Array$branchFactor = 32;
var $elm$core$Array$Array_elm_builtin = F4(
	function (a, b, c, d) {
		return {$: 'Array_elm_builtin', a: a, b: b, c: c, d: d};
	});
var $elm$core$Elm$JsArray$empty = _JsArray_empty;
var $elm$core$Basics$ceiling = _Basics_ceiling;
var $elm$core$Basics$fdiv = _Basics_fdiv;
var $elm$core$Basics$logBase = F2(
	function (base, number) {
		return _Basics_log(number) / _Basics_log(base);
	});
var $elm$core$Basics$toFloat = _Basics_toFloat;
var $elm$core$Array$shiftStep = $elm$core$Basics$ceiling(
	A2($elm$core$Basics$logBase, 2, $elm$core$Array$branchFactor));
var $elm$core$Array$empty = A4($elm$core$Array$Array_elm_builtin, 0, $elm$core$Array$shiftStep, $elm$core$Elm$JsArray$empty, $elm$core$Elm$JsArray$empty);
var $elm$core$Elm$JsArray$initialize = _JsArray_initialize;
var $elm$core$Array$Leaf = function (a) {
	return {$: 'Leaf', a: a};
};
var $elm$core$Basics$apL = F2(
	function (f, x) {
		return f(x);
	});
var $elm$core$Basics$apR = F2(
	function (x, f) {
		return f(x);
	});
var $elm$core$Basics$eq = _Utils_equal;
var $elm$core$Basics$floor = _Basics_floor;
var $elm$core$Elm$JsArray$length = _JsArray_length;
var $elm$core$Basics$gt = _Utils_gt;
var $elm$core$Basics$max = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) > 0) ? x : y;
	});
var $elm$core$Basics$mul = _Basics_mul;
var $elm$core$Array$SubTree = function (a) {
	return {$: 'SubTree', a: a};
};
var $elm$core$Elm$JsArray$initializeFromList = _JsArray_initializeFromList;
var $elm$core$Array$compressNodes = F2(
	function (nodes, acc) {
		compressNodes:
		while (true) {
			var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodes);
			var node = _v0.a;
			var remainingNodes = _v0.b;
			var newAcc = A2(
				$elm$core$List$cons,
				$elm$core$Array$SubTree(node),
				acc);
			if (!remainingNodes.b) {
				return $elm$core$List$reverse(newAcc);
			} else {
				var $temp$nodes = remainingNodes,
					$temp$acc = newAcc;
				nodes = $temp$nodes;
				acc = $temp$acc;
				continue compressNodes;
			}
		}
	});
var $elm$core$Tuple$first = function (_v0) {
	var x = _v0.a;
	return x;
};
var $elm$core$Array$treeFromBuilder = F2(
	function (nodeList, nodeListSize) {
		treeFromBuilder:
		while (true) {
			var newNodeSize = $elm$core$Basics$ceiling(nodeListSize / $elm$core$Array$branchFactor);
			if (newNodeSize === 1) {
				return A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodeList).a;
			} else {
				var $temp$nodeList = A2($elm$core$Array$compressNodes, nodeList, _List_Nil),
					$temp$nodeListSize = newNodeSize;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue treeFromBuilder;
			}
		}
	});
var $elm$core$Array$builderToArray = F2(
	function (reverseNodeList, builder) {
		if (!builder.nodeListSize) {
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.tail),
				$elm$core$Array$shiftStep,
				$elm$core$Elm$JsArray$empty,
				builder.tail);
		} else {
			var treeLen = builder.nodeListSize * $elm$core$Array$branchFactor;
			var depth = $elm$core$Basics$floor(
				A2($elm$core$Basics$logBase, $elm$core$Array$branchFactor, treeLen - 1));
			var correctNodeList = reverseNodeList ? $elm$core$List$reverse(builder.nodeList) : builder.nodeList;
			var tree = A2($elm$core$Array$treeFromBuilder, correctNodeList, builder.nodeListSize);
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.tail) + treeLen,
				A2($elm$core$Basics$max, 5, depth * $elm$core$Array$shiftStep),
				tree,
				builder.tail);
		}
	});
var $elm$core$Basics$idiv = _Basics_idiv;
var $elm$core$Basics$lt = _Utils_lt;
var $elm$core$Array$initializeHelp = F5(
	function (fn, fromIndex, len, nodeList, tail) {
		initializeHelp:
		while (true) {
			if (fromIndex < 0) {
				return A2(
					$elm$core$Array$builderToArray,
					false,
					{nodeList: nodeList, nodeListSize: (len / $elm$core$Array$branchFactor) | 0, tail: tail});
			} else {
				var leaf = $elm$core$Array$Leaf(
					A3($elm$core$Elm$JsArray$initialize, $elm$core$Array$branchFactor, fromIndex, fn));
				var $temp$fn = fn,
					$temp$fromIndex = fromIndex - $elm$core$Array$branchFactor,
					$temp$len = len,
					$temp$nodeList = A2($elm$core$List$cons, leaf, nodeList),
					$temp$tail = tail;
				fn = $temp$fn;
				fromIndex = $temp$fromIndex;
				len = $temp$len;
				nodeList = $temp$nodeList;
				tail = $temp$tail;
				continue initializeHelp;
			}
		}
	});
var $elm$core$Basics$remainderBy = _Basics_remainderBy;
var $elm$core$Array$initialize = F2(
	function (len, fn) {
		if (len <= 0) {
			return $elm$core$Array$empty;
		} else {
			var tailLen = len % $elm$core$Array$branchFactor;
			var tail = A3($elm$core$Elm$JsArray$initialize, tailLen, len - tailLen, fn);
			var initialFromIndex = (len - tailLen) - $elm$core$Array$branchFactor;
			return A5($elm$core$Array$initializeHelp, fn, initialFromIndex, len, _List_Nil, tail);
		}
	});
var $elm$core$Basics$True = {$: 'True'};
var $elm$core$Result$isOk = function (result) {
	if (result.$ === 'Ok') {
		return true;
	} else {
		return false;
	}
};
var $elm$json$Json$Decode$map = _Json_map1;
var $elm$json$Json$Decode$map2 = _Json_map2;
var $elm$json$Json$Decode$succeed = _Json_succeed;
var $elm$virtual_dom$VirtualDom$toHandlerInt = function (handler) {
	switch (handler.$) {
		case 'Normal':
			return 0;
		case 'MayStopPropagation':
			return 1;
		case 'MayPreventDefault':
			return 2;
		default:
			return 3;
	}
};
var $elm$browser$Browser$External = function (a) {
	return {$: 'External', a: a};
};
var $elm$browser$Browser$Internal = function (a) {
	return {$: 'Internal', a: a};
};
var $elm$core$Basics$identity = function (x) {
	return x;
};
var $elm$browser$Browser$Dom$NotFound = function (a) {
	return {$: 'NotFound', a: a};
};
var $elm$url$Url$Http = {$: 'Http'};
var $elm$url$Url$Https = {$: 'Https'};
var $elm$url$Url$Url = F6(
	function (protocol, host, port_, path, query, fragment) {
		return {fragment: fragment, host: host, path: path, port_: port_, protocol: protocol, query: query};
	});
var $elm$core$String$contains = _String_contains;
var $elm$core$String$length = _String_length;
var $elm$core$String$slice = _String_slice;
var $elm$core$String$dropLeft = F2(
	function (n, string) {
		return (n < 1) ? string : A3(
			$elm$core$String$slice,
			n,
			$elm$core$String$length(string),
			string);
	});
var $elm$core$String$indexes = _String_indexes;
var $elm$core$String$isEmpty = function (string) {
	return string === '';
};
var $elm$core$String$left = F2(
	function (n, string) {
		return (n < 1) ? '' : A3($elm$core$String$slice, 0, n, string);
	});
var $elm$core$String$toInt = _String_toInt;
var $elm$url$Url$chompBeforePath = F5(
	function (protocol, path, params, frag, str) {
		if ($elm$core$String$isEmpty(str) || A2($elm$core$String$contains, '@', str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, ':', str);
			if (!_v0.b) {
				return $elm$core$Maybe$Just(
					A6($elm$url$Url$Url, protocol, str, $elm$core$Maybe$Nothing, path, params, frag));
			} else {
				if (!_v0.b.b) {
					var i = _v0.a;
					var _v1 = $elm$core$String$toInt(
						A2($elm$core$String$dropLeft, i + 1, str));
					if (_v1.$ === 'Nothing') {
						return $elm$core$Maybe$Nothing;
					} else {
						var port_ = _v1;
						return $elm$core$Maybe$Just(
							A6(
								$elm$url$Url$Url,
								protocol,
								A2($elm$core$String$left, i, str),
								port_,
								path,
								params,
								frag));
					}
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}
		}
	});
var $elm$url$Url$chompBeforeQuery = F4(
	function (protocol, params, frag, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '/', str);
			if (!_v0.b) {
				return A5($elm$url$Url$chompBeforePath, protocol, '/', params, frag, str);
			} else {
				var i = _v0.a;
				return A5(
					$elm$url$Url$chompBeforePath,
					protocol,
					A2($elm$core$String$dropLeft, i, str),
					params,
					frag,
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$url$Url$chompBeforeFragment = F3(
	function (protocol, frag, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '?', str);
			if (!_v0.b) {
				return A4($elm$url$Url$chompBeforeQuery, protocol, $elm$core$Maybe$Nothing, frag, str);
			} else {
				var i = _v0.a;
				return A4(
					$elm$url$Url$chompBeforeQuery,
					protocol,
					$elm$core$Maybe$Just(
						A2($elm$core$String$dropLeft, i + 1, str)),
					frag,
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$url$Url$chompAfterProtocol = F2(
	function (protocol, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '#', str);
			if (!_v0.b) {
				return A3($elm$url$Url$chompBeforeFragment, protocol, $elm$core$Maybe$Nothing, str);
			} else {
				var i = _v0.a;
				return A3(
					$elm$url$Url$chompBeforeFragment,
					protocol,
					$elm$core$Maybe$Just(
						A2($elm$core$String$dropLeft, i + 1, str)),
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$core$String$startsWith = _String_startsWith;
var $elm$url$Url$fromString = function (str) {
	return A2($elm$core$String$startsWith, 'http://', str) ? A2(
		$elm$url$Url$chompAfterProtocol,
		$elm$url$Url$Http,
		A2($elm$core$String$dropLeft, 7, str)) : (A2($elm$core$String$startsWith, 'https://', str) ? A2(
		$elm$url$Url$chompAfterProtocol,
		$elm$url$Url$Https,
		A2($elm$core$String$dropLeft, 8, str)) : $elm$core$Maybe$Nothing);
};
var $elm$core$Basics$never = function (_v0) {
	never:
	while (true) {
		var nvr = _v0.a;
		var $temp$_v0 = nvr;
		_v0 = $temp$_v0;
		continue never;
	}
};
var $elm$core$Task$Perform = function (a) {
	return {$: 'Perform', a: a};
};
var $elm$core$Task$succeed = _Scheduler_succeed;
var $elm$core$Task$init = $elm$core$Task$succeed(_Utils_Tuple0);
var $elm$core$List$foldrHelper = F4(
	function (fn, acc, ctr, ls) {
		if (!ls.b) {
			return acc;
		} else {
			var a = ls.a;
			var r1 = ls.b;
			if (!r1.b) {
				return A2(fn, a, acc);
			} else {
				var b = r1.a;
				var r2 = r1.b;
				if (!r2.b) {
					return A2(
						fn,
						a,
						A2(fn, b, acc));
				} else {
					var c = r2.a;
					var r3 = r2.b;
					if (!r3.b) {
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(fn, c, acc)));
					} else {
						var d = r3.a;
						var r4 = r3.b;
						var res = (ctr > 500) ? A3(
							$elm$core$List$foldl,
							fn,
							acc,
							$elm$core$List$reverse(r4)) : A4($elm$core$List$foldrHelper, fn, acc, ctr + 1, r4);
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(
									fn,
									c,
									A2(fn, d, res))));
					}
				}
			}
		}
	});
var $elm$core$List$foldr = F3(
	function (fn, acc, ls) {
		return A4($elm$core$List$foldrHelper, fn, acc, 0, ls);
	});
var $elm$core$List$map = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, acc) {
					return A2(
						$elm$core$List$cons,
						f(x),
						acc);
				}),
			_List_Nil,
			xs);
	});
var $elm$core$Task$andThen = _Scheduler_andThen;
var $elm$core$Task$map = F2(
	function (func, taskA) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return $elm$core$Task$succeed(
					func(a));
			},
			taskA);
	});
var $elm$core$Task$map2 = F3(
	function (func, taskA, taskB) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return A2(
					$elm$core$Task$andThen,
					function (b) {
						return $elm$core$Task$succeed(
							A2(func, a, b));
					},
					taskB);
			},
			taskA);
	});
var $elm$core$Task$sequence = function (tasks) {
	return A3(
		$elm$core$List$foldr,
		$elm$core$Task$map2($elm$core$List$cons),
		$elm$core$Task$succeed(_List_Nil),
		tasks);
};
var $elm$core$Platform$sendToApp = _Platform_sendToApp;
var $elm$core$Task$spawnCmd = F2(
	function (router, _v0) {
		var task = _v0.a;
		return _Scheduler_spawn(
			A2(
				$elm$core$Task$andThen,
				$elm$core$Platform$sendToApp(router),
				task));
	});
var $elm$core$Task$onEffects = F3(
	function (router, commands, state) {
		return A2(
			$elm$core$Task$map,
			function (_v0) {
				return _Utils_Tuple0;
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$map,
					$elm$core$Task$spawnCmd(router),
					commands)));
	});
var $elm$core$Task$onSelfMsg = F3(
	function (_v0, _v1, _v2) {
		return $elm$core$Task$succeed(_Utils_Tuple0);
	});
var $elm$core$Task$cmdMap = F2(
	function (tagger, _v0) {
		var task = _v0.a;
		return $elm$core$Task$Perform(
			A2($elm$core$Task$map, tagger, task));
	});
_Platform_effectManagers['Task'] = _Platform_createManager($elm$core$Task$init, $elm$core$Task$onEffects, $elm$core$Task$onSelfMsg, $elm$core$Task$cmdMap);
var $elm$core$Task$command = _Platform_leaf('Task');
var $elm$core$Task$perform = F2(
	function (toMessage, task) {
		return $elm$core$Task$command(
			$elm$core$Task$Perform(
				A2($elm$core$Task$map, toMessage, task)));
	});
var $elm$browser$Browser$application = _Browser_application;
var $author$project$Main$HeaderMsg = function (a) {
	return {$: 'HeaderMsg', a: a};
};
var $author$project$Main$PageMsg = function (a) {
	return {$: 'PageMsg', a: a};
};
var $elm$core$Platform$Cmd$batch = _Platform_batch;
var $author$project$Model$Session$defaultSession = function (navkey) {
	return {navkey: navkey, token: $elm$core$Maybe$Nothing};
};
var $krisajenkins$remotedata$RemoteData$Loading = {$: 'Loading'};
var $author$project$Api$Divisions = {$: 'Divisions'};
var $author$project$Header$DivisionsRecieved = function (a) {
	return {$: 'DivisionsRecieved', a: a};
};
var $elm$core$Basics$composeR = F3(
	function (f, g, x) {
		return g(
			f(x));
	});
var $author$project$Model$Division$Division = F4(
	function (id, name, season, closed) {
		return {closed: closed, id: id, name: name, season: season};
	});
var $elm$json$Json$Decode$bool = _Json_decodeBool;
var $author$project$Model$Division$DivisionId = function (a) {
	return {$: 'DivisionId', a: a};
};
var $elm$json$Json$Decode$int = _Json_decodeInt;
var $author$project$Model$Division$divisionIdDecoder = A2($elm$json$Json$Decode$map, $author$project$Model$Division$DivisionId, $elm$json$Json$Decode$int);
var $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$custom = $elm$json$Json$Decode$map2($elm$core$Basics$apR);
var $elm$json$Json$Decode$field = _Json_decodeField;
var $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required = F3(
	function (key, valDecoder, decoder) {
		return A2(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$custom,
			A2($elm$json$Json$Decode$field, key, valDecoder),
			decoder);
	});
var $elm$json$Json$Decode$string = _Json_decodeString;
var $author$project$Model$Division$divisionDecoder = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'closed',
	$elm$json$Json$Decode$bool,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'season',
		$elm$json$Json$Decode$int,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'name',
			$elm$json$Json$Decode$string,
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'id',
				$author$project$Model$Division$divisionIdDecoder,
				$elm$json$Json$Decode$succeed($author$project$Model$Division$Division)))));
var $elm$json$Json$Decode$list = _Json_decodeList;
var $author$project$Model$Division$divisionsDecoder = $elm$json$Json$Decode$list($author$project$Model$Division$divisionDecoder);
var $elm$json$Json$Decode$decodeString = _Json_runOnString;
var $elm$http$Http$BadStatus_ = F2(
	function (a, b) {
		return {$: 'BadStatus_', a: a, b: b};
	});
var $elm$http$Http$BadUrl_ = function (a) {
	return {$: 'BadUrl_', a: a};
};
var $elm$http$Http$GoodStatus_ = F2(
	function (a, b) {
		return {$: 'GoodStatus_', a: a, b: b};
	});
var $elm$http$Http$NetworkError_ = {$: 'NetworkError_'};
var $elm$http$Http$Receiving = function (a) {
	return {$: 'Receiving', a: a};
};
var $elm$http$Http$Sending = function (a) {
	return {$: 'Sending', a: a};
};
var $elm$http$Http$Timeout_ = {$: 'Timeout_'};
var $elm$core$Dict$RBEmpty_elm_builtin = {$: 'RBEmpty_elm_builtin'};
var $elm$core$Dict$empty = $elm$core$Dict$RBEmpty_elm_builtin;
var $elm$core$Maybe$isJust = function (maybe) {
	if (maybe.$ === 'Just') {
		return true;
	} else {
		return false;
	}
};
var $elm$core$Platform$sendToSelf = _Platform_sendToSelf;
var $elm$core$Basics$compare = _Utils_compare;
var $elm$core$Dict$get = F2(
	function (targetKey, dict) {
		get:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return $elm$core$Maybe$Nothing;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var _v1 = A2($elm$core$Basics$compare, targetKey, key);
				switch (_v1.$) {
					case 'LT':
						var $temp$targetKey = targetKey,
							$temp$dict = left;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
					case 'EQ':
						return $elm$core$Maybe$Just(value);
					default:
						var $temp$targetKey = targetKey,
							$temp$dict = right;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
				}
			}
		}
	});
var $elm$core$Dict$Black = {$: 'Black'};
var $elm$core$Dict$RBNode_elm_builtin = F5(
	function (a, b, c, d, e) {
		return {$: 'RBNode_elm_builtin', a: a, b: b, c: c, d: d, e: e};
	});
var $elm$core$Dict$Red = {$: 'Red'};
var $elm$core$Dict$balance = F5(
	function (color, key, value, left, right) {
		if ((right.$ === 'RBNode_elm_builtin') && (right.a.$ === 'Red')) {
			var _v1 = right.a;
			var rK = right.b;
			var rV = right.c;
			var rLeft = right.d;
			var rRight = right.e;
			if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) {
				var _v3 = left.a;
				var lK = left.b;
				var lV = left.c;
				var lLeft = left.d;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Red,
					key,
					value,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					rK,
					rV,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, left, rLeft),
					rRight);
			}
		} else {
			if ((((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) && (left.d.$ === 'RBNode_elm_builtin')) && (left.d.a.$ === 'Red')) {
				var _v5 = left.a;
				var lK = left.b;
				var lV = left.c;
				var _v6 = left.d;
				var _v7 = _v6.a;
				var llK = _v6.b;
				var llV = _v6.c;
				var llLeft = _v6.d;
				var llRight = _v6.e;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Red,
					lK,
					lV,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, llK, llV, llLeft, llRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, key, value, lRight, right));
			} else {
				return A5($elm$core$Dict$RBNode_elm_builtin, color, key, value, left, right);
			}
		}
	});
var $elm$core$Dict$insertHelp = F3(
	function (key, value, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, $elm$core$Dict$RBEmpty_elm_builtin, $elm$core$Dict$RBEmpty_elm_builtin);
		} else {
			var nColor = dict.a;
			var nKey = dict.b;
			var nValue = dict.c;
			var nLeft = dict.d;
			var nRight = dict.e;
			var _v1 = A2($elm$core$Basics$compare, key, nKey);
			switch (_v1.$) {
				case 'LT':
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						A3($elm$core$Dict$insertHelp, key, value, nLeft),
						nRight);
				case 'EQ':
					return A5($elm$core$Dict$RBNode_elm_builtin, nColor, nKey, value, nLeft, nRight);
				default:
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						nLeft,
						A3($elm$core$Dict$insertHelp, key, value, nRight));
			}
		}
	});
var $elm$core$Dict$insert = F3(
	function (key, value, dict) {
		var _v0 = A3($elm$core$Dict$insertHelp, key, value, dict);
		if ((_v0.$ === 'RBNode_elm_builtin') && (_v0.a.$ === 'Red')) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$core$Dict$getMin = function (dict) {
	getMin:
	while (true) {
		if ((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) {
			var left = dict.d;
			var $temp$dict = left;
			dict = $temp$dict;
			continue getMin;
		} else {
			return dict;
		}
	}
};
var $elm$core$Dict$moveRedLeft = function (dict) {
	if (((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) && (dict.e.$ === 'RBNode_elm_builtin')) {
		if ((dict.e.d.$ === 'RBNode_elm_builtin') && (dict.e.d.a.$ === 'Red')) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var lLeft = _v1.d;
			var lRight = _v1.e;
			var _v2 = dict.e;
			var rClr = _v2.a;
			var rK = _v2.b;
			var rV = _v2.c;
			var rLeft = _v2.d;
			var _v3 = rLeft.a;
			var rlK = rLeft.b;
			var rlV = rLeft.c;
			var rlL = rLeft.d;
			var rlR = rLeft.e;
			var rRight = _v2.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				$elm$core$Dict$Red,
				rlK,
				rlV,
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					rlL),
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, rK, rV, rlR, rRight));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v4 = dict.d;
			var lClr = _v4.a;
			var lK = _v4.b;
			var lV = _v4.c;
			var lLeft = _v4.d;
			var lRight = _v4.e;
			var _v5 = dict.e;
			var rClr = _v5.a;
			var rK = _v5.b;
			var rV = _v5.c;
			var rLeft = _v5.d;
			var rRight = _v5.e;
			if (clr.$ === 'Black') {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$moveRedRight = function (dict) {
	if (((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) && (dict.e.$ === 'RBNode_elm_builtin')) {
		if ((dict.d.d.$ === 'RBNode_elm_builtin') && (dict.d.d.a.$ === 'Red')) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var _v2 = _v1.d;
			var _v3 = _v2.a;
			var llK = _v2.b;
			var llV = _v2.c;
			var llLeft = _v2.d;
			var llRight = _v2.e;
			var lRight = _v1.e;
			var _v4 = dict.e;
			var rClr = _v4.a;
			var rK = _v4.b;
			var rV = _v4.c;
			var rLeft = _v4.d;
			var rRight = _v4.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				$elm$core$Dict$Red,
				lK,
				lV,
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, llK, llV, llLeft, llRight),
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					lRight,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight)));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v5 = dict.d;
			var lClr = _v5.a;
			var lK = _v5.b;
			var lV = _v5.c;
			var lLeft = _v5.d;
			var lRight = _v5.e;
			var _v6 = dict.e;
			var rClr = _v6.a;
			var rK = _v6.b;
			var rV = _v6.c;
			var rLeft = _v6.d;
			var rRight = _v6.e;
			if (clr.$ === 'Black') {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$removeHelpPrepEQGT = F7(
	function (targetKey, dict, color, key, value, left, right) {
		if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) {
			var _v1 = left.a;
			var lK = left.b;
			var lV = left.c;
			var lLeft = left.d;
			var lRight = left.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				lK,
				lV,
				lLeft,
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, lRight, right));
		} else {
			_v2$2:
			while (true) {
				if ((right.$ === 'RBNode_elm_builtin') && (right.a.$ === 'Black')) {
					if (right.d.$ === 'RBNode_elm_builtin') {
						if (right.d.a.$ === 'Black') {
							var _v3 = right.a;
							var _v4 = right.d;
							var _v5 = _v4.a;
							return $elm$core$Dict$moveRedRight(dict);
						} else {
							break _v2$2;
						}
					} else {
						var _v6 = right.a;
						var _v7 = right.d;
						return $elm$core$Dict$moveRedRight(dict);
					}
				} else {
					break _v2$2;
				}
			}
			return dict;
		}
	});
var $elm$core$Dict$removeMin = function (dict) {
	if ((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) {
		var color = dict.a;
		var key = dict.b;
		var value = dict.c;
		var left = dict.d;
		var lColor = left.a;
		var lLeft = left.d;
		var right = dict.e;
		if (lColor.$ === 'Black') {
			if ((lLeft.$ === 'RBNode_elm_builtin') && (lLeft.a.$ === 'Red')) {
				var _v3 = lLeft.a;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					key,
					value,
					$elm$core$Dict$removeMin(left),
					right);
			} else {
				var _v4 = $elm$core$Dict$moveRedLeft(dict);
				if (_v4.$ === 'RBNode_elm_builtin') {
					var nColor = _v4.a;
					var nKey = _v4.b;
					var nValue = _v4.c;
					var nLeft = _v4.d;
					var nRight = _v4.e;
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						$elm$core$Dict$removeMin(nLeft),
						nRight);
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			}
		} else {
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				value,
				$elm$core$Dict$removeMin(left),
				right);
		}
	} else {
		return $elm$core$Dict$RBEmpty_elm_builtin;
	}
};
var $elm$core$Dict$removeHelp = F2(
	function (targetKey, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_cmp(targetKey, key) < 0) {
				if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Black')) {
					var _v4 = left.a;
					var lLeft = left.d;
					if ((lLeft.$ === 'RBNode_elm_builtin') && (lLeft.a.$ === 'Red')) {
						var _v6 = lLeft.a;
						return A5(
							$elm$core$Dict$RBNode_elm_builtin,
							color,
							key,
							value,
							A2($elm$core$Dict$removeHelp, targetKey, left),
							right);
					} else {
						var _v7 = $elm$core$Dict$moveRedLeft(dict);
						if (_v7.$ === 'RBNode_elm_builtin') {
							var nColor = _v7.a;
							var nKey = _v7.b;
							var nValue = _v7.c;
							var nLeft = _v7.d;
							var nRight = _v7.e;
							return A5(
								$elm$core$Dict$balance,
								nColor,
								nKey,
								nValue,
								A2($elm$core$Dict$removeHelp, targetKey, nLeft),
								nRight);
						} else {
							return $elm$core$Dict$RBEmpty_elm_builtin;
						}
					}
				} else {
					return A5(
						$elm$core$Dict$RBNode_elm_builtin,
						color,
						key,
						value,
						A2($elm$core$Dict$removeHelp, targetKey, left),
						right);
				}
			} else {
				return A2(
					$elm$core$Dict$removeHelpEQGT,
					targetKey,
					A7($elm$core$Dict$removeHelpPrepEQGT, targetKey, dict, color, key, value, left, right));
			}
		}
	});
var $elm$core$Dict$removeHelpEQGT = F2(
	function (targetKey, dict) {
		if (dict.$ === 'RBNode_elm_builtin') {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_eq(targetKey, key)) {
				var _v1 = $elm$core$Dict$getMin(right);
				if (_v1.$ === 'RBNode_elm_builtin') {
					var minKey = _v1.b;
					var minValue = _v1.c;
					return A5(
						$elm$core$Dict$balance,
						color,
						minKey,
						minValue,
						left,
						$elm$core$Dict$removeMin(right));
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			} else {
				return A5(
					$elm$core$Dict$balance,
					color,
					key,
					value,
					left,
					A2($elm$core$Dict$removeHelp, targetKey, right));
			}
		} else {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		}
	});
var $elm$core$Dict$remove = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$removeHelp, key, dict);
		if ((_v0.$ === 'RBNode_elm_builtin') && (_v0.a.$ === 'Red')) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$core$Dict$update = F3(
	function (targetKey, alter, dictionary) {
		var _v0 = alter(
			A2($elm$core$Dict$get, targetKey, dictionary));
		if (_v0.$ === 'Just') {
			var value = _v0.a;
			return A3($elm$core$Dict$insert, targetKey, value, dictionary);
		} else {
			return A2($elm$core$Dict$remove, targetKey, dictionary);
		}
	});
var $elm$http$Http$expectStringResponse = F2(
	function (toMsg, toResult) {
		return A3(
			_Http_expect,
			'',
			$elm$core$Basics$identity,
			A2($elm$core$Basics$composeR, toResult, toMsg));
	});
var $elm$core$Result$mapError = F2(
	function (f, result) {
		if (result.$ === 'Ok') {
			var v = result.a;
			return $elm$core$Result$Ok(v);
		} else {
			var e = result.a;
			return $elm$core$Result$Err(
				f(e));
		}
	});
var $elm$http$Http$BadBody = function (a) {
	return {$: 'BadBody', a: a};
};
var $elm$http$Http$BadStatus = function (a) {
	return {$: 'BadStatus', a: a};
};
var $elm$http$Http$BadUrl = function (a) {
	return {$: 'BadUrl', a: a};
};
var $elm$http$Http$NetworkError = {$: 'NetworkError'};
var $elm$http$Http$Timeout = {$: 'Timeout'};
var $elm$http$Http$resolve = F2(
	function (toResult, response) {
		switch (response.$) {
			case 'BadUrl_':
				var url = response.a;
				return $elm$core$Result$Err(
					$elm$http$Http$BadUrl(url));
			case 'Timeout_':
				return $elm$core$Result$Err($elm$http$Http$Timeout);
			case 'NetworkError_':
				return $elm$core$Result$Err($elm$http$Http$NetworkError);
			case 'BadStatus_':
				var metadata = response.a;
				return $elm$core$Result$Err(
					$elm$http$Http$BadStatus(metadata.statusCode));
			default:
				var body = response.b;
				return A2(
					$elm$core$Result$mapError,
					$elm$http$Http$BadBody,
					toResult(body));
		}
	});
var $elm$http$Http$expectJson = F2(
	function (toMsg, decoder) {
		return A2(
			$elm$http$Http$expectStringResponse,
			toMsg,
			$elm$http$Http$resolve(
				function (string) {
					return A2(
						$elm$core$Result$mapError,
						$elm$json$Json$Decode$errorToString,
						A2($elm$json$Json$Decode$decodeString, decoder, string));
				}));
	});
var $krisajenkins$remotedata$RemoteData$Failure = function (a) {
	return {$: 'Failure', a: a};
};
var $krisajenkins$remotedata$RemoteData$Success = function (a) {
	return {$: 'Success', a: a};
};
var $krisajenkins$remotedata$RemoteData$fromResult = function (result) {
	if (result.$ === 'Err') {
		var e = result.a;
		return $krisajenkins$remotedata$RemoteData$Failure(e);
	} else {
		var x = result.a;
		return $krisajenkins$remotedata$RemoteData$Success(x);
	}
};
var $elm$http$Http$emptyBody = _Http_emptyBody;
var $elm$http$Http$Header = F2(
	function (a, b) {
		return {$: 'Header', a: a, b: b};
	});
var $elm$http$Http$header = $elm$http$Http$Header;
var $elm$http$Http$Request = function (a) {
	return {$: 'Request', a: a};
};
var $elm$http$Http$State = F2(
	function (reqs, subs) {
		return {reqs: reqs, subs: subs};
	});
var $elm$http$Http$init = $elm$core$Task$succeed(
	A2($elm$http$Http$State, $elm$core$Dict$empty, _List_Nil));
var $elm$core$Process$kill = _Scheduler_kill;
var $elm$core$Process$spawn = _Scheduler_spawn;
var $elm$http$Http$updateReqs = F3(
	function (router, cmds, reqs) {
		updateReqs:
		while (true) {
			if (!cmds.b) {
				return $elm$core$Task$succeed(reqs);
			} else {
				var cmd = cmds.a;
				var otherCmds = cmds.b;
				if (cmd.$ === 'Cancel') {
					var tracker = cmd.a;
					var _v2 = A2($elm$core$Dict$get, tracker, reqs);
					if (_v2.$ === 'Nothing') {
						var $temp$router = router,
							$temp$cmds = otherCmds,
							$temp$reqs = reqs;
						router = $temp$router;
						cmds = $temp$cmds;
						reqs = $temp$reqs;
						continue updateReqs;
					} else {
						var pid = _v2.a;
						return A2(
							$elm$core$Task$andThen,
							function (_v3) {
								return A3(
									$elm$http$Http$updateReqs,
									router,
									otherCmds,
									A2($elm$core$Dict$remove, tracker, reqs));
							},
							$elm$core$Process$kill(pid));
					}
				} else {
					var req = cmd.a;
					return A2(
						$elm$core$Task$andThen,
						function (pid) {
							var _v4 = req.tracker;
							if (_v4.$ === 'Nothing') {
								return A3($elm$http$Http$updateReqs, router, otherCmds, reqs);
							} else {
								var tracker = _v4.a;
								return A3(
									$elm$http$Http$updateReqs,
									router,
									otherCmds,
									A3($elm$core$Dict$insert, tracker, pid, reqs));
							}
						},
						$elm$core$Process$spawn(
							A3(
								_Http_toTask,
								router,
								$elm$core$Platform$sendToApp(router),
								req)));
				}
			}
		}
	});
var $elm$http$Http$onEffects = F4(
	function (router, cmds, subs, state) {
		return A2(
			$elm$core$Task$andThen,
			function (reqs) {
				return $elm$core$Task$succeed(
					A2($elm$http$Http$State, reqs, subs));
			},
			A3($elm$http$Http$updateReqs, router, cmds, state.reqs));
	});
var $elm$core$List$maybeCons = F3(
	function (f, mx, xs) {
		var _v0 = f(mx);
		if (_v0.$ === 'Just') {
			var x = _v0.a;
			return A2($elm$core$List$cons, x, xs);
		} else {
			return xs;
		}
	});
var $elm$core$List$filterMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			$elm$core$List$maybeCons(f),
			_List_Nil,
			xs);
	});
var $elm$http$Http$maybeSend = F4(
	function (router, desiredTracker, progress, _v0) {
		var actualTracker = _v0.a;
		var toMsg = _v0.b;
		return _Utils_eq(desiredTracker, actualTracker) ? $elm$core$Maybe$Just(
			A2(
				$elm$core$Platform$sendToApp,
				router,
				toMsg(progress))) : $elm$core$Maybe$Nothing;
	});
var $elm$http$Http$onSelfMsg = F3(
	function (router, _v0, state) {
		var tracker = _v0.a;
		var progress = _v0.b;
		return A2(
			$elm$core$Task$andThen,
			function (_v1) {
				return $elm$core$Task$succeed(state);
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$filterMap,
					A3($elm$http$Http$maybeSend, router, tracker, progress),
					state.subs)));
	});
var $elm$http$Http$Cancel = function (a) {
	return {$: 'Cancel', a: a};
};
var $elm$http$Http$cmdMap = F2(
	function (func, cmd) {
		if (cmd.$ === 'Cancel') {
			var tracker = cmd.a;
			return $elm$http$Http$Cancel(tracker);
		} else {
			var r = cmd.a;
			return $elm$http$Http$Request(
				{
					allowCookiesFromOtherDomains: r.allowCookiesFromOtherDomains,
					body: r.body,
					expect: A2(_Http_mapExpect, func, r.expect),
					headers: r.headers,
					method: r.method,
					timeout: r.timeout,
					tracker: r.tracker,
					url: r.url
				});
		}
	});
var $elm$http$Http$MySub = F2(
	function (a, b) {
		return {$: 'MySub', a: a, b: b};
	});
var $elm$http$Http$subMap = F2(
	function (func, _v0) {
		var tracker = _v0.a;
		var toMsg = _v0.b;
		return A2(
			$elm$http$Http$MySub,
			tracker,
			A2($elm$core$Basics$composeR, toMsg, func));
	});
_Platform_effectManagers['Http'] = _Platform_createManager($elm$http$Http$init, $elm$http$Http$onEffects, $elm$http$Http$onSelfMsg, $elm$http$Http$cmdMap, $elm$http$Http$subMap);
var $elm$http$Http$command = _Platform_leaf('Http');
var $elm$http$Http$subscription = _Platform_leaf('Http');
var $elm$http$Http$request = function (r) {
	return $elm$http$Http$command(
		$elm$http$Http$Request(
			{allowCookiesFromOtherDomains: false, body: r.body, expect: r.expect, headers: r.headers, method: r.method, timeout: r.timeout, tracker: r.tracker, url: r.url}));
};
var $author$project$Env$baseApiUrl = 'https://localhost:17317/api/';
var $author$project$Api$baseUrl = $author$project$Env$baseApiUrl;
var $author$project$Model$Coach$idToString = function (_v0) {
	var id = _v0.a;
	return $elm$core$String$fromInt(id);
};
var $author$project$Model$Division$idToString = function (_v0) {
	var id = _v0.a;
	return $elm$core$String$fromInt(id);
};
var $author$project$Model$Game$idToString = function (_v0) {
	var id = _v0.a;
	return $elm$core$String$fromInt(id);
};
var $author$project$Model$Race$idToString = function (_v0) {
	var id = _v0.a;
	return $elm$core$String$fromInt(id);
};
var $author$project$Model$Team$idToString = function (_v0) {
	var id = _v0.a;
	return $elm$core$String$fromInt(id);
};
var $author$project$Api$stringOf = function (endpoint) {
	switch (endpoint.$) {
		case 'Teams':
			return 'team';
		case 'Team':
			var index = endpoint.a;
			return 'team/' + $author$project$Model$Team$idToString(index);
		case 'Coaches':
			return 'coach';
		case 'Coach':
			var index = endpoint.a;
			return 'coach/' + $author$project$Model$Coach$idToString(index);
		case 'Races':
			return 'race';
		case 'Race':
			var index = endpoint.a;
			return 'race/' + $author$project$Model$Race$idToString(index);
		case 'Divisions':
			return 'div';
		case 'Division':
			var index = endpoint.a;
			return 'div/' + $author$project$Model$Division$idToString(index);
		case 'Games':
			return 'game/';
		case 'Game':
			var index = endpoint.a;
			return 'game/' + $author$project$Model$Game$idToString(index);
		case 'Signin':
			return 'signin';
		case 'GamesInDiv':
			var index = endpoint.a;
			return 'game/bydiv/' + $author$project$Model$Division$idToString(index);
		case 'TeamsInDiv':
			var index = endpoint.a;
			return 'team/bydiv/' + $author$project$Model$Division$idToString(index);
		case 'TeamsNotInDiv':
			var index = endpoint.a;
			return 'team/notindiv/' + $author$project$Model$Division$idToString(index);
		default:
			var teamId = endpoint.a;
			var divId = endpoint.b;
			return 'team/updatediv/' + ($author$project$Model$Team$idToString(teamId) + ('/' + $author$project$Model$Division$idToString(divId)));
	}
};
var $author$project$Api$urlOf = function (endpoint) {
	return _Utils_ap(
		$author$project$Api$baseUrl,
		$author$project$Api$stringOf(endpoint));
};
var $elm$core$Maybe$withDefault = F2(
	function (_default, maybe) {
		if (maybe.$ === 'Just') {
			var value = maybe.a;
			return value;
		} else {
			return _default;
		}
	});
var $author$project$Api$getRequest = F3(
	function (token, endpoint, expect) {
		return $elm$http$Http$request(
			{
				body: $elm$http$Http$emptyBody,
				expect: expect,
				headers: _List_fromArray(
					[
						A2(
						$elm$http$Http$header,
						'Authorization',
						'Bearer ' + A2($elm$core$Maybe$withDefault, '', token))
					]),
				method: 'GET',
				timeout: $elm$core$Maybe$Nothing,
				tracker: $elm$core$Maybe$Nothing,
				url: $author$project$Api$urlOf(endpoint)
			});
	});
var $author$project$Header$getDivisionsRequest = function (token) {
	return A3(
		$author$project$Api$getRequest,
		token,
		$author$project$Api$Divisions,
		A2(
			$elm$http$Http$expectJson,
			A2($elm$core$Basics$composeR, $krisajenkins$remotedata$RemoteData$fromResult, $author$project$Header$DivisionsRecieved),
			$author$project$Model$Division$divisionsDecoder));
};
var $author$project$Header$init = function (session) {
	return _Utils_Tuple2(
		{divisions: $krisajenkins$remotedata$RemoteData$Loading, session: session},
		$author$project$Header$getDivisionsRequest(session.token));
};
var $author$project$Page$AddCoachPage = function (a) {
	return {$: 'AddCoachPage', a: a};
};
var $author$project$Page$AddCoachPageMsg = function (a) {
	return {$: 'AddCoachPageMsg', a: a};
};
var $author$project$Page$AddDivisionPage = function (a) {
	return {$: 'AddDivisionPage', a: a};
};
var $author$project$Page$AddDivisionPageMsg = function (a) {
	return {$: 'AddDivisionPageMsg', a: a};
};
var $author$project$Page$AddGamePage = function (a) {
	return {$: 'AddGamePage', a: a};
};
var $author$project$Page$AddGamePageMsg = function (a) {
	return {$: 'AddGamePageMsg', a: a};
};
var $author$project$Page$AddGameWeekMsg = function (a) {
	return {$: 'AddGameWeekMsg', a: a};
};
var $author$project$Page$AddGameWeekPage = function (a) {
	return {$: 'AddGameWeekPage', a: a};
};
var $author$project$Page$AddTeamPage = function (a) {
	return {$: 'AddTeamPage', a: a};
};
var $author$project$Page$AddTeamPageMsg = function (a) {
	return {$: 'AddTeamPageMsg', a: a};
};
var $author$project$Page$AddTeamToDivPage = function (a) {
	return {$: 'AddTeamToDivPage', a: a};
};
var $author$project$Page$AddTeamToDivPageMsg = function (a) {
	return {$: 'AddTeamToDivPageMsg', a: a};
};
var $author$project$Page$CoachesPage = function (a) {
	return {$: 'CoachesPage', a: a};
};
var $author$project$Page$CoachesPageMsg = function (a) {
	return {$: 'CoachesPageMsg', a: a};
};
var $author$project$Page$DivisionsPage = function (a) {
	return {$: 'DivisionsPage', a: a};
};
var $author$project$Page$DivisionsPageMsg = function (a) {
	return {$: 'DivisionsPageMsg', a: a};
};
var $author$project$Page$EditCoachPage = function (a) {
	return {$: 'EditCoachPage', a: a};
};
var $author$project$Page$EditCoachPageMsg = function (a) {
	return {$: 'EditCoachPageMsg', a: a};
};
var $author$project$Page$EditDivisionPage = function (a) {
	return {$: 'EditDivisionPage', a: a};
};
var $author$project$Page$EditDivisionPageMsg = function (a) {
	return {$: 'EditDivisionPageMsg', a: a};
};
var $author$project$Page$EditGamePage = function (a) {
	return {$: 'EditGamePage', a: a};
};
var $author$project$Page$EditGamePageMsg = function (a) {
	return {$: 'EditGamePageMsg', a: a};
};
var $author$project$Page$EditTeamPage = function (a) {
	return {$: 'EditTeamPage', a: a};
};
var $author$project$Page$EditTeamPageMsg = function (a) {
	return {$: 'EditTeamPageMsg', a: a};
};
var $author$project$Page$NotFoundPage = {$: 'NotFoundPage'};
var $author$project$Page$SigninPage = function (a) {
	return {$: 'SigninPage', a: a};
};
var $author$project$Page$SigninPageMsg = function (a) {
	return {$: 'SigninPageMsg', a: a};
};
var $author$project$Page$TeamsPage = function (a) {
	return {$: 'TeamsPage', a: a};
};
var $author$project$Page$TeamsPageMsg = function (a) {
	return {$: 'TeamsPageMsg', a: a};
};
var $author$project$Page$ViewDivisionPage = function (a) {
	return {$: 'ViewDivisionPage', a: a};
};
var $author$project$Page$ViewDivisionPageMsg = function (a) {
	return {$: 'ViewDivisionPageMsg', a: a};
};
var $author$project$Model$Coach$CoachId = function (a) {
	return {$: 'CoachId', a: a};
};
var $author$project$Model$Coach$defaultCoach = {
	elo: 1000,
	id: $author$project$Model$Coach$CoachId(0),
	name: ''
};
var $elm$core$Platform$Cmd$none = $elm$core$Platform$Cmd$batch(_List_Nil);
var $author$project$Page$AddCoach$init = function (session) {
	return _Utils_Tuple2(
		{coach: $author$project$Model$Coach$defaultCoach, session: session, submitError: $elm$core$Maybe$Nothing},
		$elm$core$Platform$Cmd$none);
};
var $author$project$Model$Division$defaultDivision = {
	closed: false,
	id: $author$project$Model$Division$DivisionId(0),
	name: '',
	season: 0
};
var $author$project$Page$AddDivision$init = function (session) {
	return _Utils_Tuple2(
		{division: $author$project$Model$Division$defaultDivision, session: session, submitError: $elm$core$Maybe$Nothing},
		$elm$core$Platform$Cmd$none);
};
var $krisajenkins$remotedata$RemoteData$NotAsked = {$: 'NotAsked'};
var $elm$core$Maybe$andThen = F2(
	function (callback, maybeValue) {
		if (maybeValue.$ === 'Just') {
			var value = maybeValue.a;
			return callback(value);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Model$Game$GameId = function (a) {
	return {$: 'GameId', a: a};
};
var $author$project$Model$Team$TeamId = function (a) {
	return {$: 'TeamId', a: a};
};
var $author$project$Model$Race$RaceId = function (a) {
	return {$: 'RaceId', a: a};
};
var $author$project$Model$Race$defaultRace = {
	id: $author$project$Model$Race$RaceId(0),
	name: ''
};
var $author$project$Model$Team$defaultTeam = {
	coach: $author$project$Model$Coach$defaultCoach,
	elo: 1000,
	id: $author$project$Model$Team$TeamId(0),
	name: '',
	race: $author$project$Model$Race$defaultRace
};
var $author$project$Model$Game$defaultGame = {
	awayScore: $elm$core$Maybe$Nothing,
	awayTeam: $author$project$Model$Team$defaultTeam,
	division: $author$project$Model$Division$defaultDivision,
	homeScore: $elm$core$Maybe$Nothing,
	homeTeam: $author$project$Model$Team$defaultTeam,
	id: $author$project$Model$Game$GameId(0),
	week: 0
};
var $author$project$Page$AddGame$DivisionsRecieved = function (a) {
	return {$: 'DivisionsRecieved', a: a};
};
var $author$project$Page$AddGame$getDivisionsRequest = function (token) {
	return A3(
		$author$project$Api$getRequest,
		token,
		$author$project$Api$Divisions,
		A2(
			$elm$http$Http$expectJson,
			A2($elm$core$Basics$composeR, $krisajenkins$remotedata$RemoteData$fromResult, $author$project$Page$AddGame$DivisionsRecieved),
			$author$project$Model$Division$divisionsDecoder));
};
var $author$project$Page$AddGame$init = F3(
	function (session, divId, week) {
		return _Utils_Tuple2(
			{
				defaultDivId: A2(
					$elm$core$Maybe$withDefault,
					'',
					A2(
						$elm$core$Maybe$andThen,
						A2($elm$core$Basics$composeR, $author$project$Model$Division$idToString, $elm$core$Maybe$Just),
						divId)),
				divisionOptions: $krisajenkins$remotedata$RemoteData$Loading,
				game: _Utils_update(
					$author$project$Model$Game$defaultGame,
					{
						week: A2($elm$core$Maybe$withDefault, 0, week)
					}),
				saveError: $elm$core$Maybe$Nothing,
				session: session,
				teamOptions: $krisajenkins$remotedata$RemoteData$NotAsked
			},
			$author$project$Page$AddGame$getDivisionsRequest(session.token));
	});
var $author$project$Api$Division = function (a) {
	return {$: 'Division', a: a};
};
var $author$project$Page$AddGameWeek$DivisionRecieved = function (a) {
	return {$: 'DivisionRecieved', a: a};
};
var $author$project$Page$AddGameWeek$getDivisionRequest = F2(
	function (token, divId) {
		return A3(
			$author$project$Api$getRequest,
			token,
			$author$project$Api$Division(divId),
			A2(
				$elm$http$Http$expectJson,
				A2($elm$core$Basics$composeR, $krisajenkins$remotedata$RemoteData$fromResult, $author$project$Page$AddGameWeek$DivisionRecieved),
				$author$project$Model$Division$divisionDecoder));
	});
var $author$project$Api$TeamsInDiv = function (a) {
	return {$: 'TeamsInDiv', a: a};
};
var $author$project$Page$AddGameWeek$TeamsRecieved = function (a) {
	return {$: 'TeamsRecieved', a: a};
};
var $author$project$Model$Team$Team = F5(
	function (id, name, race, coach, elo) {
		return {coach: coach, elo: elo, id: id, name: name, race: race};
	});
var $author$project$Model$Coach$Coach = F3(
	function (id, name, elo) {
		return {elo: elo, id: id, name: name};
	});
var $author$project$Model$Coach$coachIdDecoder = A2($elm$json$Json$Decode$map, $author$project$Model$Coach$CoachId, $elm$json$Json$Decode$int);
var $author$project$Model$Coach$coachDecoder = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'elo',
	$elm$json$Json$Decode$int,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'name',
		$elm$json$Json$Decode$string,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'id',
			$author$project$Model$Coach$coachIdDecoder,
			$elm$json$Json$Decode$succeed($author$project$Model$Coach$Coach))));
var $author$project$Model$Race$Race = F2(
	function (id, name) {
		return {id: id, name: name};
	});
var $author$project$Model$Race$raceIdDecoder = A2($elm$json$Json$Decode$map, $author$project$Model$Race$RaceId, $elm$json$Json$Decode$int);
var $author$project$Model$Race$raceDecoder = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'name',
	$elm$json$Json$Decode$string,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'id',
		$author$project$Model$Race$raceIdDecoder,
		$elm$json$Json$Decode$succeed($author$project$Model$Race$Race)));
var $author$project$Model$Team$teamIdDecoder = A2($elm$json$Json$Decode$map, $author$project$Model$Team$TeamId, $elm$json$Json$Decode$int);
var $author$project$Model$Team$teamDecoder = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'elo',
	$elm$json$Json$Decode$int,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'coach',
		$author$project$Model$Coach$coachDecoder,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'race',
			$author$project$Model$Race$raceDecoder,
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'name',
				$elm$json$Json$Decode$string,
				A3(
					$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
					'id',
					$author$project$Model$Team$teamIdDecoder,
					$elm$json$Json$Decode$succeed($author$project$Model$Team$Team))))));
var $author$project$Model$Team$teamsDecoder = $elm$json$Json$Decode$list($author$project$Model$Team$teamDecoder);
var $author$project$Page$AddGameWeek$getTeamsRequest = F2(
	function (token, divId) {
		return A3(
			$author$project$Api$getRequest,
			token,
			$author$project$Api$TeamsInDiv(divId),
			A2(
				$elm$http$Http$expectJson,
				A2($elm$core$Basics$composeR, $krisajenkins$remotedata$RemoteData$fromResult, $author$project$Page$AddGameWeek$TeamsRecieved),
				$author$project$Model$Team$teamsDecoder));
	});
var $author$project$Page$AddGameWeek$init = F3(
	function (session, divId, week) {
		return _Utils_Tuple2(
			{divId: divId, division: $krisajenkins$remotedata$RemoteData$Loading, games: _List_Nil, session: session, submitErrors: _List_Nil, successes: 0, teams: $krisajenkins$remotedata$RemoteData$Loading, week: week},
			$elm$core$Platform$Cmd$batch(
				_List_fromArray(
					[
						A2($author$project$Page$AddGameWeek$getDivisionRequest, session.token, divId),
						A2($author$project$Page$AddGameWeek$getTeamsRequest, session.token, divId)
					])));
	});
var $author$project$Api$Coaches = {$: 'Coaches'};
var $author$project$Page$AddTeam$CoachesReceived = function (a) {
	return {$: 'CoachesReceived', a: a};
};
var $author$project$Model$Coach$coachsDecoder = $elm$json$Json$Decode$list($author$project$Model$Coach$coachDecoder);
var $author$project$Page$AddTeam$getCoachesRequest = function (token) {
	return A3(
		$author$project$Api$getRequest,
		token,
		$author$project$Api$Coaches,
		A2(
			$elm$http$Http$expectJson,
			A2($elm$core$Basics$composeR, $krisajenkins$remotedata$RemoteData$fromResult, $author$project$Page$AddTeam$CoachesReceived),
			$author$project$Model$Coach$coachsDecoder));
};
var $author$project$Api$Races = {$: 'Races'};
var $author$project$Page$AddTeam$RacesRecieved = function (a) {
	return {$: 'RacesRecieved', a: a};
};
var $author$project$Model$Race$racesDecoder = $elm$json$Json$Decode$list($author$project$Model$Race$raceDecoder);
var $author$project$Page$AddTeam$getRacesRequest = function (token) {
	return A3(
		$author$project$Api$getRequest,
		token,
		$author$project$Api$Races,
		A2(
			$elm$http$Http$expectJson,
			A2($elm$core$Basics$composeR, $krisajenkins$remotedata$RemoteData$fromResult, $author$project$Page$AddTeam$RacesRecieved),
			$author$project$Model$Race$racesDecoder));
};
var $author$project$Page$AddTeam$init = function (session) {
	return _Utils_Tuple2(
		{coachOptions: $krisajenkins$remotedata$RemoteData$Loading, raceOptions: $krisajenkins$remotedata$RemoteData$Loading, session: session, submitError: $elm$core$Maybe$Nothing, team: $author$project$Model$Team$defaultTeam},
		$elm$core$Platform$Cmd$batch(
			_List_fromArray(
				[
					$author$project$Page$AddTeam$getRacesRequest(session.token),
					$author$project$Page$AddTeam$getCoachesRequest(session.token)
				])));
};
var $author$project$Page$AddTeamToDiv$DivisionReceived = function (a) {
	return {$: 'DivisionReceived', a: a};
};
var $author$project$Page$AddTeamToDiv$getDivisionRequest = F2(
	function (token, divId) {
		return A3(
			$author$project$Api$getRequest,
			token,
			$author$project$Api$Division(divId),
			A2(
				$elm$http$Http$expectJson,
				A2($elm$core$Basics$composeR, $krisajenkins$remotedata$RemoteData$fromResult, $author$project$Page$AddTeamToDiv$DivisionReceived),
				$author$project$Model$Division$divisionDecoder));
	});
var $author$project$Api$TeamsNotInDiv = function (a) {
	return {$: 'TeamsNotInDiv', a: a};
};
var $author$project$Page$AddTeamToDiv$TeamsReceived = function (a) {
	return {$: 'TeamsReceived', a: a};
};
var $author$project$Page$AddTeamToDiv$getTeamsNotInDivRequest = F2(
	function (token, divId) {
		return A3(
			$author$project$Api$getRequest,
			token,
			$author$project$Api$TeamsNotInDiv(divId),
			A2(
				$elm$http$Http$expectJson,
				A2($elm$core$Basics$composeR, $krisajenkins$remotedata$RemoteData$fromResult, $author$project$Page$AddTeamToDiv$TeamsReceived),
				$author$project$Model$Team$teamsDecoder));
	});
var $author$project$Page$AddTeamToDiv$init = F2(
	function (session, id) {
		return _Utils_Tuple2(
			{division: $krisajenkins$remotedata$RemoteData$Loading, divisionId: id, saveError: $elm$core$Maybe$Nothing, selectedTeamId: $elm$core$Maybe$Nothing, session: session, teams: $krisajenkins$remotedata$RemoteData$Loading},
			$elm$core$Platform$Cmd$batch(
				_List_fromArray(
					[
						A2($author$project$Page$AddTeamToDiv$getTeamsNotInDivRequest, session.token, id),
						A2($author$project$Page$AddTeamToDiv$getDivisionRequest, session.token, id)
					])));
	});
var $author$project$Api$Coach = function (a) {
	return {$: 'Coach', a: a};
};
var $author$project$Page$EditCoach$CoachReceived = function (a) {
	return {$: 'CoachReceived', a: a};
};
var $author$project$Page$EditCoach$getCoachRequest = F2(
	function (token, id) {
		return A3(
			$author$project$Api$getRequest,
			token,
			$author$project$Api$Coach(id),
			A2(
				$elm$http$Http$expectJson,
				A2($elm$core$Basics$composeR, $krisajenkins$remotedata$RemoteData$fromResult, $author$project$Page$EditCoach$CoachReceived),
				$author$project$Model$Coach$coachDecoder));
	});
var $author$project$Page$EditCoach$init = F2(
	function (session, id) {
		return _Utils_Tuple2(
			{coach: $krisajenkins$remotedata$RemoteData$Loading, id: id, saveError: $elm$core$Maybe$Nothing, session: session},
			A2($author$project$Page$EditCoach$getCoachRequest, session.token, id));
	});
var $author$project$Page$EditDivision$DivisionReceived = function (a) {
	return {$: 'DivisionReceived', a: a};
};
var $author$project$Page$EditDivision$getDivisionRequest = F2(
	function (token, id) {
		return A3(
			$author$project$Api$getRequest,
			token,
			$author$project$Api$Division(id),
			A2(
				$elm$http$Http$expectJson,
				A2($elm$core$Basics$composeR, $krisajenkins$remotedata$RemoteData$fromResult, $author$project$Page$EditDivision$DivisionReceived),
				$author$project$Model$Division$divisionDecoder));
	});
var $author$project$Page$EditDivision$init = F2(
	function (session, id) {
		return _Utils_Tuple2(
			{division: $krisajenkins$remotedata$RemoteData$Loading, id: id, saveError: $elm$core$Maybe$Nothing, session: session},
			A2($author$project$Page$EditDivision$getDivisionRequest, session.token, id));
	});
var $author$project$Api$Game = function (a) {
	return {$: 'Game', a: a};
};
var $author$project$Page$EditGame$GameReceived = function (a) {
	return {$: 'GameReceived', a: a};
};
var $author$project$Model$Game$Game = F7(
	function (id, homeScore, awayScore, week, division, homeTeam, awayTeam) {
		return {awayScore: awayScore, awayTeam: awayTeam, division: division, homeScore: homeScore, homeTeam: homeTeam, id: id, week: week};
	});
var $author$project$Model$Game$gameIdDecoder = A2($elm$json$Json$Decode$map, $author$project$Model$Game$GameId, $elm$json$Json$Decode$int);
var $elm$json$Json$Decode$andThen = _Json_andThen;
var $elm$json$Json$Decode$at = F2(
	function (fields, decoder) {
		return A3($elm$core$List$foldr, $elm$json$Json$Decode$field, decoder, fields);
	});
var $elm$json$Json$Decode$decodeValue = _Json_run;
var $elm$json$Json$Decode$null = _Json_decodeNull;
var $elm$json$Json$Decode$oneOf = _Json_oneOf;
var $elm$json$Json$Decode$value = _Json_decodeValue;
var $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optionalDecoder = F3(
	function (path, valDecoder, fallback) {
		var nullOr = function (decoder) {
			return $elm$json$Json$Decode$oneOf(
				_List_fromArray(
					[
						decoder,
						$elm$json$Json$Decode$null(fallback)
					]));
		};
		var handleResult = function (input) {
			var _v0 = A2(
				$elm$json$Json$Decode$decodeValue,
				A2($elm$json$Json$Decode$at, path, $elm$json$Json$Decode$value),
				input);
			if (_v0.$ === 'Ok') {
				var rawValue = _v0.a;
				var _v1 = A2(
					$elm$json$Json$Decode$decodeValue,
					nullOr(valDecoder),
					rawValue);
				if (_v1.$ === 'Ok') {
					var finalResult = _v1.a;
					return $elm$json$Json$Decode$succeed(finalResult);
				} else {
					return A2(
						$elm$json$Json$Decode$at,
						path,
						nullOr(valDecoder));
				}
			} else {
				return $elm$json$Json$Decode$succeed(fallback);
			}
		};
		return A2($elm$json$Json$Decode$andThen, handleResult, $elm$json$Json$Decode$value);
	});
var $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional = F4(
	function (key, valDecoder, fallback, decoder) {
		return A2(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$custom,
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optionalDecoder,
				_List_fromArray(
					[key]),
				valDecoder,
				fallback),
			decoder);
	});
var $author$project$Model$Game$gameDecoder = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'awayTeam',
	$author$project$Model$Team$teamDecoder,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'homeTeam',
		$author$project$Model$Team$teamDecoder,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'division',
			$author$project$Model$Division$divisionDecoder,
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'week',
				$elm$json$Json$Decode$int,
				A4(
					$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
					'awayScore',
					A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, $elm$json$Json$Decode$int),
					$elm$core$Maybe$Nothing,
					A4(
						$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
						'homeScore',
						A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, $elm$json$Json$Decode$int),
						$elm$core$Maybe$Nothing,
						A3(
							$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
							'id',
							$author$project$Model$Game$gameIdDecoder,
							$elm$json$Json$Decode$succeed($author$project$Model$Game$Game))))))));
var $author$project$Page$EditGame$getGameRequest = F2(
	function (token, id) {
		return A3(
			$author$project$Api$getRequest,
			token,
			$author$project$Api$Game(id),
			A2(
				$elm$http$Http$expectJson,
				A2($elm$core$Basics$composeR, $krisajenkins$remotedata$RemoteData$fromResult, $author$project$Page$EditGame$GameReceived),
				$author$project$Model$Game$gameDecoder));
	});
var $author$project$Page$EditGame$init = F2(
	function (session, gameId) {
		return _Utils_Tuple2(
			{game: $krisajenkins$remotedata$RemoteData$Loading, gameId: gameId, saveError: $elm$core$Maybe$Nothing, session: session},
			A2($author$project$Page$EditGame$getGameRequest, session.token, gameId));
	});
var $author$project$Api$Team = function (a) {
	return {$: 'Team', a: a};
};
var $author$project$Page$EditTeam$TeamReceived = function (a) {
	return {$: 'TeamReceived', a: a};
};
var $author$project$Page$EditTeam$getTeamRequest = F2(
	function (token, id) {
		return A3(
			$author$project$Api$getRequest,
			token,
			$author$project$Api$Team(id),
			A2(
				$elm$http$Http$expectJson,
				A2($elm$core$Basics$composeR, $krisajenkins$remotedata$RemoteData$fromResult, $author$project$Page$EditTeam$TeamReceived),
				$author$project$Model$Team$teamDecoder));
	});
var $author$project$Page$EditTeam$init = F2(
	function (session, id) {
		return _Utils_Tuple2(
			{id: id, saveError: $elm$core$Maybe$Nothing, session: session, team: $krisajenkins$remotedata$RemoteData$Loading},
			A2($author$project$Page$EditTeam$getTeamRequest, session.token, id));
	});
var $author$project$Page$ListCoaches$None = {$: 'None'};
var $author$project$Page$ListCoaches$CoachesRecieved = function (a) {
	return {$: 'CoachesRecieved', a: a};
};
var $author$project$Page$ListCoaches$getCoachesRequest = function (token) {
	return A3(
		$author$project$Api$getRequest,
		token,
		$author$project$Api$Coaches,
		A2(
			$elm$http$Http$expectJson,
			A2($elm$core$Basics$composeR, $krisajenkins$remotedata$RemoteData$fromResult, $author$project$Page$ListCoaches$CoachesRecieved),
			$author$project$Model$Coach$coachsDecoder));
};
var $author$project$Page$ListCoaches$init = function (session) {
	return _Utils_Tuple2(
		{coaches: $krisajenkins$remotedata$RemoteData$Loading, deleteError: $elm$core$Maybe$Nothing, session: session, sortingMethod: $author$project$Page$ListCoaches$None},
		$author$project$Page$ListCoaches$getCoachesRequest(session.token));
};
var $author$project$Page$ListDivisions$None = {$: 'None'};
var $author$project$Page$ListDivisions$DivisionsRecieved = function (a) {
	return {$: 'DivisionsRecieved', a: a};
};
var $author$project$Page$ListDivisions$getDivisionsRequest = function (token) {
	return A3(
		$author$project$Api$getRequest,
		token,
		$author$project$Api$Divisions,
		A2(
			$elm$http$Http$expectJson,
			A2($elm$core$Basics$composeR, $krisajenkins$remotedata$RemoteData$fromResult, $author$project$Page$ListDivisions$DivisionsRecieved),
			$author$project$Model$Division$divisionsDecoder));
};
var $author$project$Page$ListDivisions$init = function (session) {
	return _Utils_Tuple2(
		{deleteError: $elm$core$Maybe$Nothing, divisions: $krisajenkins$remotedata$RemoteData$Loading, session: session, sortingMethod: $author$project$Page$ListDivisions$None},
		$author$project$Page$ListDivisions$getDivisionsRequest(session.token));
};
var $author$project$Page$ListTeams$None = {$: 'None'};
var $author$project$Api$Teams = {$: 'Teams'};
var $author$project$Page$ListTeams$TeamsReceived = function (a) {
	return {$: 'TeamsReceived', a: a};
};
var $author$project$Page$ListTeams$getTeamsRequest = function (token) {
	return A3(
		$author$project$Api$getRequest,
		token,
		$author$project$Api$Teams,
		A2(
			$elm$http$Http$expectJson,
			A2($elm$core$Basics$composeR, $krisajenkins$remotedata$RemoteData$fromResult, $author$project$Page$ListTeams$TeamsReceived),
			$author$project$Model$Team$teamsDecoder));
};
var $author$project$Page$ListTeams$init = function (session) {
	return _Utils_Tuple2(
		{deleteError: $elm$core$Maybe$Nothing, session: session, sortingMethod: $author$project$Page$ListTeams$None, teams: $krisajenkins$remotedata$RemoteData$Loading},
		$author$project$Page$ListTeams$getTeamsRequest(session.token));
};
var $author$project$Model$UserPassword$defaultUserPassword = {password: '', username: ''};
var $author$project$Page$Signin$init = function (session) {
	return _Utils_Tuple2(
		{session: session, signinError: $elm$core$Maybe$Nothing, userPassword: $author$project$Model$UserPassword$defaultUserPassword, wrongPassword: false},
		$elm$core$Platform$Cmd$none);
};
var $author$project$Page$ViewDivision$None = {$: 'None'};
var $author$project$Page$ViewDivision$DivisionReceived = function (a) {
	return {$: 'DivisionReceived', a: a};
};
var $author$project$Page$ViewDivision$getDivisionRequest = F2(
	function (token, divId) {
		return A3(
			$author$project$Api$getRequest,
			token,
			$author$project$Api$Division(divId),
			A2(
				$elm$http$Http$expectJson,
				A2($elm$core$Basics$composeR, $krisajenkins$remotedata$RemoteData$fromResult, $author$project$Page$ViewDivision$DivisionReceived),
				$author$project$Model$Division$divisionDecoder));
	});
var $author$project$Api$GamesInDiv = function (a) {
	return {$: 'GamesInDiv', a: a};
};
var $author$project$Page$ViewDivision$GamesReceived = function (a) {
	return {$: 'GamesReceived', a: a};
};
var $author$project$Model$Game$gamesDecoder = $elm$json$Json$Decode$list($author$project$Model$Game$gameDecoder);
var $author$project$Page$ViewDivision$getGamesRequest = F2(
	function (token, divId) {
		return A3(
			$author$project$Api$getRequest,
			token,
			$author$project$Api$GamesInDiv(divId),
			A2(
				$elm$http$Http$expectJson,
				A2($elm$core$Basics$composeR, $krisajenkins$remotedata$RemoteData$fromResult, $author$project$Page$ViewDivision$GamesReceived),
				$author$project$Model$Game$gamesDecoder));
	});
var $author$project$Page$ViewDivision$TeamsReceived = function (a) {
	return {$: 'TeamsReceived', a: a};
};
var $author$project$Page$ViewDivision$getTeamsInDivRequest = F2(
	function (token, divId) {
		return A3(
			$author$project$Api$getRequest,
			token,
			$author$project$Api$TeamsInDiv(divId),
			A2(
				$elm$http$Http$expectJson,
				A2($elm$core$Basics$composeR, $krisajenkins$remotedata$RemoteData$fromResult, $author$project$Page$ViewDivision$TeamsReceived),
				$author$project$Model$Team$teamsDecoder));
	});
var $author$project$Page$ViewDivision$init = F2(
	function (session, id) {
		return _Utils_Tuple2(
			{deleteError: $elm$core$Maybe$Nothing, displayedWeek: 1, division: $krisajenkins$remotedata$RemoteData$Loading, divisionId: id, games: $krisajenkins$remotedata$RemoteData$Loading, session: session, sortingMethod: $author$project$Page$ViewDivision$None, teams: $krisajenkins$remotedata$RemoteData$Loading},
			$elm$core$Platform$Cmd$batch(
				_List_fromArray(
					[
						A2($author$project$Page$ViewDivision$getTeamsInDivRequest, session.token, id),
						A2($author$project$Page$ViewDivision$getDivisionRequest, session.token, id),
						A2($author$project$Page$ViewDivision$getGamesRequest, session.token, id)
					])));
	});
var $author$project$Page$requiresAuth = F2(
	function (session, _v0) {
		var model = _v0.a;
		var cmd = _v0.b;
		var _v1 = session.token;
		if (_v1.$ === 'Nothing') {
			return _Utils_Tuple2($author$project$Page$NotFoundPage, $elm$core$Platform$Cmd$none);
		} else {
			return _Utils_Tuple2(model, cmd);
		}
	});
var $elm$core$Platform$Cmd$map = _Platform_map;
var $author$project$Page$wrapInitWith = F3(
	function (toModel, toMsg, _v0) {
		var subModel = _v0.a;
		var subCmd = _v0.b;
		return _Utils_Tuple2(
			toModel(subModel),
			A2($elm$core$Platform$Cmd$map, toMsg, subCmd));
	});
var $author$project$Page$init = F2(
	function (session, route) {
		switch (route.$) {
			case 'NotFound':
				return _Utils_Tuple2($author$project$Page$NotFoundPage, $elm$core$Platform$Cmd$none);
			case 'Home':
				return A3(
					$author$project$Page$wrapInitWith,
					$author$project$Page$TeamsPage,
					$author$project$Page$TeamsPageMsg,
					$author$project$Page$ListTeams$init(session));
			case 'Signin':
				return A3(
					$author$project$Page$wrapInitWith,
					$author$project$Page$SigninPage,
					$author$project$Page$SigninPageMsg,
					$author$project$Page$Signin$init(session));
			case 'Teams':
				return A3(
					$author$project$Page$wrapInitWith,
					$author$project$Page$TeamsPage,
					$author$project$Page$TeamsPageMsg,
					$author$project$Page$ListTeams$init(session));
			case 'AddTeam':
				return A2(
					$author$project$Page$requiresAuth,
					session,
					A3(
						$author$project$Page$wrapInitWith,
						$author$project$Page$AddTeamPage,
						$author$project$Page$AddTeamPageMsg,
						$author$project$Page$AddTeam$init(session)));
			case 'EditTeam':
				var id = route.a;
				return A2(
					$author$project$Page$requiresAuth,
					session,
					A3(
						$author$project$Page$wrapInitWith,
						$author$project$Page$EditTeamPage,
						$author$project$Page$EditTeamPageMsg,
						A2($author$project$Page$EditTeam$init, session, id)));
			case 'Coaches':
				return A3(
					$author$project$Page$wrapInitWith,
					$author$project$Page$CoachesPage,
					$author$project$Page$CoachesPageMsg,
					$author$project$Page$ListCoaches$init(session));
			case 'AddCoach':
				return A2(
					$author$project$Page$requiresAuth,
					session,
					A3(
						$author$project$Page$wrapInitWith,
						$author$project$Page$AddCoachPage,
						$author$project$Page$AddCoachPageMsg,
						$author$project$Page$AddCoach$init(session)));
			case 'EditCoach':
				var id = route.a;
				return A2(
					$author$project$Page$requiresAuth,
					session,
					A3(
						$author$project$Page$wrapInitWith,
						$author$project$Page$EditCoachPage,
						$author$project$Page$EditCoachPageMsg,
						A2($author$project$Page$EditCoach$init, session, id)));
			case 'Divisions':
				return A3(
					$author$project$Page$wrapInitWith,
					$author$project$Page$DivisionsPage,
					$author$project$Page$DivisionsPageMsg,
					$author$project$Page$ListDivisions$init(session));
			case 'AddDivision':
				return A2(
					$author$project$Page$requiresAuth,
					session,
					A3(
						$author$project$Page$wrapInitWith,
						$author$project$Page$AddDivisionPage,
						$author$project$Page$AddDivisionPageMsg,
						$author$project$Page$AddDivision$init(session)));
			case 'EditDivision':
				var id = route.a;
				return A2(
					$author$project$Page$requiresAuth,
					session,
					A3(
						$author$project$Page$wrapInitWith,
						$author$project$Page$EditDivisionPage,
						$author$project$Page$EditDivisionPageMsg,
						A2($author$project$Page$EditDivision$init, session, id)));
			case 'AddGame':
				return A2(
					$author$project$Page$requiresAuth,
					session,
					A3(
						$author$project$Page$wrapInitWith,
						$author$project$Page$AddGamePage,
						$author$project$Page$AddGamePageMsg,
						A3($author$project$Page$AddGame$init, session, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing)));
			case 'AddGameWithDefaults':
				var divId = route.a;
				var week = route.b;
				return A2(
					$author$project$Page$requiresAuth,
					session,
					A3(
						$author$project$Page$wrapInitWith,
						$author$project$Page$AddGamePage,
						$author$project$Page$AddGamePageMsg,
						A3(
							$author$project$Page$AddGame$init,
							session,
							$elm$core$Maybe$Just(divId),
							$elm$core$Maybe$Just(week))));
			case 'EditGame':
				var id = route.a;
				return A2(
					$author$project$Page$requiresAuth,
					session,
					A3(
						$author$project$Page$wrapInitWith,
						$author$project$Page$EditGamePage,
						$author$project$Page$EditGamePageMsg,
						A2($author$project$Page$EditGame$init, session, id)));
			case 'ViewDivision':
				var id = route.a;
				return A3(
					$author$project$Page$wrapInitWith,
					$author$project$Page$ViewDivisionPage,
					$author$project$Page$ViewDivisionPageMsg,
					A2($author$project$Page$ViewDivision$init, session, id));
			case 'AddTeamToDivision':
				var id = route.a;
				return A2(
					$author$project$Page$requiresAuth,
					session,
					A3(
						$author$project$Page$wrapInitWith,
						$author$project$Page$AddTeamToDivPage,
						$author$project$Page$AddTeamToDivPageMsg,
						A2($author$project$Page$AddTeamToDiv$init, session, id)));
			default:
				var id = route.a;
				var week = route.b;
				return A2(
					$author$project$Page$requiresAuth,
					session,
					A3(
						$author$project$Page$wrapInitWith,
						$author$project$Page$AddGameWeekPage,
						$author$project$Page$AddGameWeekMsg,
						A3($author$project$Page$AddGameWeek$init, session, id, week)));
		}
	});
var $author$project$Route$NotFound = {$: 'NotFound'};
var $author$project$Route$AddCoach = {$: 'AddCoach'};
var $author$project$Route$AddDivision = {$: 'AddDivision'};
var $author$project$Route$AddGame = {$: 'AddGame'};
var $author$project$Route$AddGameWeek = F2(
	function (a, b) {
		return {$: 'AddGameWeek', a: a, b: b};
	});
var $author$project$Route$AddGameWithDefaults = F2(
	function (a, b) {
		return {$: 'AddGameWithDefaults', a: a, b: b};
	});
var $author$project$Route$AddTeam = {$: 'AddTeam'};
var $author$project$Route$AddTeamToDivision = function (a) {
	return {$: 'AddTeamToDivision', a: a};
};
var $author$project$Route$Coaches = {$: 'Coaches'};
var $author$project$Route$Divisions = {$: 'Divisions'};
var $author$project$Route$EditCoach = function (a) {
	return {$: 'EditCoach', a: a};
};
var $author$project$Route$EditDivision = function (a) {
	return {$: 'EditDivision', a: a};
};
var $author$project$Route$EditGame = function (a) {
	return {$: 'EditGame', a: a};
};
var $author$project$Route$EditTeam = function (a) {
	return {$: 'EditTeam', a: a};
};
var $author$project$Route$Home = {$: 'Home'};
var $author$project$Route$Signin = {$: 'Signin'};
var $author$project$Route$Teams = {$: 'Teams'};
var $author$project$Route$ViewDivision = function (a) {
	return {$: 'ViewDivision', a: a};
};
var $elm$url$Url$Parser$Parser = function (a) {
	return {$: 'Parser', a: a};
};
var $elm$url$Url$Parser$State = F5(
	function (visited, unvisited, params, frag, value) {
		return {frag: frag, params: params, unvisited: unvisited, value: value, visited: visited};
	});
var $elm$url$Url$Parser$custom = F2(
	function (tipe, stringToSomething) {
		return $elm$url$Url$Parser$Parser(
			function (_v0) {
				var visited = _v0.visited;
				var unvisited = _v0.unvisited;
				var params = _v0.params;
				var frag = _v0.frag;
				var value = _v0.value;
				if (!unvisited.b) {
					return _List_Nil;
				} else {
					var next = unvisited.a;
					var rest = unvisited.b;
					var _v2 = stringToSomething(next);
					if (_v2.$ === 'Just') {
						var nextValue = _v2.a;
						return _List_fromArray(
							[
								A5(
								$elm$url$Url$Parser$State,
								A2($elm$core$List$cons, next, visited),
								rest,
								params,
								frag,
								value(nextValue))
							]);
					} else {
						return _List_Nil;
					}
				}
			});
	});
var $elm$core$Maybe$map = F2(
	function (f, maybe) {
		if (maybe.$ === 'Just') {
			var value = maybe.a;
			return $elm$core$Maybe$Just(
				f(value));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Model$Coach$idParser = A2(
	$elm$url$Url$Parser$custom,
	'COACHID',
	function (id) {
		return A2(
			$elm$core$Maybe$map,
			$author$project$Model$Coach$CoachId,
			$elm$core$String$toInt(id));
	});
var $author$project$Model$Division$idParser = A2(
	$elm$url$Url$Parser$custom,
	'DIVID',
	function (id) {
		return A2(
			$elm$core$Maybe$map,
			$author$project$Model$Division$DivisionId,
			$elm$core$String$toInt(id));
	});
var $author$project$Model$Game$idParser = A2(
	$elm$url$Url$Parser$custom,
	'GAMEID',
	function (id) {
		return A2(
			$elm$core$Maybe$map,
			$author$project$Model$Game$GameId,
			$elm$core$String$toInt(id));
	});
var $author$project$Model$Team$idParser = A2(
	$elm$url$Url$Parser$custom,
	'TEAMID',
	function (id) {
		return A2(
			$elm$core$Maybe$map,
			$author$project$Model$Team$TeamId,
			$elm$core$String$toInt(id));
	});
var $elm$url$Url$Parser$int = A2($elm$url$Url$Parser$custom, 'NUMBER', $elm$core$String$toInt);
var $elm$url$Url$Parser$mapState = F2(
	function (func, _v0) {
		var visited = _v0.visited;
		var unvisited = _v0.unvisited;
		var params = _v0.params;
		var frag = _v0.frag;
		var value = _v0.value;
		return A5(
			$elm$url$Url$Parser$State,
			visited,
			unvisited,
			params,
			frag,
			func(value));
	});
var $elm$url$Url$Parser$map = F2(
	function (subValue, _v0) {
		var parseArg = _v0.a;
		return $elm$url$Url$Parser$Parser(
			function (_v1) {
				var visited = _v1.visited;
				var unvisited = _v1.unvisited;
				var params = _v1.params;
				var frag = _v1.frag;
				var value = _v1.value;
				return A2(
					$elm$core$List$map,
					$elm$url$Url$Parser$mapState(value),
					parseArg(
						A5($elm$url$Url$Parser$State, visited, unvisited, params, frag, subValue)));
			});
	});
var $elm$core$List$append = F2(
	function (xs, ys) {
		if (!ys.b) {
			return xs;
		} else {
			return A3($elm$core$List$foldr, $elm$core$List$cons, ys, xs);
		}
	});
var $elm$core$List$concat = function (lists) {
	return A3($elm$core$List$foldr, $elm$core$List$append, _List_Nil, lists);
};
var $elm$core$List$concatMap = F2(
	function (f, list) {
		return $elm$core$List$concat(
			A2($elm$core$List$map, f, list));
	});
var $elm$url$Url$Parser$oneOf = function (parsers) {
	return $elm$url$Url$Parser$Parser(
		function (state) {
			return A2(
				$elm$core$List$concatMap,
				function (_v0) {
					var parser = _v0.a;
					return parser(state);
				},
				parsers);
		});
};
var $elm$url$Url$Parser$s = function (str) {
	return $elm$url$Url$Parser$Parser(
		function (_v0) {
			var visited = _v0.visited;
			var unvisited = _v0.unvisited;
			var params = _v0.params;
			var frag = _v0.frag;
			var value = _v0.value;
			if (!unvisited.b) {
				return _List_Nil;
			} else {
				var next = unvisited.a;
				var rest = unvisited.b;
				return _Utils_eq(next, str) ? _List_fromArray(
					[
						A5(
						$elm$url$Url$Parser$State,
						A2($elm$core$List$cons, next, visited),
						rest,
						params,
						frag,
						value)
					]) : _List_Nil;
			}
		});
};
var $elm$url$Url$Parser$slash = F2(
	function (_v0, _v1) {
		var parseBefore = _v0.a;
		var parseAfter = _v1.a;
		return $elm$url$Url$Parser$Parser(
			function (state) {
				return A2(
					$elm$core$List$concatMap,
					parseAfter,
					parseBefore(state));
			});
	});
var $elm$url$Url$Parser$top = $elm$url$Url$Parser$Parser(
	function (state) {
		return _List_fromArray(
			[state]);
	});
var $author$project$Route$matchRoute = $elm$url$Url$Parser$oneOf(
	_List_fromArray(
		[
			A2($elm$url$Url$Parser$map, $author$project$Route$Home, $elm$url$Url$Parser$top),
			A2(
			$elm$url$Url$Parser$map,
			$author$project$Route$Signin,
			$elm$url$Url$Parser$oneOf(
				_List_fromArray(
					[
						$elm$url$Url$Parser$s('Signin'),
						$elm$url$Url$Parser$s('signin')
					]))),
			A2(
			$elm$url$Url$Parser$map,
			$author$project$Route$Teams,
			$elm$url$Url$Parser$oneOf(
				_List_fromArray(
					[
						$elm$url$Url$Parser$s('Team'),
						$elm$url$Url$Parser$s('team')
					]))),
			A2(
			$elm$url$Url$Parser$map,
			$author$project$Route$AddTeam,
			$elm$url$Url$Parser$oneOf(
				_List_fromArray(
					[
						A2(
						$elm$url$Url$Parser$slash,
						$elm$url$Url$Parser$s('Team'),
						$elm$url$Url$Parser$s('Add')),
						A2(
						$elm$url$Url$Parser$slash,
						$elm$url$Url$Parser$s('team'),
						$elm$url$Url$Parser$s('add'))
					]))),
			A2(
			$elm$url$Url$Parser$map,
			$author$project$Route$EditTeam,
			$elm$url$Url$Parser$oneOf(
				_List_fromArray(
					[
						A2(
						$elm$url$Url$Parser$slash,
						$elm$url$Url$Parser$s('Team'),
						A2(
							$elm$url$Url$Parser$slash,
							$elm$url$Url$Parser$s('Edit'),
							$author$project$Model$Team$idParser)),
						A2(
						$elm$url$Url$Parser$slash,
						$elm$url$Url$Parser$s('team'),
						A2(
							$elm$url$Url$Parser$slash,
							$elm$url$Url$Parser$s('edit'),
							$author$project$Model$Team$idParser))
					]))),
			A2(
			$elm$url$Url$Parser$map,
			$author$project$Route$Divisions,
			$elm$url$Url$Parser$oneOf(
				_List_fromArray(
					[
						$elm$url$Url$Parser$s('Division'),
						$elm$url$Url$Parser$s('division')
					]))),
			A2(
			$elm$url$Url$Parser$map,
			$author$project$Route$AddDivision,
			$elm$url$Url$Parser$oneOf(
				_List_fromArray(
					[
						A2(
						$elm$url$Url$Parser$slash,
						$elm$url$Url$Parser$s('Division'),
						$elm$url$Url$Parser$s('Add')),
						A2(
						$elm$url$Url$Parser$slash,
						$elm$url$Url$Parser$s('division'),
						$elm$url$Url$Parser$s('add'))
					]))),
			A2(
			$elm$url$Url$Parser$map,
			$author$project$Route$EditDivision,
			$elm$url$Url$Parser$oneOf(
				_List_fromArray(
					[
						A2(
						$elm$url$Url$Parser$slash,
						$elm$url$Url$Parser$s('Division'),
						A2(
							$elm$url$Url$Parser$slash,
							$elm$url$Url$Parser$s('Edit'),
							$author$project$Model$Division$idParser)),
						A2(
						$elm$url$Url$Parser$slash,
						$elm$url$Url$Parser$s('division'),
						A2(
							$elm$url$Url$Parser$slash,
							$elm$url$Url$Parser$s('edit'),
							$author$project$Model$Division$idParser))
					]))),
			A2(
			$elm$url$Url$Parser$map,
			$author$project$Route$Coaches,
			$elm$url$Url$Parser$oneOf(
				_List_fromArray(
					[
						$elm$url$Url$Parser$s('Coach'),
						$elm$url$Url$Parser$s('coach')
					]))),
			A2(
			$elm$url$Url$Parser$map,
			$author$project$Route$AddCoach,
			$elm$url$Url$Parser$oneOf(
				_List_fromArray(
					[
						A2(
						$elm$url$Url$Parser$slash,
						$elm$url$Url$Parser$s('Coach'),
						$elm$url$Url$Parser$s('Add')),
						A2(
						$elm$url$Url$Parser$slash,
						$elm$url$Url$Parser$s('coach'),
						$elm$url$Url$Parser$s('add'))
					]))),
			A2(
			$elm$url$Url$Parser$map,
			$author$project$Route$EditCoach,
			$elm$url$Url$Parser$oneOf(
				_List_fromArray(
					[
						A2(
						$elm$url$Url$Parser$slash,
						$elm$url$Url$Parser$s('Coach'),
						A2(
							$elm$url$Url$Parser$slash,
							$elm$url$Url$Parser$s('Edit'),
							$author$project$Model$Coach$idParser)),
						A2(
						$elm$url$Url$Parser$slash,
						$elm$url$Url$Parser$s('coach'),
						A2(
							$elm$url$Url$Parser$slash,
							$elm$url$Url$Parser$s('edit'),
							$author$project$Model$Coach$idParser))
					]))),
			A2(
			$elm$url$Url$Parser$map,
			$author$project$Route$AddGame,
			$elm$url$Url$Parser$oneOf(
				_List_fromArray(
					[
						A2(
						$elm$url$Url$Parser$slash,
						$elm$url$Url$Parser$s('Game'),
						$elm$url$Url$Parser$s('Add')),
						A2(
						$elm$url$Url$Parser$slash,
						$elm$url$Url$Parser$s('game'),
						$elm$url$Url$Parser$s('add'))
					]))),
			A2(
			$elm$url$Url$Parser$map,
			$author$project$Route$AddGameWithDefaults,
			$elm$url$Url$Parser$oneOf(
				_List_fromArray(
					[
						A2(
						$elm$url$Url$Parser$slash,
						$elm$url$Url$Parser$s('Game'),
						A2(
							$elm$url$Url$Parser$slash,
							$elm$url$Url$Parser$s('Add'),
							A2($elm$url$Url$Parser$slash, $author$project$Model$Division$idParser, $elm$url$Url$Parser$int))),
						A2(
						$elm$url$Url$Parser$slash,
						$elm$url$Url$Parser$s('game'),
						A2(
							$elm$url$Url$Parser$slash,
							$elm$url$Url$Parser$s('add'),
							A2($elm$url$Url$Parser$slash, $author$project$Model$Division$idParser, $elm$url$Url$Parser$int)))
					]))),
			A2(
			$elm$url$Url$Parser$map,
			$author$project$Route$EditGame,
			$elm$url$Url$Parser$oneOf(
				_List_fromArray(
					[
						A2(
						$elm$url$Url$Parser$slash,
						$elm$url$Url$Parser$s('Game'),
						A2(
							$elm$url$Url$Parser$slash,
							$elm$url$Url$Parser$s('Edit'),
							$author$project$Model$Game$idParser)),
						A2(
						$elm$url$Url$Parser$slash,
						$elm$url$Url$Parser$s('game'),
						A2(
							$elm$url$Url$Parser$slash,
							$elm$url$Url$Parser$s('edit'),
							$author$project$Model$Game$idParser))
					]))),
			A2(
			$elm$url$Url$Parser$map,
			$author$project$Route$ViewDivision,
			$elm$url$Url$Parser$oneOf(
				_List_fromArray(
					[
						A2(
						$elm$url$Url$Parser$slash,
						$elm$url$Url$Parser$s('Division'),
						A2(
							$elm$url$Url$Parser$slash,
							$elm$url$Url$Parser$s('View'),
							$author$project$Model$Division$idParser)),
						A2(
						$elm$url$Url$Parser$slash,
						$elm$url$Url$Parser$s('division'),
						A2(
							$elm$url$Url$Parser$slash,
							$elm$url$Url$Parser$s('view'),
							$author$project$Model$Division$idParser))
					]))),
			A2(
			$elm$url$Url$Parser$map,
			$author$project$Route$AddTeamToDivision,
			$elm$url$Url$Parser$oneOf(
				_List_fromArray(
					[
						A2(
						$elm$url$Url$Parser$slash,
						$elm$url$Url$Parser$s('Division'),
						A2(
							$elm$url$Url$Parser$slash,
							$elm$url$Url$Parser$s('AddTeam'),
							$author$project$Model$Division$idParser)),
						A2(
						$elm$url$Url$Parser$slash,
						$elm$url$Url$Parser$s('division'),
						A2(
							$elm$url$Url$Parser$slash,
							$elm$url$Url$Parser$s('addteam'),
							$author$project$Model$Division$idParser))
					]))),
			A2(
			$elm$url$Url$Parser$map,
			$author$project$Route$AddGameWeek,
			$elm$url$Url$Parser$oneOf(
				_List_fromArray(
					[
						A2(
						$elm$url$Url$Parser$slash,
						$elm$url$Url$Parser$s('Game'),
						A2(
							$elm$url$Url$Parser$slash,
							$elm$url$Url$Parser$s('AddWeek'),
							A2($elm$url$Url$Parser$slash, $author$project$Model$Division$idParser, $elm$url$Url$Parser$int))),
						A2(
						$elm$url$Url$Parser$slash,
						$elm$url$Url$Parser$s('game'),
						A2(
							$elm$url$Url$Parser$slash,
							$elm$url$Url$Parser$s('addweek'),
							A2($elm$url$Url$Parser$slash, $author$project$Model$Division$idParser, $elm$url$Url$Parser$int)))
					])))
		]));
var $elm$url$Url$Parser$getFirstMatch = function (states) {
	getFirstMatch:
	while (true) {
		if (!states.b) {
			return $elm$core$Maybe$Nothing;
		} else {
			var state = states.a;
			var rest = states.b;
			var _v1 = state.unvisited;
			if (!_v1.b) {
				return $elm$core$Maybe$Just(state.value);
			} else {
				if ((_v1.a === '') && (!_v1.b.b)) {
					return $elm$core$Maybe$Just(state.value);
				} else {
					var $temp$states = rest;
					states = $temp$states;
					continue getFirstMatch;
				}
			}
		}
	}
};
var $elm$url$Url$Parser$removeFinalEmpty = function (segments) {
	if (!segments.b) {
		return _List_Nil;
	} else {
		if ((segments.a === '') && (!segments.b.b)) {
			return _List_Nil;
		} else {
			var segment = segments.a;
			var rest = segments.b;
			return A2(
				$elm$core$List$cons,
				segment,
				$elm$url$Url$Parser$removeFinalEmpty(rest));
		}
	}
};
var $elm$url$Url$Parser$preparePath = function (path) {
	var _v0 = A2($elm$core$String$split, '/', path);
	if (_v0.b && (_v0.a === '')) {
		var segments = _v0.b;
		return $elm$url$Url$Parser$removeFinalEmpty(segments);
	} else {
		var segments = _v0;
		return $elm$url$Url$Parser$removeFinalEmpty(segments);
	}
};
var $elm$url$Url$Parser$addToParametersHelp = F2(
	function (value, maybeList) {
		if (maybeList.$ === 'Nothing') {
			return $elm$core$Maybe$Just(
				_List_fromArray(
					[value]));
		} else {
			var list = maybeList.a;
			return $elm$core$Maybe$Just(
				A2($elm$core$List$cons, value, list));
		}
	});
var $elm$url$Url$percentDecode = _Url_percentDecode;
var $elm$url$Url$Parser$addParam = F2(
	function (segment, dict) {
		var _v0 = A2($elm$core$String$split, '=', segment);
		if ((_v0.b && _v0.b.b) && (!_v0.b.b.b)) {
			var rawKey = _v0.a;
			var _v1 = _v0.b;
			var rawValue = _v1.a;
			var _v2 = $elm$url$Url$percentDecode(rawKey);
			if (_v2.$ === 'Nothing') {
				return dict;
			} else {
				var key = _v2.a;
				var _v3 = $elm$url$Url$percentDecode(rawValue);
				if (_v3.$ === 'Nothing') {
					return dict;
				} else {
					var value = _v3.a;
					return A3(
						$elm$core$Dict$update,
						key,
						$elm$url$Url$Parser$addToParametersHelp(value),
						dict);
				}
			}
		} else {
			return dict;
		}
	});
var $elm$url$Url$Parser$prepareQuery = function (maybeQuery) {
	if (maybeQuery.$ === 'Nothing') {
		return $elm$core$Dict$empty;
	} else {
		var qry = maybeQuery.a;
		return A3(
			$elm$core$List$foldr,
			$elm$url$Url$Parser$addParam,
			$elm$core$Dict$empty,
			A2($elm$core$String$split, '&', qry));
	}
};
var $elm$url$Url$Parser$parse = F2(
	function (_v0, url) {
		var parser = _v0.a;
		return $elm$url$Url$Parser$getFirstMatch(
			parser(
				A5(
					$elm$url$Url$Parser$State,
					_List_Nil,
					$elm$url$Url$Parser$preparePath(url.path),
					$elm$url$Url$Parser$prepareQuery(url.query),
					url.fragment,
					$elm$core$Basics$identity)));
	});
var $author$project$Route$parseUrl = function (url) {
	var _v0 = A2($elm$url$Url$Parser$parse, $author$project$Route$matchRoute, url);
	if (_v0.$ === 'Just') {
		var route = _v0.a;
		return route;
	} else {
		return $author$project$Route$NotFound;
	}
};
var $author$project$Main$init = F3(
	function (_v0, url, navkey) {
		var session = $author$project$Model$Session$defaultSession(navkey);
		var _v1 = A2(
			$author$project$Page$init,
			session,
			$author$project$Route$parseUrl(url));
		var page = _v1.a;
		var pageCommand = _v1.b;
		var _v2 = $author$project$Header$init(session);
		var navModel = _v2.a;
		var navCommand = _v2.b;
		var cmds = $elm$core$Platform$Cmd$batch(
			_List_fromArray(
				[
					A2($elm$core$Platform$Cmd$map, $author$project$Main$HeaderMsg, navCommand),
					A2($elm$core$Platform$Cmd$map, $author$project$Main$PageMsg, pageCommand)
				]));
		var model = {
			headerModel: navModel,
			page: page,
			route: $author$project$Route$parseUrl(url),
			session: session
		};
		return _Utils_Tuple2(model, cmds);
	});
var $elm$core$Platform$Sub$batch = _Platform_batch;
var $elm$core$Platform$Sub$none = $elm$core$Platform$Sub$batch(_List_Nil);
var $author$project$Main$unsubscribe = function (_v0) {
	return $elm$core$Platform$Sub$none;
};
var $elm$browser$Browser$Navigation$load = _Browser_load;
var $author$project$Main$processHeaderOutMsg = F2(
	function (model, outMsg) {
		if (outMsg.$ === 'Just') {
			var _v1 = outMsg.a;
			var updateSession = function (session) {
				return _Utils_update(
					session,
					{token: $elm$core$Maybe$Nothing});
			};
			var updateHeader = function (header) {
				return _Utils_update(
					header,
					{
						session: updateSession(header.session)
					});
			};
			return _Utils_Tuple2(
				_Utils_update(
					model,
					{
						headerModel: updateHeader(model.headerModel),
						session: updateSession(model.session)
					}),
				$elm$core$Platform$Cmd$none);
		} else {
			return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
		}
	});
var $author$project$Main$processPageOutMsg = F2(
	function (model, outMsg) {
		if (outMsg.$ === 'Just') {
			var token = outMsg.a.a.a;
			var updateSession = function (session) {
				return _Utils_update(
					session,
					{
						token: $elm$core$Maybe$Just(token)
					});
			};
			var updateHeader = function (header) {
				return _Utils_update(
					header,
					{
						session: updateSession(header.session)
					});
			};
			return _Utils_Tuple2(
				_Utils_update(
					model,
					{
						headerModel: updateHeader(model.headerModel),
						session: updateSession(model.session)
					}),
				$elm$core$Platform$Cmd$none);
		} else {
			return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
		}
	});
var $elm$browser$Browser$Navigation$pushUrl = _Browser_pushUrl;
var $elm$url$Url$addPort = F2(
	function (maybePort, starter) {
		if (maybePort.$ === 'Nothing') {
			return starter;
		} else {
			var port_ = maybePort.a;
			return starter + (':' + $elm$core$String$fromInt(port_));
		}
	});
var $elm$url$Url$addPrefixed = F3(
	function (prefix, maybeSegment, starter) {
		if (maybeSegment.$ === 'Nothing') {
			return starter;
		} else {
			var segment = maybeSegment.a;
			return _Utils_ap(
				starter,
				_Utils_ap(prefix, segment));
		}
	});
var $elm$url$Url$toString = function (url) {
	var http = function () {
		var _v0 = url.protocol;
		if (_v0.$ === 'Http') {
			return 'http://';
		} else {
			return 'https://';
		}
	}();
	return A3(
		$elm$url$Url$addPrefixed,
		'#',
		url.fragment,
		A3(
			$elm$url$Url$addPrefixed,
			'?',
			url.query,
			_Utils_ap(
				A2(
					$elm$url$Url$addPort,
					url.port_,
					_Utils_ap(http, url.host)),
				url.path)));
};
var $author$project$Header$Signout = {$: 'Signout'};
var $elm$core$List$sortBy = _List_sortBy;
var $elm$core$List$takeReverse = F3(
	function (n, list, kept) {
		takeReverse:
		while (true) {
			if (n <= 0) {
				return kept;
			} else {
				if (!list.b) {
					return kept;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs,
						$temp$kept = A2($elm$core$List$cons, x, kept);
					n = $temp$n;
					list = $temp$list;
					kept = $temp$kept;
					continue takeReverse;
				}
			}
		}
	});
var $elm$core$List$takeTailRec = F2(
	function (n, list) {
		return $elm$core$List$reverse(
			A3($elm$core$List$takeReverse, n, list, _List_Nil));
	});
var $elm$core$List$takeFast = F3(
	function (ctr, n, list) {
		if (n <= 0) {
			return _List_Nil;
		} else {
			var _v0 = _Utils_Tuple2(n, list);
			_v0$1:
			while (true) {
				_v0$5:
				while (true) {
					if (!_v0.b.b) {
						return list;
					} else {
						if (_v0.b.b.b) {
							switch (_v0.a) {
								case 1:
									break _v0$1;
								case 2:
									var _v2 = _v0.b;
									var x = _v2.a;
									var _v3 = _v2.b;
									var y = _v3.a;
									return _List_fromArray(
										[x, y]);
								case 3:
									if (_v0.b.b.b.b) {
										var _v4 = _v0.b;
										var x = _v4.a;
										var _v5 = _v4.b;
										var y = _v5.a;
										var _v6 = _v5.b;
										var z = _v6.a;
										return _List_fromArray(
											[x, y, z]);
									} else {
										break _v0$5;
									}
								default:
									if (_v0.b.b.b.b && _v0.b.b.b.b.b) {
										var _v7 = _v0.b;
										var x = _v7.a;
										var _v8 = _v7.b;
										var y = _v8.a;
										var _v9 = _v8.b;
										var z = _v9.a;
										var _v10 = _v9.b;
										var w = _v10.a;
										var tl = _v10.b;
										return (ctr > 1000) ? A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A2($elm$core$List$takeTailRec, n - 4, tl))))) : A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A3($elm$core$List$takeFast, ctr + 1, n - 4, tl)))));
									} else {
										break _v0$5;
									}
							}
						} else {
							if (_v0.a === 1) {
								break _v0$1;
							} else {
								break _v0$5;
							}
						}
					}
				}
				return list;
			}
			var _v1 = _v0.b;
			var x = _v1.a;
			return _List_fromArray(
				[x]);
		}
	});
var $elm$core$List$take = F2(
	function (n, list) {
		return A3($elm$core$List$takeFast, 0, n, list);
	});
var $author$project$Header$cleanupDivList = function (divs) {
	return A2(
		$elm$core$List$take,
		10,
		$elm$core$List$reverse(
			A2(
				$elm$core$List$sortBy,
				function ($) {
					return $.season;
				},
				divs)));
};
var $author$project$Route$routeToString = function (route) {
	switch (route.$) {
		case 'NotFound':
			return '/NotFound';
		case 'Home':
			return '/';
		case 'Signin':
			return '/signin';
		case 'Teams':
			return '/Team';
		case 'AddTeam':
			return '/Team/Add';
		case 'EditTeam':
			var id = route.a;
			return '/Team/Edit/' + $author$project$Model$Team$idToString(id);
		case 'Coaches':
			return '/Coach';
		case 'AddCoach':
			return '/Coach/Add';
		case 'EditCoach':
			var coachId = route.a;
			return '/Coach/Edit/' + $author$project$Model$Coach$idToString(coachId);
		case 'Divisions':
			return '/Division';
		case 'AddDivision':
			return '/Division/Add';
		case 'EditDivision':
			var divisionId = route.a;
			return '/Division/Edit/' + $author$project$Model$Division$idToString(divisionId);
		case 'AddGame':
			return '/Game/Add';
		case 'AddGameWithDefaults':
			var divId = route.a;
			var week = route.b;
			return '/Game/Add/' + ($author$project$Model$Division$idToString(divId) + ('/' + $elm$core$String$fromInt(week)));
		case 'EditGame':
			var gameId = route.a;
			return '/Game/Edit/' + $author$project$Model$Game$idToString(gameId);
		case 'ViewDivision':
			var divisionId = route.a;
			return '/Division/View/' + $author$project$Model$Division$idToString(divisionId);
		case 'AddTeamToDivision':
			var divisionId = route.a;
			return '/Division/AddTeam/' + $author$project$Model$Division$idToString(divisionId);
		default:
			var divisionId = route.a;
			var week = route.b;
			return '/Game/AddWeek/' + ($author$project$Model$Division$idToString(divisionId) + ('/' + $elm$core$String$fromInt(week)));
	}
};
var $author$project$Route$pushUrl = F2(
	function (navkey, route) {
		return A2(
			$elm$browser$Browser$Navigation$pushUrl,
			navkey,
			$author$project$Route$routeToString(route));
	});
var $author$project$Header$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'TeamIndexClicked':
				return _Utils_Tuple3(
					model,
					A2($author$project$Route$pushUrl, model.session.navkey, $author$project$Route$Teams),
					$elm$core$Maybe$Nothing);
			case 'CoachIndexClicked':
				return _Utils_Tuple3(
					model,
					A2($author$project$Route$pushUrl, model.session.navkey, $author$project$Route$Coaches),
					$elm$core$Maybe$Nothing);
			case 'DivisionIndexClicked':
				return _Utils_Tuple3(
					model,
					A2($author$project$Route$pushUrl, model.session.navkey, $author$project$Route$Divisions),
					$elm$core$Maybe$Nothing);
			case 'SpecificDivisionClicked':
				var divId = msg.a;
				return _Utils_Tuple3(
					model,
					A2(
						$author$project$Route$pushUrl,
						model.session.navkey,
						$author$project$Route$ViewDivision(divId)),
					$elm$core$Maybe$Nothing);
			case 'HomeClicked':
				return _Utils_Tuple3(
					model,
					A2($author$project$Route$pushUrl, model.session.navkey, $author$project$Route$Home),
					$elm$core$Maybe$Nothing);
			case 'SigninClicked':
				return _Utils_Tuple3(
					model,
					A2($author$project$Route$pushUrl, model.session.navkey, $author$project$Route$Signin),
					$elm$core$Maybe$Nothing);
			case 'SignoutClicked':
				var updateSession = function (session) {
					return _Utils_update(
						session,
						{token: $elm$core$Maybe$Nothing});
				};
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							session: updateSession(model.session)
						}),
					$elm$core$Platform$Cmd$none,
					$elm$core$Maybe$Just($author$project$Header$Signout));
			default:
				if (msg.a.$ === 'Success') {
					var divs = msg.a.a;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								divisions: $krisajenkins$remotedata$RemoteData$Success(
									$author$project$Header$cleanupDivList(divs))
							}),
						$elm$core$Platform$Cmd$none,
						$elm$core$Maybe$Nothing);
				} else {
					var response = msg.a;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{divisions: response}),
						$elm$core$Platform$Cmd$none,
						$elm$core$Maybe$Nothing);
				}
		}
	});
var $author$project$Page$SigninPageOutMsg = function (a) {
	return {$: 'SigninPageOutMsg', a: a};
};
var $author$project$Error$buildErrorMessage = function (httpError) {
	switch (httpError.$) {
		case 'BadUrl':
			var message = httpError.a;
			return message;
		case 'Timeout':
			return 'Server is taking too long to respond. Please try again later.';
		case 'NetworkError':
			return 'Unable to reach server.';
		case 'BadStatus':
			if (httpError.a === 401) {
				return 'Please Sign in to access this content.';
			} else {
				var statusCode = httpError.a;
				return 'Request failed with status code: ' + $elm$core$String$fromInt(statusCode);
			}
		default:
			var message = httpError.a;
			return message;
	}
};
var $author$project$Page$AddCoach$CoachSubmitted = function (a) {
	return {$: 'CoachSubmitted', a: a};
};
var $elm$http$Http$jsonBody = function (value) {
	return A2(
		_Http_pair,
		'application/json',
		A2($elm$json$Json$Encode$encode, 0, value));
};
var $elm$json$Json$Encode$int = _Json_wrap;
var $elm$json$Json$Encode$object = function (pairs) {
	return _Json_wrap(
		A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, obj) {
					var k = _v0.a;
					var v = _v0.b;
					return A3(_Json_addField, k, v, obj);
				}),
			_Json_emptyObject(_Utils_Tuple0),
			pairs));
};
var $elm$json$Json$Encode$string = _Json_wrap;
var $author$project$Model$Coach$newCoachEncoder = function (coach) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'name',
				$elm$json$Json$Encode$string(coach.name)),
				_Utils_Tuple2(
				'elo',
				$elm$json$Json$Encode$int(coach.elo))
			]));
};
var $author$project$Api$postRequest = F4(
	function (token, endpoint, body, expect) {
		return $elm$http$Http$request(
			{
				body: body,
				expect: expect,
				headers: _List_fromArray(
					[
						A2(
						$elm$http$Http$header,
						'Authorization',
						'Bearer ' + A2($elm$core$Maybe$withDefault, '', token))
					]),
				method: 'POST',
				timeout: $elm$core$Maybe$Nothing,
				tracker: $elm$core$Maybe$Nothing,
				url: $author$project$Api$urlOf(endpoint)
			});
	});
var $author$project$Page$AddCoach$submitCoach = F2(
	function (token, coach) {
		return A4(
			$author$project$Api$postRequest,
			token,
			$author$project$Api$Coaches,
			$elm$http$Http$jsonBody(
				$author$project$Model$Coach$newCoachEncoder(coach)),
			A2($elm$http$Http$expectJson, $author$project$Page$AddCoach$CoachSubmitted, $author$project$Model$Coach$coachDecoder));
	});
var $author$project$Page$AddCoach$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'NameChanged':
				var newName = msg.a;
				var rename = function (oldCoach) {
					return _Utils_update(
						oldCoach,
						{name: newName});
				};
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							coach: rename(model.coach)
						}),
					$elm$core$Platform$Cmd$none);
			case 'Submit':
				return _Utils_Tuple2(
					model,
					A2($author$project$Page$AddCoach$submitCoach, model.session.token, model.coach));
			default:
				if (msg.a.$ === 'Ok') {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{coach: $author$project$Model$Coach$defaultCoach, submitError: $elm$core$Maybe$Nothing}),
						$elm$core$Platform$Cmd$none);
				} else {
					var err = msg.a.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								submitError: $elm$core$Maybe$Just(
									$author$project$Error$buildErrorMessage(err))
							}),
						$elm$core$Platform$Cmd$none);
				}
		}
	});
var $author$project$Page$AddDivision$DivisionSubmitted = function (a) {
	return {$: 'DivisionSubmitted', a: a};
};
var $elm$json$Json$Encode$bool = _Json_wrap;
var $author$project$Model$Division$newDivisionEncoder = function (division) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'name',
				$elm$json$Json$Encode$string(division.name)),
				_Utils_Tuple2(
				'season',
				$elm$json$Json$Encode$int(division.season)),
				_Utils_Tuple2(
				'closed',
				$elm$json$Json$Encode$bool(division.closed))
			]));
};
var $author$project$Page$AddDivision$submitDivision = F2(
	function (token, div) {
		return A4(
			$author$project$Api$postRequest,
			token,
			$author$project$Api$Divisions,
			$elm$http$Http$jsonBody(
				$author$project$Model$Division$newDivisionEncoder(div)),
			A2($elm$http$Http$expectJson, $author$project$Page$AddDivision$DivisionSubmitted, $author$project$Model$Division$divisionDecoder));
	});
var $author$project$Page$AddDivision$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'NameChanged':
				var newName = msg.a;
				var rename = function (oldDiv) {
					return _Utils_update(
						oldDiv,
						{name: newName});
				};
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							division: rename(model.division)
						}),
					$elm$core$Platform$Cmd$none);
			case 'SeasonChanged':
				var newSeasonText = msg.a;
				var newSeason = A2(
					$elm$core$Maybe$withDefault,
					0,
					$elm$core$String$toInt(newSeasonText));
				var reseason = function (oldDiv) {
					return _Utils_update(
						oldDiv,
						{season: newSeason});
				};
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							division: reseason(model.division)
						}),
					$elm$core$Platform$Cmd$none);
			case 'Submit':
				return _Utils_Tuple2(
					model,
					A2($author$project$Page$AddDivision$submitDivision, model.session.token, model.division));
			default:
				if (msg.a.$ === 'Ok') {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{division: $author$project$Model$Division$defaultDivision, submitError: $elm$core$Maybe$Nothing}),
						$elm$core$Platform$Cmd$none);
				} else {
					var err = msg.a.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								submitError: $elm$core$Maybe$Just(
									$author$project$Error$buildErrorMessage(err))
							}),
						$elm$core$Platform$Cmd$none);
				}
		}
	});
var $elm$core$List$filter = F2(
	function (isGood, list) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, xs) {
					return isGood(x) ? A2($elm$core$List$cons, x, xs) : xs;
				}),
			_List_Nil,
			list);
	});
var $elm$core$List$head = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(x);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Page$AddGame$searchByIdString = F4(
	function (idString, stringFromId, defaultVal, list) {
		return A2(
			$elm$core$Maybe$withDefault,
			defaultVal,
			$elm$core$List$head(
				A2(
					$elm$core$List$filter,
					function (item) {
						return _Utils_eq(
							stringFromId(item.id),
							idString);
					},
					list)));
	});
var $author$project$Page$AddGame$getTeamForIdString = F2(
	function (data, idString) {
		if (data.$ === 'Success') {
			var teams = data.a;
			return A4($author$project$Page$AddGame$searchByIdString, idString, $author$project$Model$Team$idToString, $author$project$Model$Team$defaultTeam, teams);
		} else {
			return $author$project$Model$Team$defaultTeam;
		}
	});
var $author$project$Page$AddGame$TeamsRecieved = function (a) {
	return {$: 'TeamsRecieved', a: a};
};
var $author$project$Page$AddGame$getTeamsRequest = F2(
	function (token, divId) {
		return A3(
			$author$project$Api$getRequest,
			token,
			$author$project$Api$TeamsInDiv(divId),
			A2(
				$elm$http$Http$expectJson,
				A2($elm$core$Basics$composeR, $krisajenkins$remotedata$RemoteData$fromResult, $author$project$Page$AddGame$TeamsRecieved),
				$author$project$Model$Team$teamsDecoder));
	});
var $elm$core$Basics$not = _Basics_not;
var $author$project$Page$AddGame$reDiv = F3(
	function (game, data, divId) {
		if (data.$ === 'Success') {
			var divOptions = data.a;
			var newDiv = A4($author$project$Page$AddGame$searchByIdString, divId, $author$project$Model$Division$idToString, game.division, divOptions);
			return _Utils_update(
				game,
				{awayTeam: $author$project$Model$Team$defaultTeam, division: newDiv, homeTeam: $author$project$Model$Team$defaultTeam});
		} else {
			return game;
		}
	});
var $author$project$Page$AddGame$GameSubmitted = function (a) {
	return {$: 'GameSubmitted', a: a};
};
var $author$project$Api$Games = {$: 'Games'};
var $author$project$Model$Division$encodeId = function (_v0) {
	var id = _v0.a;
	return $elm$json$Json$Encode$int(id);
};
var $author$project$Model$Division$divisionEncoder = function (division) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'id',
				$author$project$Model$Division$encodeId(division.id)),
				_Utils_Tuple2(
				'name',
				$elm$json$Json$Encode$string(division.name)),
				_Utils_Tuple2(
				'season',
				$elm$json$Json$Encode$int(division.season)),
				_Utils_Tuple2(
				'closed',
				$elm$json$Json$Encode$bool(division.closed))
			]));
};
var $author$project$Model$Coach$encodeId = function (_v0) {
	var id = _v0.a;
	return $elm$json$Json$Encode$int(id);
};
var $author$project$Model$Coach$coachEncoder = function (coach) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'id',
				$author$project$Model$Coach$encodeId(coach.id)),
				_Utils_Tuple2(
				'name',
				$elm$json$Json$Encode$string(coach.name)),
				_Utils_Tuple2(
				'elo',
				$elm$json$Json$Encode$int(coach.elo))
			]));
};
var $author$project$Model$Team$encodeId = function (_v0) {
	var id = _v0.a;
	return $elm$json$Json$Encode$int(id);
};
var $author$project$Model$Race$encodeId = function (_v0) {
	var id = _v0.a;
	return $elm$json$Json$Encode$int(id);
};
var $author$project$Model$Race$raceEncoder = function (race) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'id',
				$author$project$Model$Race$encodeId(race.id)),
				_Utils_Tuple2(
				'name',
				$elm$json$Json$Encode$string(race.name))
			]));
};
var $author$project$Model$Team$teamEncoder = function (team) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'id',
				$author$project$Model$Team$encodeId(team.id)),
				_Utils_Tuple2(
				'name',
				$elm$json$Json$Encode$string(team.name)),
				_Utils_Tuple2(
				'race',
				$author$project$Model$Race$raceEncoder(team.race)),
				_Utils_Tuple2(
				'coach',
				$author$project$Model$Coach$coachEncoder(team.coach)),
				_Utils_Tuple2(
				'elo',
				$elm$json$Json$Encode$int(team.elo))
			]));
};
var $author$project$Model$Game$newGameEncoder = function (game) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'week',
				$elm$json$Json$Encode$int(game.week)),
				_Utils_Tuple2(
				'awayTeam',
				$author$project$Model$Team$teamEncoder(game.awayTeam)),
				_Utils_Tuple2(
				'homeTeam',
				$author$project$Model$Team$teamEncoder(game.homeTeam)),
				_Utils_Tuple2(
				'division',
				$author$project$Model$Division$divisionEncoder(game.division))
			]));
};
var $author$project$Page$AddGame$saveGame = F2(
	function (token, game) {
		return A4(
			$author$project$Api$postRequest,
			token,
			$author$project$Api$Games,
			$elm$http$Http$jsonBody(
				$author$project$Model$Game$newGameEncoder(game)),
			A2($elm$http$Http$expectJson, $author$project$Page$AddGame$GameSubmitted, $author$project$Model$Game$gameDecoder));
	});
var $author$project$Page$AddGame$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'DivisionsRecieved':
				if (msg.a.$ === 'Success') {
					var divisions = msg.a.a;
					var openDivs = A2(
						$elm$core$List$filter,
						function (div) {
							return !div.closed;
						},
						divisions);
					var newGame = A3(
						$author$project$Page$AddGame$reDiv,
						model.game,
						$krisajenkins$remotedata$RemoteData$Success(openDivs),
						model.defaultDivId);
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								divisionOptions: $krisajenkins$remotedata$RemoteData$Success(openDivs),
								game: newGame
							}),
						A2($author$project$Page$AddGame$getTeamsRequest, model.session.token, newGame.division.id));
				} else {
					var divisions = msg.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{divisionOptions: divisions}),
						$elm$core$Platform$Cmd$none);
				}
			case 'TeamsRecieved':
				var teams = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{teamOptions: teams}),
					$elm$core$Platform$Cmd$none);
			case 'Submit':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{saveError: $elm$core$Maybe$Nothing}),
					A2($author$project$Page$AddGame$saveGame, model.session.token, model.game));
			case 'GameSubmitted':
				if (msg.a.$ === 'Ok') {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{saveError: $elm$core$Maybe$Nothing}),
						A2(
							$author$project$Route$pushUrl,
							model.session.navkey,
							$author$project$Route$ViewDivision(model.game.division.id)));
				} else {
					var err = msg.a.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								saveError: $elm$core$Maybe$Just(
									$author$project$Error$buildErrorMessage(err))
							}),
						$elm$core$Platform$Cmd$none);
				}
			case 'WeekChanged':
				var newWeek = msg.a;
				var reWeek = F2(
					function (game, week) {
						return _Utils_update(
							game,
							{
								week: A2(
									$elm$core$Maybe$withDefault,
									0,
									$elm$core$String$toInt(week))
							});
					});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							game: A2(reWeek, model.game, newWeek)
						}),
					$elm$core$Platform$Cmd$none);
			case 'HomeScoreChanged':
				var newScore = msg.a;
				var reHomeScore = F2(
					function (game, score) {
						return _Utils_update(
							game,
							{
								homeScore: $elm$core$String$toInt(score)
							});
					});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							game: A2(reHomeScore, model.game, newScore)
						}),
					$elm$core$Platform$Cmd$none);
			case 'AwayScoreChanged':
				var newScore = msg.a;
				var reAwayScore = F2(
					function (game, score) {
						return _Utils_update(
							game,
							{
								awayScore: $elm$core$String$toInt(score)
							});
					});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							game: A2(reAwayScore, model.game, newScore)
						}),
					$elm$core$Platform$Cmd$none);
			case 'DivisionSelected':
				var newDiv = msg.a;
				var newGame = A3($author$project$Page$AddGame$reDiv, model.game, model.divisionOptions, newDiv);
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{game: newGame, teamOptions: $krisajenkins$remotedata$RemoteData$Loading}),
					A2($author$project$Page$AddGame$getTeamsRequest, model.session.token, newGame.division.id));
			case 'HomeTeamSelected':
				var teamId = msg.a;
				var reteam = function (game) {
					return _Utils_update(
						game,
						{
							homeTeam: A2($author$project$Page$AddGame$getTeamForIdString, model.teamOptions, teamId)
						});
				};
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							game: reteam(model.game)
						}),
					$elm$core$Platform$Cmd$none);
			default:
				var teamId = msg.a;
				var reteam = function (game) {
					return _Utils_update(
						game,
						{
							awayTeam: A2($author$project$Page$AddGame$getTeamForIdString, model.teamOptions, teamId)
						});
				};
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							game: reteam(model.game)
						}),
					$elm$core$Platform$Cmd$none);
		}
	});
var $author$project$Page$AddGameWeek$changeAwayTeam = F3(
	function (gameIndex, newTeam, games) {
		var changeIf = F2(
			function (game, index) {
				return _Utils_eq(index, gameIndex) ? _Utils_update(
					game,
					{awayTeam: newTeam}) : game;
			});
		return A3(
			$elm$core$List$map2,
			changeIf,
			games,
			A2(
				$elm$core$List$range,
				0,
				$elm$core$List$length(games)));
	});
var $author$project$Page$AddGameWeek$changeHomeTeam = F3(
	function (gameIndex, newTeam, games) {
		var changeIf = F2(
			function (game, index) {
				return _Utils_eq(index, gameIndex) ? _Utils_update(
					game,
					{homeTeam: newTeam}) : game;
			});
		return A3(
			$elm$core$List$map2,
			changeIf,
			games,
			A2(
				$elm$core$List$range,
				0,
				$elm$core$List$length(games)));
	});
var $author$project$Page$AddGameWeek$GameSubmitted = function (a) {
	return {$: 'GameSubmitted', a: a};
};
var $author$project$Page$AddGameWeek$saveGame = F2(
	function (token, game) {
		return A4(
			$author$project$Api$postRequest,
			token,
			$author$project$Api$Games,
			$elm$http$Http$jsonBody(
				$author$project$Model$Game$newGameEncoder(game)),
			A2($elm$http$Http$expectJson, $author$project$Page$AddGameWeek$GameSubmitted, $author$project$Model$Game$gameDecoder));
	});
var $author$project$Page$AddGameWeek$saveGames = F2(
	function (token, games) {
		return $elm$core$Platform$Cmd$batch(
			A2(
				$elm$core$List$map,
				$author$project$Page$AddGameWeek$saveGame(token),
				games));
	});
var $author$project$Page$AddGameWeek$searchByIdString = F4(
	function (idString, stringFromId, defaultVal, listData) {
		if (listData.$ === 'Success') {
			var list = listData.a;
			return A2(
				$elm$core$Maybe$withDefault,
				defaultVal,
				$elm$core$List$head(
					A2(
						$elm$core$List$filter,
						function (item) {
							return _Utils_eq(
								stringFromId(item.id),
								idString);
						},
						list)));
		} else {
			return defaultVal;
		}
	});
var $elm$core$List$repeatHelp = F3(
	function (result, n, value) {
		repeatHelp:
		while (true) {
			if (n <= 0) {
				return result;
			} else {
				var $temp$result = A2($elm$core$List$cons, value, result),
					$temp$n = n - 1,
					$temp$value = value;
				result = $temp$result;
				n = $temp$n;
				value = $temp$value;
				continue repeatHelp;
			}
		}
	});
var $elm$core$List$repeat = F2(
	function (n, value) {
		return A3($elm$core$List$repeatHelp, _List_Nil, n, value);
	});
var $author$project$Page$AddGameWeek$tryCreateGames = F3(
	function (week, divData, teamsData) {
		if (divData.$ === 'Success') {
			var div = divData.a;
			if (teamsData.$ === 'Success') {
				var teams = teamsData.a;
				var gameCount = ($elm$core$List$length(teams) / 2) | 0;
				return A2(
					$elm$core$List$repeat,
					gameCount,
					_Utils_update(
						$author$project$Model$Game$defaultGame,
						{division: div, week: week}));
			} else {
				return _List_Nil;
			}
		} else {
			return _List_Nil;
		}
	});
var $author$project$Page$AddGameWeek$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'DivisionRecieved':
				var division = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							division: division,
							games: A3($author$project$Page$AddGameWeek$tryCreateGames, model.week, division, model.teams)
						}),
					$elm$core$Platform$Cmd$none);
			case 'TeamsRecieved':
				var teams = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							games: A3($author$project$Page$AddGameWeek$tryCreateGames, model.week, model.division, teams),
							teams: teams
						}),
					$elm$core$Platform$Cmd$none);
			case 'HomeTeamSelected':
				var gameIndex = msg.a;
				var teamId = msg.b;
				var newTeam = A4($author$project$Page$AddGameWeek$searchByIdString, teamId, $author$project$Model$Team$idToString, $author$project$Model$Team$defaultTeam, model.teams);
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							games: A3($author$project$Page$AddGameWeek$changeHomeTeam, gameIndex, newTeam, model.games)
						}),
					$elm$core$Platform$Cmd$none);
			case 'AwayTeamSelected':
				var gameIndex = msg.a;
				var teamId = msg.b;
				var newTeam = A4($author$project$Page$AddGameWeek$searchByIdString, teamId, $author$project$Model$Team$idToString, $author$project$Model$Team$defaultTeam, model.teams);
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							games: A3($author$project$Page$AddGameWeek$changeAwayTeam, gameIndex, newTeam, model.games)
						}),
					$elm$core$Platform$Cmd$none);
			case 'Submit':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{submitErrors: _List_Nil}),
					A2($author$project$Page$AddGameWeek$saveGames, model.session.token, model.games));
			default:
				if (msg.a.$ === 'Ok') {
					var newSuccesses = model.successes + 1;
					var newCmd = _Utils_eq(
						newSuccesses,
						$elm$core$List$length(model.games)) ? A2(
						$author$project$Route$pushUrl,
						model.session.navkey,
						$author$project$Route$ViewDivision(model.divId)) : $elm$core$Platform$Cmd$none;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{successes: newSuccesses}),
						newCmd);
				} else {
					var err = msg.a.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								submitErrors: A2(
									$elm$core$List$cons,
									$author$project$Error$buildErrorMessage(err),
									model.submitErrors)
							}),
						$elm$core$Platform$Cmd$none);
				}
		}
	});
var $author$project$Page$AddTeam$searchByIdString = F4(
	function (idString, stringFromId, defaultVal, list) {
		return A2(
			$elm$core$Maybe$withDefault,
			defaultVal,
			$elm$core$List$head(
				A2(
					$elm$core$List$filter,
					function (item) {
						return _Utils_eq(
							stringFromId(item.id),
							idString);
					},
					list)));
	});
var $author$project$Page$AddTeam$TeamSubmitted = function (a) {
	return {$: 'TeamSubmitted', a: a};
};
var $author$project$Model$Team$newTeamEncoder = function (team) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'name',
				$elm$json$Json$Encode$string(team.name)),
				_Utils_Tuple2(
				'race',
				$author$project$Model$Race$raceEncoder(team.race)),
				_Utils_Tuple2(
				'coach',
				$author$project$Model$Coach$coachEncoder(team.coach)),
				_Utils_Tuple2(
				'elo',
				$elm$json$Json$Encode$int(team.elo))
			]));
};
var $author$project$Page$AddTeam$submitTeam = F2(
	function (token, team) {
		return A4(
			$author$project$Api$postRequest,
			token,
			$author$project$Api$Teams,
			$elm$http$Http$jsonBody(
				$author$project$Model$Team$newTeamEncoder(team)),
			A2($elm$http$Http$expectJson, $author$project$Page$AddTeam$TeamSubmitted, $author$project$Model$Team$teamDecoder));
	});
var $author$project$Page$AddTeam$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'RacesRecieved':
				var response = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{raceOptions: response}),
					$elm$core$Platform$Cmd$none);
			case 'CoachesReceived':
				var response = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{coachOptions: response}),
					$elm$core$Platform$Cmd$none);
			case 'NameChanged':
				var newName = msg.a;
				var rename = function (oldTeam) {
					return _Utils_update(
						oldTeam,
						{name: newName});
				};
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							team: rename(model.team)
						}),
					$elm$core$Platform$Cmd$none);
			case 'RaceSelected':
				var idString = msg.a;
				var newRace = function () {
					var _v1 = model.raceOptions;
					if (_v1.$ === 'Success') {
						var races = _v1.a;
						return A4($author$project$Page$AddTeam$searchByIdString, idString, $author$project$Model$Race$idToString, model.team.race, races);
					} else {
						return model.team.race;
					}
				}();
				var changeRace = function (oldTeam) {
					return _Utils_update(
						oldTeam,
						{race: newRace});
				};
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							team: changeRace(model.team)
						}),
					$elm$core$Platform$Cmd$none);
			case 'CoachSelected':
				var idString = msg.a;
				var newCoach = function () {
					var _v2 = model.coachOptions;
					if (_v2.$ === 'Success') {
						var coaches = _v2.a;
						return A4($author$project$Page$AddTeam$searchByIdString, idString, $author$project$Model$Coach$idToString, model.team.coach, coaches);
					} else {
						return model.team.coach;
					}
				}();
				var changeCoach = function (oldTeam) {
					return _Utils_update(
						oldTeam,
						{coach: newCoach});
				};
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							team: changeCoach(model.team)
						}),
					$elm$core$Platform$Cmd$none);
			case 'Submit':
				return _Utils_Tuple2(
					model,
					A2($author$project$Page$AddTeam$submitTeam, model.session.token, model.team));
			default:
				if (msg.a.$ === 'Ok') {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{submitError: $elm$core$Maybe$Nothing, team: $author$project$Model$Team$defaultTeam}),
						$elm$core$Platform$Cmd$none);
				} else {
					var err = msg.a.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								submitError: $elm$core$Maybe$Just(
									$author$project$Error$buildErrorMessage(err))
							}),
						$elm$core$Platform$Cmd$none);
				}
		}
	});
var $author$project$Page$AddTeamToDiv$getNewTeamId = F2(
	function (teams, possibleId) {
		return A2(
			$elm$core$Maybe$andThen,
			function (team) {
				return $elm$core$Maybe$Just(team.id);
			},
			$elm$core$List$head(
				A2(
					$elm$core$List$filter,
					function (team) {
						return _Utils_eq(
							$author$project$Model$Team$idToString(team.id),
							possibleId);
					},
					teams)));
	});
var $author$project$Page$AddTeamToDiv$TeamDivSubmitted = function (a) {
	return {$: 'TeamDivSubmitted', a: a};
};
var $author$project$Api$TeamUpdateDiv = F2(
	function (a, b) {
		return {$: 'TeamUpdateDiv', a: a, b: b};
	});
var $elm$http$Http$expectString = function (toMsg) {
	return A2(
		$elm$http$Http$expectStringResponse,
		toMsg,
		$elm$http$Http$resolve($elm$core$Result$Ok));
};
var $author$project$Page$AddTeamToDiv$addTeamToDiv = F3(
	function (token, teamId, divId) {
		return A4(
			$author$project$Api$postRequest,
			token,
			A2($author$project$Api$TeamUpdateDiv, teamId, divId),
			$elm$http$Http$emptyBody,
			$elm$http$Http$expectString($author$project$Page$AddTeamToDiv$TeamDivSubmitted));
	});
var $author$project$Page$AddTeamToDiv$trySubmit = F3(
	function (token, maybeTeamId, divId) {
		if (maybeTeamId.$ === 'Just') {
			var teamId = maybeTeamId.a;
			return A3($author$project$Page$AddTeamToDiv$addTeamToDiv, token, teamId, divId);
		} else {
			return $elm$core$Platform$Cmd$none;
		}
	});
var $author$project$Page$AddTeamToDiv$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'TeamsReceived':
				var response = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{teams: response}),
					$elm$core$Platform$Cmd$none);
			case 'DivisionReceived':
				var response = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{division: response}),
					$elm$core$Platform$Cmd$none);
			case 'TeamSelected':
				var idString = msg.a;
				var newTeamId = function () {
					var _v1 = model.teams;
					if (_v1.$ === 'Success') {
						var teams = _v1.a;
						return A2($author$project$Page$AddTeamToDiv$getNewTeamId, teams, idString);
					} else {
						return model.selectedTeamId;
					}
				}();
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{selectedTeamId: newTeamId}),
					$elm$core$Platform$Cmd$none);
			case 'Submit':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{selectedTeamId: $elm$core$Maybe$Nothing}),
					A3($author$project$Page$AddTeamToDiv$trySubmit, model.session.token, model.selectedTeamId, model.divisionId));
			default:
				if (msg.a.$ === 'Ok') {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{saveError: $elm$core$Maybe$Nothing}),
						A2(
							$author$project$Route$pushUrl,
							model.session.navkey,
							$author$project$Route$ViewDivision(model.divisionId)));
				} else {
					var err = msg.a.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								saveError: $elm$core$Maybe$Just(
									$author$project$Error$buildErrorMessage(err))
							}),
						$elm$core$Platform$Cmd$none);
				}
		}
	});
var $author$project$Page$EditCoach$rename = F2(
	function (coach, newName) {
		if (coach.$ === 'Success') {
			var oldCoach = coach.a;
			return $krisajenkins$remotedata$RemoteData$Success(
				_Utils_update(
					oldCoach,
					{name: newName}));
		} else {
			return coach;
		}
	});
var $author$project$Page$EditCoach$CoachSubmitted = function (a) {
	return {$: 'CoachSubmitted', a: a};
};
var $author$project$Api$putRequest = F4(
	function (token, endpoint, body, expect) {
		return $elm$http$Http$request(
			{
				body: body,
				expect: expect,
				headers: _List_fromArray(
					[
						A2(
						$elm$http$Http$header,
						'Authorization',
						'Bearer ' + A2($elm$core$Maybe$withDefault, '', token))
					]),
				method: 'PUT',
				timeout: $elm$core$Maybe$Nothing,
				tracker: $elm$core$Maybe$Nothing,
				url: $author$project$Api$urlOf(endpoint)
			});
	});
var $author$project$Page$EditCoach$saveCoach = F2(
	function (token, coach) {
		return A4(
			$author$project$Api$putRequest,
			token,
			$author$project$Api$Coach(coach.id),
			$elm$http$Http$jsonBody(
				$author$project$Model$Coach$coachEncoder(coach)),
			A2($elm$http$Http$expectJson, $author$project$Page$EditCoach$CoachSubmitted, $author$project$Model$Coach$coachDecoder));
	});
var $author$project$Page$EditCoach$trySaveCoach = function (model) {
	var _v0 = model.coach;
	if (_v0.$ === 'Success') {
		var coach = _v0.a;
		return _Utils_Tuple2(
			_Utils_update(
				model,
				{saveError: $elm$core$Maybe$Nothing}),
			A2($author$project$Page$EditCoach$saveCoach, model.session.token, coach));
	} else {
		return _Utils_Tuple2(
			_Utils_update(
				model,
				{
					saveError: $elm$core$Maybe$Just('Cannot submit data, please refresh page and try again.')
				}),
			$elm$core$Platform$Cmd$none);
	}
};
var $author$project$Page$EditCoach$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'CoachReceived':
				var response = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{coach: response}),
					$elm$core$Platform$Cmd$none);
			case 'NameChanged':
				var newName = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							coach: A2($author$project$Page$EditCoach$rename, model.coach, newName)
						}),
					$elm$core$Platform$Cmd$none);
			case 'Submit':
				return $author$project$Page$EditCoach$trySaveCoach(model);
			default:
				if (msg.a.$ === 'Ok') {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{saveError: $elm$core$Maybe$Nothing}),
						A2($author$project$Route$pushUrl, model.session.navkey, $author$project$Route$Coaches));
				} else {
					var err = msg.a.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								saveError: $elm$core$Maybe$Just(
									$author$project$Error$buildErrorMessage(err))
							}),
						$elm$core$Platform$Cmd$none);
				}
		}
	});
var $author$project$Page$EditDivision$rename = F2(
	function (division, newName) {
		if (division.$ === 'Success') {
			var oldDivision = division.a;
			return $krisajenkins$remotedata$RemoteData$Success(
				_Utils_update(
					oldDivision,
					{name: newName}));
		} else {
			return division;
		}
	});
var $author$project$Page$EditDivision$reseason = F2(
	function (division, newSeasonText) {
		if (division.$ === 'Success') {
			var oldDivision = division.a;
			var newSeason = A2(
				$elm$core$Maybe$withDefault,
				0,
				$elm$core$String$toInt(newSeasonText));
			return $krisajenkins$remotedata$RemoteData$Success(
				_Utils_update(
					oldDivision,
					{season: newSeason}));
		} else {
			return division;
		}
	});
var $author$project$Page$EditDivision$DivisionSubmitted = function (a) {
	return {$: 'DivisionSubmitted', a: a};
};
var $author$project$Page$EditDivision$saveDivision = F2(
	function (token, division) {
		return A4(
			$author$project$Api$putRequest,
			token,
			$author$project$Api$Division(division.id),
			$elm$http$Http$jsonBody(
				$author$project$Model$Division$divisionEncoder(division)),
			A2($elm$http$Http$expectJson, $author$project$Page$EditDivision$DivisionSubmitted, $author$project$Model$Division$divisionDecoder));
	});
var $author$project$Page$EditDivision$trySaveDivision = function (model) {
	var _v0 = model.division;
	if (_v0.$ === 'Success') {
		var division = _v0.a;
		return _Utils_Tuple2(
			_Utils_update(
				model,
				{saveError: $elm$core$Maybe$Nothing}),
			A2($author$project$Page$EditDivision$saveDivision, model.session.token, division));
	} else {
		return _Utils_Tuple2(
			_Utils_update(
				model,
				{
					saveError: $elm$core$Maybe$Just('Cannot submit data, please refresh page and try again.')
				}),
			$elm$core$Platform$Cmd$none);
	}
};
var $author$project$Page$EditDivision$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'DivisionReceived':
				var response = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{division: response}),
					$elm$core$Platform$Cmd$none);
			case 'NameChanged':
				var newName = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							division: A2($author$project$Page$EditDivision$rename, model.division, newName)
						}),
					$elm$core$Platform$Cmd$none);
			case 'SeasonChanged':
				var newSeason = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							division: A2($author$project$Page$EditDivision$reseason, model.division, newSeason)
						}),
					$elm$core$Platform$Cmd$none);
			case 'Submit':
				return $author$project$Page$EditDivision$trySaveDivision(model);
			default:
				if (msg.a.$ === 'Ok') {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{saveError: $elm$core$Maybe$Nothing}),
						A2($author$project$Route$pushUrl, model.session.navkey, $author$project$Route$Divisions));
				} else {
					var err = msg.a.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								saveError: $elm$core$Maybe$Just(
									$author$project$Error$buildErrorMessage(err))
							}),
						$elm$core$Platform$Cmd$none);
				}
		}
	});
var $author$project$Page$EditGame$getNextPage = function (data) {
	if (data.$ === 'Success') {
		var game = data.a;
		return $author$project$Route$ViewDivision(game.division.id);
	} else {
		return $author$project$Route$Divisions;
	}
};
var $author$project$Page$EditGame$reAwayScore = F2(
	function (data, score) {
		if (data.$ === 'Success') {
			var game = data.a;
			return $krisajenkins$remotedata$RemoteData$Success(
				_Utils_update(
					game,
					{
						awayScore: $elm$core$String$toInt(score)
					}));
		} else {
			return data;
		}
	});
var $author$project$Page$EditGame$reHomeScore = F2(
	function (data, score) {
		if (data.$ === 'Success') {
			var game = data.a;
			return $krisajenkins$remotedata$RemoteData$Success(
				_Utils_update(
					game,
					{
						homeScore: $elm$core$String$toInt(score)
					}));
		} else {
			return data;
		}
	});
var $author$project$Page$EditGame$reWeek = F2(
	function (data, week) {
		if (data.$ === 'Success') {
			var game = data.a;
			var newWeek = A2(
				$elm$core$Maybe$withDefault,
				0,
				$elm$core$String$toInt(week));
			return $krisajenkins$remotedata$RemoteData$Success(
				_Utils_update(
					game,
					{week: newWeek}));
		} else {
			return data;
		}
	});
var $author$project$Page$EditGame$GameSubmitted = function (a) {
	return {$: 'GameSubmitted', a: a};
};
var $author$project$Model$Game$encodeId = function (_v0) {
	var id = _v0.a;
	return $elm$json$Json$Encode$int(id);
};
var $elm$json$Json$Encode$null = _Json_encodeNull;
var $author$project$Model$Game$encodeMaybeInt = function (maybeInt) {
	return A2(
		$elm$core$Maybe$withDefault,
		$elm$json$Json$Encode$null,
		A2($elm$core$Maybe$map, $elm$json$Json$Encode$int, maybeInt));
};
var $author$project$Model$Game$gameEncoder = function (game) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'id',
				$author$project$Model$Game$encodeId(game.id)),
				_Utils_Tuple2(
				'awayScore',
				$author$project$Model$Game$encodeMaybeInt(game.awayScore)),
				_Utils_Tuple2(
				'homeScore',
				$author$project$Model$Game$encodeMaybeInt(game.homeScore)),
				_Utils_Tuple2(
				'week',
				$elm$json$Json$Encode$int(game.week)),
				_Utils_Tuple2(
				'awayTeam',
				$author$project$Model$Team$teamEncoder(game.awayTeam)),
				_Utils_Tuple2(
				'homeTeam',
				$author$project$Model$Team$teamEncoder(game.homeTeam)),
				_Utils_Tuple2(
				'division',
				$author$project$Model$Division$divisionEncoder(game.division))
			]));
};
var $author$project$Page$EditGame$saveGame = F2(
	function (token, game) {
		return A4(
			$author$project$Api$putRequest,
			token,
			$author$project$Api$Game(game.id),
			$elm$http$Http$jsonBody(
				$author$project$Model$Game$gameEncoder(game)),
			A2($elm$http$Http$expectJson, $author$project$Page$EditGame$GameSubmitted, $author$project$Model$Game$gameDecoder));
	});
var $author$project$Page$EditGame$trySaveGame = function (model) {
	var _v0 = model.game;
	if (_v0.$ === 'Success') {
		var game = _v0.a;
		return _Utils_Tuple2(
			_Utils_update(
				model,
				{saveError: $elm$core$Maybe$Nothing}),
			A2($author$project$Page$EditGame$saveGame, model.session.token, game));
	} else {
		return _Utils_Tuple2(
			_Utils_update(
				model,
				{
					saveError: $elm$core$Maybe$Just('Cannot submit data, please refresh page and try again.')
				}),
			$elm$core$Platform$Cmd$none);
	}
};
var $author$project$Page$EditGame$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'GameReceived':
				var response = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{game: response}),
					$elm$core$Platform$Cmd$none);
			case 'Submit':
				return $author$project$Page$EditGame$trySaveGame(model);
			case 'GameSubmitted':
				if (msg.a.$ === 'Ok') {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{saveError: $elm$core$Maybe$Nothing}),
						A2(
							$author$project$Route$pushUrl,
							model.session.navkey,
							$author$project$Page$EditGame$getNextPage(model.game)));
				} else {
					var err = msg.a.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								saveError: $elm$core$Maybe$Just(
									$author$project$Error$buildErrorMessage(err))
							}),
						$elm$core$Platform$Cmd$none);
				}
			case 'WeekChanged':
				var newWeek = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							game: A2($author$project$Page$EditGame$reWeek, model.game, newWeek)
						}),
					$elm$core$Platform$Cmd$none);
			case 'HomeScoreChanged':
				var newScore = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							game: A2($author$project$Page$EditGame$reHomeScore, model.game, newScore)
						}),
					$elm$core$Platform$Cmd$none);
			default:
				var newScore = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							game: A2($author$project$Page$EditGame$reAwayScore, model.game, newScore)
						}),
					$elm$core$Platform$Cmd$none);
		}
	});
var $author$project$Page$EditTeam$rename = F2(
	function (team, newName) {
		if (team.$ === 'Success') {
			var oldTeam = team.a;
			return $krisajenkins$remotedata$RemoteData$Success(
				_Utils_update(
					oldTeam,
					{name: newName}));
		} else {
			return team;
		}
	});
var $author$project$Page$EditTeam$TeamSubmitted = function (a) {
	return {$: 'TeamSubmitted', a: a};
};
var $author$project$Page$EditTeam$saveTeam = F2(
	function (token, team) {
		return A4(
			$author$project$Api$putRequest,
			token,
			$author$project$Api$Team(team.id),
			$elm$http$Http$jsonBody(
				$author$project$Model$Team$teamEncoder(team)),
			A2($elm$http$Http$expectJson, $author$project$Page$EditTeam$TeamSubmitted, $author$project$Model$Team$teamDecoder));
	});
var $author$project$Page$EditTeam$trySaveTeam = function (model) {
	var _v0 = model.team;
	if (_v0.$ === 'Success') {
		var team = _v0.a;
		return _Utils_Tuple2(
			_Utils_update(
				model,
				{saveError: $elm$core$Maybe$Nothing}),
			A2($author$project$Page$EditTeam$saveTeam, model.session.token, team));
	} else {
		return _Utils_Tuple2(
			_Utils_update(
				model,
				{
					saveError: $elm$core$Maybe$Just('Cannot submit data, please refresh page and try again.')
				}),
			$elm$core$Platform$Cmd$none);
	}
};
var $author$project$Page$EditTeam$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'TeamReceived':
				var response = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{team: response}),
					$elm$core$Platform$Cmd$none);
			case 'NameChanged':
				var newName = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							team: A2($author$project$Page$EditTeam$rename, model.team, newName)
						}),
					$elm$core$Platform$Cmd$none);
			case 'CoachLinkClicked':
				var id = msg.a;
				return _Utils_Tuple2(
					model,
					A2(
						$author$project$Route$pushUrl,
						model.session.navkey,
						$author$project$Route$EditCoach(id)));
			case 'Submit':
				return $author$project$Page$EditTeam$trySaveTeam(model);
			default:
				if (msg.a.$ === 'Ok') {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{saveError: $elm$core$Maybe$Nothing}),
						A2($author$project$Route$pushUrl, model.session.navkey, $author$project$Route$Teams));
				} else {
					var err = msg.a.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								saveError: $elm$core$Maybe$Just(
									$author$project$Error$buildErrorMessage(err))
							}),
						$elm$core$Platform$Cmd$none);
				}
		}
	});
var $author$project$Page$ListCoaches$Elo = {$: 'Elo'};
var $author$project$Page$ListCoaches$EloDesc = {$: 'EloDesc'};
var $author$project$Page$ListCoaches$Name = {$: 'Name'};
var $author$project$Page$ListCoaches$NameDesc = {$: 'NameDesc'};
var $author$project$Page$ListCoaches$buildDeleteError = function (res) {
	return res.deleted ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just('Delete Failed. Coaches cannot be deleted before their last team.');
};
var $author$project$Page$ListCoaches$CoachDeleted = function (a) {
	return {$: 'CoachDeleted', a: a};
};
var $author$project$Api$deleteRequest = F3(
	function (token, endpoint, expect) {
		return $elm$http$Http$request(
			{
				body: $elm$http$Http$emptyBody,
				expect: expect,
				headers: _List_fromArray(
					[
						A2(
						$elm$http$Http$header,
						'Authorization',
						'Bearer ' + A2($elm$core$Maybe$withDefault, '', token))
					]),
				method: 'DELETE',
				timeout: $elm$core$Maybe$Nothing,
				tracker: $elm$core$Maybe$Nothing,
				url: $author$project$Api$urlOf(endpoint)
			});
	});
var $author$project$Model$DeleteResponse$DeleteResponse = function (deleted) {
	return {deleted: deleted};
};
var $author$project$Model$DeleteResponse$deleteResponseDecoder = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'deleted',
	$elm$json$Json$Decode$bool,
	$elm$json$Json$Decode$succeed($author$project$Model$DeleteResponse$DeleteResponse));
var $author$project$Page$ListCoaches$deleteCoachRequest = F2(
	function (token, id) {
		return A3(
			$author$project$Api$deleteRequest,
			token,
			$author$project$Api$Coach(id),
			A2($elm$http$Http$expectJson, $author$project$Page$ListCoaches$CoachDeleted, $author$project$Model$DeleteResponse$deleteResponseDecoder));
	});
var $author$project$Page$ListCoaches$newSort = F3(
	function (_default, alt, oldSort) {
		return _Utils_eq(oldSort, _default) ? alt : _default;
	});
var $author$project$Page$ListCoaches$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'FetchCoaches':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{coaches: $krisajenkins$remotedata$RemoteData$Loading}),
					$author$project$Page$ListCoaches$getCoachesRequest(model.session.token));
			case 'CoachesRecieved':
				var response = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{coaches: response}),
					$elm$core$Platform$Cmd$none);
			case 'AddCoachButtonClick':
				return _Utils_Tuple2(
					model,
					A2($author$project$Route$pushUrl, model.session.navkey, $author$project$Route$AddCoach));
			case 'EditCoachButtonClick':
				var id = msg.a;
				return _Utils_Tuple2(
					model,
					A2(
						$author$project$Route$pushUrl,
						model.session.navkey,
						$author$project$Route$EditCoach(id)));
			case 'DeleteCoachButtonClick':
				var id = msg.a;
				return _Utils_Tuple2(
					model,
					A2($author$project$Page$ListCoaches$deleteCoachRequest, model.session.token, id));
			case 'CoachDeleted':
				if (msg.a.$ === 'Ok') {
					var res = msg.a.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								deleteError: $author$project$Page$ListCoaches$buildDeleteError(res)
							}),
						$author$project$Page$ListCoaches$getCoachesRequest(model.session.token));
				} else {
					var err = msg.a.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								deleteError: $elm$core$Maybe$Just(
									$author$project$Error$buildErrorMessage(err))
							}),
						$elm$core$Platform$Cmd$none);
				}
			case 'NameSortClick':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							sortingMethod: A3($author$project$Page$ListCoaches$newSort, $author$project$Page$ListCoaches$Name, $author$project$Page$ListCoaches$NameDesc, model.sortingMethod)
						}),
					$elm$core$Platform$Cmd$none);
			default:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							sortingMethod: A3($author$project$Page$ListCoaches$newSort, $author$project$Page$ListCoaches$Elo, $author$project$Page$ListCoaches$EloDesc, model.sortingMethod)
						}),
					$elm$core$Platform$Cmd$none);
		}
	});
var $author$project$Page$ListDivisions$Name = {$: 'Name'};
var $author$project$Page$ListDivisions$NameDesc = {$: 'NameDesc'};
var $author$project$Page$ListDivisions$Season = {$: 'Season'};
var $author$project$Page$ListDivisions$SeasonDesc = {$: 'SeasonDesc'};
var $author$project$Page$ListDivisions$buildDeleteError = function (res) {
	return res.deleted ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just('Delete Failed. If this div ever had teams assigned it cannot be deleted.');
};
var $author$project$Page$ListDivisions$DivisionDeleted = function (a) {
	return {$: 'DivisionDeleted', a: a};
};
var $author$project$Page$ListDivisions$deleteDivisionRequest = F2(
	function (token, id) {
		return A3(
			$author$project$Api$deleteRequest,
			token,
			$author$project$Api$Division(id),
			A2($elm$http$Http$expectJson, $author$project$Page$ListDivisions$DivisionDeleted, $author$project$Model$DeleteResponse$deleteResponseDecoder));
	});
var $author$project$Page$ListDivisions$newSort = F3(
	function (_default, alt, oldSort) {
		return _Utils_eq(oldSort, _default) ? alt : _default;
	});
var $author$project$Page$ListDivisions$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'FetchDivisions':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{divisions: $krisajenkins$remotedata$RemoteData$Loading}),
					$author$project$Page$ListDivisions$getDivisionsRequest(model.session.token));
			case 'DivisionsRecieved':
				var response = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{divisions: response}),
					$elm$core$Platform$Cmd$none);
			case 'AddDivisionButtonClick':
				return _Utils_Tuple2(
					model,
					A2($author$project$Route$pushUrl, model.session.navkey, $author$project$Route$AddDivision));
			case 'EditDivisionButtonClick':
				var id = msg.a;
				return _Utils_Tuple2(
					model,
					A2(
						$author$project$Route$pushUrl,
						model.session.navkey,
						$author$project$Route$EditDivision(id)));
			case 'ViewDivisionButtonClick':
				var id = msg.a;
				return _Utils_Tuple2(
					model,
					A2(
						$author$project$Route$pushUrl,
						model.session.navkey,
						$author$project$Route$ViewDivision(id)));
			case 'DeleteDivisionButtonClick':
				var id = msg.a;
				return _Utils_Tuple2(
					model,
					A2($author$project$Page$ListDivisions$deleteDivisionRequest, model.session.token, id));
			case 'DivisionDeleted':
				if (msg.a.$ === 'Ok') {
					var res = msg.a.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								deleteError: $author$project$Page$ListDivisions$buildDeleteError(res)
							}),
						$author$project$Page$ListDivisions$getDivisionsRequest(model.session.token));
				} else {
					var err = msg.a.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								deleteError: $elm$core$Maybe$Just(
									$author$project$Error$buildErrorMessage(err))
							}),
						$elm$core$Platform$Cmd$none);
				}
			case 'NameSortClick':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							sortingMethod: A3($author$project$Page$ListDivisions$newSort, $author$project$Page$ListDivisions$Name, $author$project$Page$ListDivisions$NameDesc, model.sortingMethod)
						}),
					$elm$core$Platform$Cmd$none);
			default:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							sortingMethod: A3($author$project$Page$ListDivisions$newSort, $author$project$Page$ListDivisions$Season, $author$project$Page$ListDivisions$SeasonDesc, model.sortingMethod)
						}),
					$elm$core$Platform$Cmd$none);
		}
	});
var $author$project$Page$ListTeams$Coach = {$: 'Coach'};
var $author$project$Page$ListTeams$CoachDesc = {$: 'CoachDesc'};
var $author$project$Page$ListTeams$Elo = {$: 'Elo'};
var $author$project$Page$ListTeams$EloDesc = {$: 'EloDesc'};
var $author$project$Page$ListTeams$Name = {$: 'Name'};
var $author$project$Page$ListTeams$NameDesc = {$: 'NameDesc'};
var $author$project$Page$ListTeams$Race = {$: 'Race'};
var $author$project$Page$ListTeams$RaceDesc = {$: 'RaceDesc'};
var $author$project$Page$ListTeams$buildDeleteError = function (res) {
	return res.deleted ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just('Delete Failed. Team not found.');
};
var $author$project$Page$ListTeams$TeamDeleted = function (a) {
	return {$: 'TeamDeleted', a: a};
};
var $author$project$Page$ListTeams$deleteTeamRequest = F2(
	function (token, id) {
		return A3(
			$author$project$Api$deleteRequest,
			token,
			$author$project$Api$Team(id),
			A2($elm$http$Http$expectJson, $author$project$Page$ListTeams$TeamDeleted, $author$project$Model$DeleteResponse$deleteResponseDecoder));
	});
var $author$project$Page$ListTeams$newSort = F3(
	function (_default, alt, oldSort) {
		return _Utils_eq(oldSort, _default) ? alt : _default;
	});
var $author$project$Page$ListTeams$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'FetchTeams':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{teams: $krisajenkins$remotedata$RemoteData$Loading}),
					$author$project$Page$ListTeams$getTeamsRequest(model.session.token));
			case 'TeamsReceived':
				var response = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{teams: response}),
					$elm$core$Platform$Cmd$none);
			case 'AddTeamButtonClick':
				return _Utils_Tuple2(
					model,
					A2($author$project$Route$pushUrl, model.session.navkey, $author$project$Route$AddTeam));
			case 'EditTeamButtonClick':
				var id = msg.a;
				return _Utils_Tuple2(
					model,
					A2(
						$author$project$Route$pushUrl,
						model.session.navkey,
						$author$project$Route$EditTeam(id)));
			case 'DeleteTeamButtonClick':
				var id = msg.a;
				return _Utils_Tuple2(
					model,
					A2($author$project$Page$ListTeams$deleteTeamRequest, model.session.token, id));
			case 'TeamDeleted':
				if (msg.a.$ === 'Ok') {
					var res = msg.a.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								deleteError: $author$project$Page$ListTeams$buildDeleteError(res)
							}),
						$author$project$Page$ListTeams$getTeamsRequest(model.session.token));
				} else {
					var err = msg.a.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								deleteError: $elm$core$Maybe$Just(
									$author$project$Error$buildErrorMessage(err))
							}),
						$elm$core$Platform$Cmd$none);
				}
			case 'NameSortClick':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							sortingMethod: A3($author$project$Page$ListTeams$newSort, $author$project$Page$ListTeams$Name, $author$project$Page$ListTeams$NameDesc, model.sortingMethod)
						}),
					$elm$core$Platform$Cmd$none);
			case 'RaceSortClick':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							sortingMethod: A3($author$project$Page$ListTeams$newSort, $author$project$Page$ListTeams$Race, $author$project$Page$ListTeams$RaceDesc, model.sortingMethod)
						}),
					$elm$core$Platform$Cmd$none);
			case 'CoachSortClick':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							sortingMethod: A3($author$project$Page$ListTeams$newSort, $author$project$Page$ListTeams$Coach, $author$project$Page$ListTeams$CoachDesc, model.sortingMethod)
						}),
					$elm$core$Platform$Cmd$none);
			default:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							sortingMethod: A3($author$project$Page$ListTeams$newSort, $author$project$Page$ListTeams$Elo, $author$project$Page$ListTeams$EloDesc, model.sortingMethod)
						}),
					$elm$core$Platform$Cmd$none);
		}
	});
var $author$project$Page$Signin$ChangeToken = function (a) {
	return {$: 'ChangeToken', a: a};
};
var $author$project$Api$Signin = {$: 'Signin'};
var $author$project$Page$Signin$Submitted = function (a) {
	return {$: 'Submitted', a: a};
};
var $elm$core$Basics$composeL = F3(
	function (g, f, x) {
		return g(
			f(x));
	});
var $elm$bytes$Bytes$Encode$getWidth = function (builder) {
	switch (builder.$) {
		case 'I8':
			return 1;
		case 'I16':
			return 2;
		case 'I32':
			return 4;
		case 'U8':
			return 1;
		case 'U16':
			return 2;
		case 'U32':
			return 4;
		case 'F32':
			return 4;
		case 'F64':
			return 8;
		case 'Seq':
			var w = builder.a;
			return w;
		case 'Utf8':
			var w = builder.a;
			return w;
		default:
			var bs = builder.a;
			return _Bytes_width(bs);
	}
};
var $elm$bytes$Bytes$LE = {$: 'LE'};
var $elm$bytes$Bytes$Encode$write = F3(
	function (builder, mb, offset) {
		switch (builder.$) {
			case 'I8':
				var n = builder.a;
				return A3(_Bytes_write_i8, mb, offset, n);
			case 'I16':
				var e = builder.a;
				var n = builder.b;
				return A4(
					_Bytes_write_i16,
					mb,
					offset,
					n,
					_Utils_eq(e, $elm$bytes$Bytes$LE));
			case 'I32':
				var e = builder.a;
				var n = builder.b;
				return A4(
					_Bytes_write_i32,
					mb,
					offset,
					n,
					_Utils_eq(e, $elm$bytes$Bytes$LE));
			case 'U8':
				var n = builder.a;
				return A3(_Bytes_write_u8, mb, offset, n);
			case 'U16':
				var e = builder.a;
				var n = builder.b;
				return A4(
					_Bytes_write_u16,
					mb,
					offset,
					n,
					_Utils_eq(e, $elm$bytes$Bytes$LE));
			case 'U32':
				var e = builder.a;
				var n = builder.b;
				return A4(
					_Bytes_write_u32,
					mb,
					offset,
					n,
					_Utils_eq(e, $elm$bytes$Bytes$LE));
			case 'F32':
				var e = builder.a;
				var n = builder.b;
				return A4(
					_Bytes_write_f32,
					mb,
					offset,
					n,
					_Utils_eq(e, $elm$bytes$Bytes$LE));
			case 'F64':
				var e = builder.a;
				var n = builder.b;
				return A4(
					_Bytes_write_f64,
					mb,
					offset,
					n,
					_Utils_eq(e, $elm$bytes$Bytes$LE));
			case 'Seq':
				var bs = builder.b;
				return A3($elm$bytes$Bytes$Encode$writeSequence, bs, mb, offset);
			case 'Utf8':
				var s = builder.b;
				return A3(_Bytes_write_string, mb, offset, s);
			default:
				var bs = builder.a;
				return A3(_Bytes_write_bytes, mb, offset, bs);
		}
	});
var $elm$bytes$Bytes$Encode$writeSequence = F3(
	function (builders, mb, offset) {
		writeSequence:
		while (true) {
			if (!builders.b) {
				return offset;
			} else {
				var b = builders.a;
				var bs = builders.b;
				var $temp$builders = bs,
					$temp$mb = mb,
					$temp$offset = A3($elm$bytes$Bytes$Encode$write, b, mb, offset);
				builders = $temp$builders;
				mb = $temp$mb;
				offset = $temp$offset;
				continue writeSequence;
			}
		}
	});
var $elm$bytes$Bytes$Encode$encode = _Bytes_encode;
var $folkertdev$elm_sha2$Internal$SHA512$Digest = function (a) {
	return {$: 'Digest', a: a};
};
var $elm$bytes$Bytes$Decode$decode = F2(
	function (_v0, bs) {
		var decoder = _v0.a;
		return A2(_Bytes_decode, decoder, bs);
	});
var $elm$bytes$Bytes$Decode$Decoder = function (a) {
	return {$: 'Decoder', a: a};
};
var $elm$bytes$Bytes$Decode$loopHelp = F4(
	function (state, callback, bites, offset) {
		loopHelp:
		while (true) {
			var _v0 = callback(state);
			var decoder = _v0.a;
			var _v1 = A2(decoder, bites, offset);
			var newOffset = _v1.a;
			var step = _v1.b;
			if (step.$ === 'Loop') {
				var newState = step.a;
				var $temp$state = newState,
					$temp$callback = callback,
					$temp$bites = bites,
					$temp$offset = newOffset;
				state = $temp$state;
				callback = $temp$callback;
				bites = $temp$bites;
				offset = $temp$offset;
				continue loopHelp;
			} else {
				var result = step.a;
				return _Utils_Tuple2(newOffset, result);
			}
		}
	});
var $elm$bytes$Bytes$Decode$loop = F2(
	function (state, callback) {
		return $elm$bytes$Bytes$Decode$Decoder(
			A2($elm$bytes$Bytes$Decode$loopHelp, state, callback));
	});
var $elm$bytes$Bytes$Decode$Done = function (a) {
	return {$: 'Done', a: a};
};
var $elm$bytes$Bytes$Decode$Loop = function (a) {
	return {$: 'Loop', a: a};
};
var $elm$bytes$Bytes$Decode$map = F2(
	function (func, _v0) {
		var decodeA = _v0.a;
		return $elm$bytes$Bytes$Decode$Decoder(
			F2(
				function (bites, offset) {
					var _v1 = A2(decodeA, bites, offset);
					var aOffset = _v1.a;
					var a = _v1.b;
					return _Utils_Tuple2(
						aOffset,
						func(a));
				}));
	});
var $elm$bytes$Bytes$Decode$succeed = function (a) {
	return $elm$bytes$Bytes$Decode$Decoder(
		F2(
			function (_v0, offset) {
				return _Utils_Tuple2(offset, a);
			}));
};
var $folkertdev$elm_sha2$Internal$SHA512$loopHelp = F2(
	function (step, _v0) {
		var n = _v0.a;
		var state = _v0.b;
		return (n > 0) ? A2(
			$elm$bytes$Bytes$Decode$map,
			function (_new) {
				return $elm$bytes$Bytes$Decode$Loop(
					_Utils_Tuple2(n - 1, _new));
			},
			step(state)) : $elm$bytes$Bytes$Decode$succeed(
			$elm$bytes$Bytes$Decode$Done(state));
	});
var $folkertdev$elm_sha2$Internal$SHA512$iterate = F3(
	function (n, step, initial) {
		return A2(
			$elm$bytes$Bytes$Decode$loop,
			_Utils_Tuple2(n, initial),
			$folkertdev$elm_sha2$Internal$SHA512$loopHelp(step));
	});
var $elm$bytes$Bytes$Decode$map5 = F6(
	function (func, _v0, _v1, _v2, _v3, _v4) {
		var decodeA = _v0.a;
		var decodeB = _v1.a;
		var decodeC = _v2.a;
		var decodeD = _v3.a;
		var decodeE = _v4.a;
		return $elm$bytes$Bytes$Decode$Decoder(
			F2(
				function (bites, offset) {
					var _v5 = A2(decodeA, bites, offset);
					var aOffset = _v5.a;
					var a = _v5.b;
					var _v6 = A2(decodeB, bites, aOffset);
					var bOffset = _v6.a;
					var b = _v6.b;
					var _v7 = A2(decodeC, bites, bOffset);
					var cOffset = _v7.a;
					var c = _v7.b;
					var _v8 = A2(decodeD, bites, cOffset);
					var dOffset = _v8.a;
					var d = _v8.b;
					var _v9 = A2(decodeE, bites, dOffset);
					var eOffset = _v9.a;
					var e = _v9.b;
					return _Utils_Tuple2(
						eOffset,
						A5(func, a, b, c, d, e));
				}));
	});
var $folkertdev$elm_sha2$Internal$SHA512$map16 = function (f) {
	return function (b1) {
		return function (b2) {
			return function (b3) {
				return function (b4) {
					return function (b5) {
						return function (b6) {
							return function (b7) {
								return function (b8) {
									return function (b9) {
										return function (b10) {
											return function (b11) {
												return function (b12) {
													return function (b13) {
														return function (b14) {
															return function (b15) {
																return function (b16) {
																	return A6(
																		$elm$bytes$Bytes$Decode$map5,
																		F5(
																			function (a, b, c, d, e) {
																				return A4(e, d, c, b, a);
																			}),
																		b16,
																		b15,
																		b14,
																		b13,
																		A6(
																			$elm$bytes$Bytes$Decode$map5,
																			F5(
																				function (a, b, c, d, e) {
																					return A4(e, d, c, b, a);
																				}),
																			b12,
																			b11,
																			b10,
																			b9,
																			A6(
																				$elm$bytes$Bytes$Decode$map5,
																				F5(
																					function (a, b, c, d, e) {
																						return A4(e, d, c, b, a);
																					}),
																				b8,
																				b7,
																				b6,
																				b5,
																				A6(
																					$elm$bytes$Bytes$Decode$map5,
																					F5(
																						function (a, b, c, d, e) {
																							return A4(e, d, c, b, a);
																						}),
																					b4,
																					b3,
																					b2,
																					b1,
																					$elm$bytes$Bytes$Decode$succeed(f)))));
																};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $folkertdev$elm_sha2$Internal$SHA512$DeltaState = function (a) {
	return {$: 'DeltaState', a: a};
};
var $folkertdev$elm_sha2$Internal$SHA512$State = function (a) {
	return {$: 'State', a: a};
};
var $folkertdev$elm_sha2$Internal$SHA512$Tuple8 = F8(
	function (a, b, c, d, e, f, g, h) {
		return {$: 'Tuple8', a: a, b: b, c: c, d: d, e: e, f: f, g: g, h: h};
	});
var $folkertdev$elm_sha2$Int64$Int64 = F2(
	function (a, b) {
		return {$: 'Int64', a: a, b: b};
	});
var $elm$core$Bitwise$shiftRightZfBy = _Bitwise_shiftRightZfBy;
var $folkertdev$elm_sha2$Int64$add = F2(
	function (_v0, _v1) {
		var a = _v0.a;
		var b = _v0.b;
		var p = _v1.a;
		var q = _v1.b;
		var lower = (b >>> 0) + (q >>> 0);
		var higher = (a >>> 0) + (p >>> 0);
		return (lower > 4294967295) ? A2($folkertdev$elm_sha2$Int64$Int64, (higher + 1) >>> 0, lower >>> 0) : A2($folkertdev$elm_sha2$Int64$Int64, higher >>> 0, lower >>> 0);
	});
var $elm$core$Bitwise$and = _Bitwise_and;
var $folkertdev$elm_sha2$Int64$and = F2(
	function (_v0, _v1) {
		var a = _v0.a;
		var b = _v0.b;
		var p = _v1.a;
		var q = _v1.b;
		return A2($folkertdev$elm_sha2$Int64$Int64, a & p, b & q);
	});
var $elm$core$Bitwise$complement = _Bitwise_complement;
var $folkertdev$elm_sha2$Int64$complement = function (_v0) {
	var a = _v0.a;
	var b = _v0.b;
	return A2($folkertdev$elm_sha2$Int64$Int64, (~a) >>> 0, (~b) >>> 0);
};
var $elm$core$Array$bitMask = 4294967295 >>> (32 - $elm$core$Array$shiftStep);
var $elm$core$Basics$ge = _Utils_ge;
var $elm$core$Elm$JsArray$unsafeGet = _JsArray_unsafeGet;
var $elm$core$Array$getHelp = F3(
	function (shift, index, tree) {
		getHelp:
		while (true) {
			var pos = $elm$core$Array$bitMask & (index >>> shift);
			var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (_v0.$ === 'SubTree') {
				var subTree = _v0.a;
				var $temp$shift = shift - $elm$core$Array$shiftStep,
					$temp$index = index,
					$temp$tree = subTree;
				shift = $temp$shift;
				index = $temp$index;
				tree = $temp$tree;
				continue getHelp;
			} else {
				var values = _v0.a;
				return A2($elm$core$Elm$JsArray$unsafeGet, $elm$core$Array$bitMask & index, values);
			}
		}
	});
var $elm$core$Bitwise$shiftLeftBy = _Bitwise_shiftLeftBy;
var $elm$core$Array$tailIndex = function (len) {
	return (len >>> 5) << 5;
};
var $elm$core$Array$get = F2(
	function (index, _v0) {
		var len = _v0.a;
		var startShift = _v0.b;
		var tree = _v0.c;
		var tail = _v0.d;
		return ((index < 0) || (_Utils_cmp(index, len) > -1)) ? $elm$core$Maybe$Nothing : ((_Utils_cmp(
			index,
			$elm$core$Array$tailIndex(len)) > -1) ? $elm$core$Maybe$Just(
			A2($elm$core$Elm$JsArray$unsafeGet, $elm$core$Array$bitMask & index, tail)) : $elm$core$Maybe$Just(
			A3($elm$core$Array$getHelp, startShift, index, tree)));
	});
var $elm$core$Array$fromListHelp = F3(
	function (list, nodeList, nodeListSize) {
		fromListHelp:
		while (true) {
			var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, list);
			var jsArray = _v0.a;
			var remainingItems = _v0.b;
			if (_Utils_cmp(
				$elm$core$Elm$JsArray$length(jsArray),
				$elm$core$Array$branchFactor) < 0) {
				return A2(
					$elm$core$Array$builderToArray,
					true,
					{nodeList: nodeList, nodeListSize: nodeListSize, tail: jsArray});
			} else {
				var $temp$list = remainingItems,
					$temp$nodeList = A2(
					$elm$core$List$cons,
					$elm$core$Array$Leaf(jsArray),
					nodeList),
					$temp$nodeListSize = nodeListSize + 1;
				list = $temp$list;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue fromListHelp;
			}
		}
	});
var $elm$core$Array$fromList = function (list) {
	if (!list.b) {
		return $elm$core$Array$empty;
	} else {
		return A3($elm$core$Array$fromListHelp, list, _List_Nil, 0);
	}
};
var $folkertdev$elm_sha2$Internal$SHA512$ks = $elm$core$Array$fromList(
	_List_fromArray(
		[
			A2($folkertdev$elm_sha2$Int64$Int64, 1116352408, 3609767458),
			A2($folkertdev$elm_sha2$Int64$Int64, 1899447441, 602891725),
			A2($folkertdev$elm_sha2$Int64$Int64, 3049323471, 3964484399),
			A2($folkertdev$elm_sha2$Int64$Int64, 3921009573, 2173295548),
			A2($folkertdev$elm_sha2$Int64$Int64, 961987163, 4081628472),
			A2($folkertdev$elm_sha2$Int64$Int64, 1508970993, 3053834265),
			A2($folkertdev$elm_sha2$Int64$Int64, 2453635748, 2937671579),
			A2($folkertdev$elm_sha2$Int64$Int64, 2870763221, 3664609560),
			A2($folkertdev$elm_sha2$Int64$Int64, 3624381080, 2734883394),
			A2($folkertdev$elm_sha2$Int64$Int64, 310598401, 1164996542),
			A2($folkertdev$elm_sha2$Int64$Int64, 607225278, 1323610764),
			A2($folkertdev$elm_sha2$Int64$Int64, 1426881987, 3590304994),
			A2($folkertdev$elm_sha2$Int64$Int64, 1925078388, 4068182383),
			A2($folkertdev$elm_sha2$Int64$Int64, 2162078206, 991336113),
			A2($folkertdev$elm_sha2$Int64$Int64, 2614888103, 633803317),
			A2($folkertdev$elm_sha2$Int64$Int64, 3248222580, 3479774868),
			A2($folkertdev$elm_sha2$Int64$Int64, 3835390401, 2666613458),
			A2($folkertdev$elm_sha2$Int64$Int64, 4022224774, 944711139),
			A2($folkertdev$elm_sha2$Int64$Int64, 264347078, 2341262773),
			A2($folkertdev$elm_sha2$Int64$Int64, 604807628, 2007800933),
			A2($folkertdev$elm_sha2$Int64$Int64, 770255983, 1495990901),
			A2($folkertdev$elm_sha2$Int64$Int64, 1249150122, 1856431235),
			A2($folkertdev$elm_sha2$Int64$Int64, 1555081692, 3175218132),
			A2($folkertdev$elm_sha2$Int64$Int64, 1996064986, 2198950837),
			A2($folkertdev$elm_sha2$Int64$Int64, 2554220882, 3999719339),
			A2($folkertdev$elm_sha2$Int64$Int64, 2821834349, 766784016),
			A2($folkertdev$elm_sha2$Int64$Int64, 2952996808, 2566594879),
			A2($folkertdev$elm_sha2$Int64$Int64, 3210313671, 3203337956),
			A2($folkertdev$elm_sha2$Int64$Int64, 3336571891, 1034457026),
			A2($folkertdev$elm_sha2$Int64$Int64, 3584528711, 2466948901),
			A2($folkertdev$elm_sha2$Int64$Int64, 113926993, 3758326383),
			A2($folkertdev$elm_sha2$Int64$Int64, 338241895, 168717936),
			A2($folkertdev$elm_sha2$Int64$Int64, 666307205, 1188179964),
			A2($folkertdev$elm_sha2$Int64$Int64, 773529912, 1546045734),
			A2($folkertdev$elm_sha2$Int64$Int64, 1294757372, 1522805485),
			A2($folkertdev$elm_sha2$Int64$Int64, 1396182291, 2643833823),
			A2($folkertdev$elm_sha2$Int64$Int64, 1695183700, 2343527390),
			A2($folkertdev$elm_sha2$Int64$Int64, 1986661051, 1014477480),
			A2($folkertdev$elm_sha2$Int64$Int64, 2177026350, 1206759142),
			A2($folkertdev$elm_sha2$Int64$Int64, 2456956037, 344077627),
			A2($folkertdev$elm_sha2$Int64$Int64, 2730485921, 1290863460),
			A2($folkertdev$elm_sha2$Int64$Int64, 2820302411, 3158454273),
			A2($folkertdev$elm_sha2$Int64$Int64, 3259730800, 3505952657),
			A2($folkertdev$elm_sha2$Int64$Int64, 3345764771, 106217008),
			A2($folkertdev$elm_sha2$Int64$Int64, 3516065817, 3606008344),
			A2($folkertdev$elm_sha2$Int64$Int64, 3600352804, 1432725776),
			A2($folkertdev$elm_sha2$Int64$Int64, 4094571909, 1467031594),
			A2($folkertdev$elm_sha2$Int64$Int64, 275423344, 851169720),
			A2($folkertdev$elm_sha2$Int64$Int64, 430227734, 3100823752),
			A2($folkertdev$elm_sha2$Int64$Int64, 506948616, 1363258195),
			A2($folkertdev$elm_sha2$Int64$Int64, 659060556, 3750685593),
			A2($folkertdev$elm_sha2$Int64$Int64, 883997877, 3785050280),
			A2($folkertdev$elm_sha2$Int64$Int64, 958139571, 3318307427),
			A2($folkertdev$elm_sha2$Int64$Int64, 1322822218, 3812723403),
			A2($folkertdev$elm_sha2$Int64$Int64, 1537002063, 2003034995),
			A2($folkertdev$elm_sha2$Int64$Int64, 1747873779, 3602036899),
			A2($folkertdev$elm_sha2$Int64$Int64, 1955562222, 1575990012),
			A2($folkertdev$elm_sha2$Int64$Int64, 2024104815, 1125592928),
			A2($folkertdev$elm_sha2$Int64$Int64, 2227730452, 2716904306),
			A2($folkertdev$elm_sha2$Int64$Int64, 2361852424, 442776044),
			A2($folkertdev$elm_sha2$Int64$Int64, 2428436474, 593698344),
			A2($folkertdev$elm_sha2$Int64$Int64, 2756734187, 3733110249),
			A2($folkertdev$elm_sha2$Int64$Int64, 3204031479, 2999351573),
			A2($folkertdev$elm_sha2$Int64$Int64, 3329325298, 3815920427),
			A2($folkertdev$elm_sha2$Int64$Int64, 3391569614, 3928383900),
			A2($folkertdev$elm_sha2$Int64$Int64, 3515267271, 566280711),
			A2($folkertdev$elm_sha2$Int64$Int64, 3940187606, 3454069534),
			A2($folkertdev$elm_sha2$Int64$Int64, 4118630271, 4000239992),
			A2($folkertdev$elm_sha2$Int64$Int64, 116418474, 1914138554),
			A2($folkertdev$elm_sha2$Int64$Int64, 174292421, 2731055270),
			A2($folkertdev$elm_sha2$Int64$Int64, 289380356, 3203993006),
			A2($folkertdev$elm_sha2$Int64$Int64, 460393269, 320620315),
			A2($folkertdev$elm_sha2$Int64$Int64, 685471733, 587496836),
			A2($folkertdev$elm_sha2$Int64$Int64, 852142971, 1086792851),
			A2($folkertdev$elm_sha2$Int64$Int64, 1017036298, 365543100),
			A2($folkertdev$elm_sha2$Int64$Int64, 1126000580, 2618297676),
			A2($folkertdev$elm_sha2$Int64$Int64, 1288033470, 3409855158),
			A2($folkertdev$elm_sha2$Int64$Int64, 1501505948, 4234509866),
			A2($folkertdev$elm_sha2$Int64$Int64, 1607167915, 987167468),
			A2($folkertdev$elm_sha2$Int64$Int64, 1816402316, 1246189591)
		]));
var $elm$core$Bitwise$or = _Bitwise_or;
var $folkertdev$elm_sha2$Int64$rotateRightBy = F2(
	function (n, i) {
		var higher = i.a;
		var lower = i.b;
		if (n > 32) {
			var q2 = higher >>> n;
			var q1 = 0;
			var m = 64 - n;
			var p2 = lower << m;
			var carry = lower >>> (32 - m);
			var p1 = carry | (higher << m);
			return A2($folkertdev$elm_sha2$Int64$Int64, p1 | q1, p2 | q2);
		} else {
			var q1 = higher >>> n;
			var p2 = 0;
			var m = 64 - n;
			var p1 = lower << m;
			var carry = higher << (32 - n);
			var q2 = carry | (lower >>> n);
			return A2($folkertdev$elm_sha2$Int64$Int64, p1 | q1, p2 | q2);
		}
	});
var $elm$core$Bitwise$xor = _Bitwise_xor;
var $folkertdev$elm_sha2$Int64$xor = F2(
	function (_v0, _v1) {
		var a = _v0.a;
		var b = _v0.b;
		var p = _v1.a;
		var q = _v1.b;
		return A2($folkertdev$elm_sha2$Int64$Int64, a ^ p, b ^ q);
	});
var $folkertdev$elm_sha2$Internal$SHA512$calculateDigestDeltas = F3(
	function (index, w, _v0) {
		var _v1 = _v0.a;
		var a = _v1.a;
		var b = _v1.b;
		var c = _v1.c;
		var d = _v1.d;
		var e = _v1.e;
		var f = _v1.f;
		var g = _v1.g;
		var h = _v1.h;
		var maj = A2(
			$folkertdev$elm_sha2$Int64$xor,
			A2($folkertdev$elm_sha2$Int64$and, b, c),
			A2(
				$folkertdev$elm_sha2$Int64$and,
				a,
				A2($folkertdev$elm_sha2$Int64$xor, b, c)));
		var k = function () {
			var _v8 = A2($elm$core$Array$get, index, $folkertdev$elm_sha2$Internal$SHA512$ks);
			if (_v8.$ === 'Nothing') {
				return A2($folkertdev$elm_sha2$Int64$Int64, 0, 0);
			} else {
				var v = _v8.a;
				return v;
			}
		}();
		var ch = A2(
			$folkertdev$elm_sha2$Int64$xor,
			A2(
				$folkertdev$elm_sha2$Int64$and,
				$folkertdev$elm_sha2$Int64$complement(e),
				g),
			A2($folkertdev$elm_sha2$Int64$and, e, f));
		var bigSigma1 = function () {
			var _v5 = A2($folkertdev$elm_sha2$Int64$rotateRightBy, 41, e);
			var x5 = _v5.a;
			var x6 = _v5.b;
			var _v6 = A2($folkertdev$elm_sha2$Int64$rotateRightBy, 18, e);
			var x3 = _v6.a;
			var x4 = _v6.b;
			var _v7 = A2($folkertdev$elm_sha2$Int64$rotateRightBy, 14, e);
			var x1 = _v7.a;
			var x2 = _v7.b;
			return A2($folkertdev$elm_sha2$Int64$Int64, x5 ^ (x3 ^ x1), x6 ^ (x4 ^ x2));
		}();
		var t1 = A2(
			$folkertdev$elm_sha2$Int64$add,
			w,
			A2(
				$folkertdev$elm_sha2$Int64$add,
				k,
				A2(
					$folkertdev$elm_sha2$Int64$add,
					ch,
					A2($folkertdev$elm_sha2$Int64$add, bigSigma1, h))));
		var bigSigma0 = function () {
			var _v2 = A2($folkertdev$elm_sha2$Int64$rotateRightBy, 39, a);
			var x5 = _v2.a;
			var x6 = _v2.b;
			var _v3 = A2($folkertdev$elm_sha2$Int64$rotateRightBy, 34, a);
			var x3 = _v3.a;
			var x4 = _v3.b;
			var _v4 = A2($folkertdev$elm_sha2$Int64$rotateRightBy, 28, a);
			var x1 = _v4.a;
			var x2 = _v4.b;
			return A2($folkertdev$elm_sha2$Int64$Int64, x5 ^ (x3 ^ x1), x6 ^ (x4 ^ x2));
		}();
		var t2 = A2($folkertdev$elm_sha2$Int64$add, maj, bigSigma0);
		var result = A8(
			$folkertdev$elm_sha2$Internal$SHA512$Tuple8,
			A2($folkertdev$elm_sha2$Int64$add, t1, t2),
			a,
			b,
			c,
			A2($folkertdev$elm_sha2$Int64$add, d, t1),
			e,
			f,
			g);
		return $folkertdev$elm_sha2$Internal$SHA512$DeltaState(result);
	});
var $folkertdev$elm_sha2$Internal$SHA512$numberOfWords = 16;
var $folkertdev$elm_sha2$Int64$shiftRightZfBy = F2(
	function (n, _v0) {
		var higher = _v0.a;
		var lower = _v0.b;
		if (n > 32) {
			return A2($folkertdev$elm_sha2$Int64$Int64, 0, higher >>> n);
		} else {
			var carry = higher << (32 - n);
			var newLower = (carry | (lower >>> n)) >>> 0;
			return A2($folkertdev$elm_sha2$Int64$Int64, higher >>> n, newLower);
		}
	});
var $folkertdev$elm_sha2$Internal$SHA512$reduceWordsHelp = function (i) {
	return function (deltaState) {
		return function (b16) {
			return function (b15) {
				return function (b14) {
					return function (b13) {
						return function (b12) {
							return function (b11) {
								return function (b10) {
									return function (b9) {
										return function (b8) {
											return function (b7) {
												return function (b6) {
													return function (b5) {
														return function (b4) {
															return function (b3) {
																return function (b2) {
																	return function (b1) {
																		reduceWordsHelp:
																		while (true) {
																			if (i < 64) {
																				var smallSigma1 = function () {
																					var _v3 = A2($folkertdev$elm_sha2$Int64$shiftRightZfBy, 6, b2);
																					var x5 = _v3.a;
																					var x6 = _v3.b;
																					var _v4 = A2($folkertdev$elm_sha2$Int64$rotateRightBy, 61, b2);
																					var x3 = _v4.a;
																					var x4 = _v4.b;
																					var _v5 = A2($folkertdev$elm_sha2$Int64$rotateRightBy, 19, b2);
																					var x1 = _v5.a;
																					var x2 = _v5.b;
																					return A2($folkertdev$elm_sha2$Int64$Int64, x5 ^ (x3 ^ x1), x6 ^ (x4 ^ x2));
																				}();
																				var smallSigma0 = function () {
																					var _v0 = A2($folkertdev$elm_sha2$Int64$shiftRightZfBy, 7, b15);
																					var x5 = _v0.a;
																					var x6 = _v0.b;
																					var _v1 = A2($folkertdev$elm_sha2$Int64$rotateRightBy, 8, b15);
																					var x3 = _v1.a;
																					var x4 = _v1.b;
																					var _v2 = A2($folkertdev$elm_sha2$Int64$rotateRightBy, 1, b15);
																					var x1 = _v2.a;
																					var x2 = _v2.b;
																					return A2($folkertdev$elm_sha2$Int64$Int64, x5 ^ (x3 ^ x1), x6 ^ (x4 ^ x2));
																				}();
																				var w = A2(
																					$folkertdev$elm_sha2$Int64$add,
																					b16,
																					A2(
																						$folkertdev$elm_sha2$Int64$add,
																						smallSigma0,
																						A2($folkertdev$elm_sha2$Int64$add, b7, smallSigma1)));
																				var $temp$i = i + 1,
																					$temp$deltaState = A3($folkertdev$elm_sha2$Internal$SHA512$calculateDigestDeltas, i + $folkertdev$elm_sha2$Internal$SHA512$numberOfWords, w, deltaState),
																					$temp$b16 = b15,
																					$temp$b15 = b14,
																					$temp$b14 = b13,
																					$temp$b13 = b12,
																					$temp$b12 = b11,
																					$temp$b11 = b10,
																					$temp$b10 = b9,
																					$temp$b9 = b8,
																					$temp$b8 = b7,
																					$temp$b7 = b6,
																					$temp$b6 = b5,
																					$temp$b5 = b4,
																					$temp$b4 = b3,
																					$temp$b3 = b2,
																					$temp$b2 = b1,
																					$temp$b1 = w;
																				i = $temp$i;
																				deltaState = $temp$deltaState;
																				b16 = $temp$b16;
																				b15 = $temp$b15;
																				b14 = $temp$b14;
																				b13 = $temp$b13;
																				b12 = $temp$b12;
																				b11 = $temp$b11;
																				b10 = $temp$b10;
																				b9 = $temp$b9;
																				b8 = $temp$b8;
																				b7 = $temp$b7;
																				b6 = $temp$b6;
																				b5 = $temp$b5;
																				b4 = $temp$b4;
																				b3 = $temp$b3;
																				b2 = $temp$b2;
																				b1 = $temp$b1;
																				continue reduceWordsHelp;
																			} else {
																				return deltaState;
																			}
																		}
																	};
																};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $folkertdev$elm_sha2$Internal$SHA512$reduceMessage = function (_v0) {
	return function (b16) {
		return function (b15) {
			return function (b14) {
				return function (b13) {
					return function (b12) {
						return function (b11) {
							return function (b10) {
								return function (b9) {
									return function (b8) {
										return function (b7) {
											return function (b6) {
												return function (b5) {
													return function (b4) {
														return function (b3) {
															return function (b2) {
																return function (b1) {
																	var initial = _v0.a;
																	var h0 = initial.a;
																	var h1 = initial.b;
																	var h2 = initial.c;
																	var h3 = initial.d;
																	var h4 = initial.e;
																	var h5 = initial.f;
																	var h6 = initial.g;
																	var h7 = initial.h;
																	var initialDeltaState = A3(
																		$folkertdev$elm_sha2$Internal$SHA512$calculateDigestDeltas,
																		15,
																		b16,
																		A3(
																			$folkertdev$elm_sha2$Internal$SHA512$calculateDigestDeltas,
																			14,
																			b15,
																			A3(
																				$folkertdev$elm_sha2$Internal$SHA512$calculateDigestDeltas,
																				13,
																				b14,
																				A3(
																					$folkertdev$elm_sha2$Internal$SHA512$calculateDigestDeltas,
																					12,
																					b13,
																					A3(
																						$folkertdev$elm_sha2$Internal$SHA512$calculateDigestDeltas,
																						11,
																						b12,
																						A3(
																							$folkertdev$elm_sha2$Internal$SHA512$calculateDigestDeltas,
																							10,
																							b11,
																							A3(
																								$folkertdev$elm_sha2$Internal$SHA512$calculateDigestDeltas,
																								9,
																								b10,
																								A3(
																									$folkertdev$elm_sha2$Internal$SHA512$calculateDigestDeltas,
																									8,
																									b9,
																									A3(
																										$folkertdev$elm_sha2$Internal$SHA512$calculateDigestDeltas,
																										7,
																										b8,
																										A3(
																											$folkertdev$elm_sha2$Internal$SHA512$calculateDigestDeltas,
																											6,
																											b7,
																											A3(
																												$folkertdev$elm_sha2$Internal$SHA512$calculateDigestDeltas,
																												5,
																												b6,
																												A3(
																													$folkertdev$elm_sha2$Internal$SHA512$calculateDigestDeltas,
																													4,
																													b5,
																													A3(
																														$folkertdev$elm_sha2$Internal$SHA512$calculateDigestDeltas,
																														3,
																														b4,
																														A3(
																															$folkertdev$elm_sha2$Internal$SHA512$calculateDigestDeltas,
																															2,
																															b3,
																															A3(
																																$folkertdev$elm_sha2$Internal$SHA512$calculateDigestDeltas,
																																1,
																																b2,
																																A3(
																																	$folkertdev$elm_sha2$Internal$SHA512$calculateDigestDeltas,
																																	0,
																																	b1,
																																	$folkertdev$elm_sha2$Internal$SHA512$DeltaState(initial)))))))))))))))));
																	var _v1 = $folkertdev$elm_sha2$Internal$SHA512$reduceWordsHelp(0)(initialDeltaState)(b1)(b2)(b3)(b4)(b5)(b6)(b7)(b8)(b9)(b10)(b11)(b12)(b13)(b14)(b15)(b16);
																	var _v2 = _v1.a;
																	var a = _v2.a;
																	var b = _v2.b;
																	var c = _v2.c;
																	var d = _v2.d;
																	var e = _v2.e;
																	var f = _v2.f;
																	var g = _v2.g;
																	var h = _v2.h;
																	return $folkertdev$elm_sha2$Internal$SHA512$State(
																		A8(
																			$folkertdev$elm_sha2$Internal$SHA512$Tuple8,
																			A2($folkertdev$elm_sha2$Int64$add, h0, a),
																			A2($folkertdev$elm_sha2$Int64$add, h1, b),
																			A2($folkertdev$elm_sha2$Int64$add, h2, c),
																			A2($folkertdev$elm_sha2$Int64$add, h3, d),
																			A2($folkertdev$elm_sha2$Int64$add, h4, e),
																			A2($folkertdev$elm_sha2$Int64$add, h5, f),
																			A2($folkertdev$elm_sha2$Int64$add, h6, g),
																			A2($folkertdev$elm_sha2$Int64$add, h7, h)));
																};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $elm$bytes$Bytes$BE = {$: 'BE'};
var $elm$bytes$Bytes$Decode$map2 = F3(
	function (func, _v0, _v1) {
		var decodeA = _v0.a;
		var decodeB = _v1.a;
		return $elm$bytes$Bytes$Decode$Decoder(
			F2(
				function (bites, offset) {
					var _v2 = A2(decodeA, bites, offset);
					var aOffset = _v2.a;
					var a = _v2.b;
					var _v3 = A2(decodeB, bites, aOffset);
					var bOffset = _v3.a;
					var b = _v3.b;
					return _Utils_Tuple2(
						bOffset,
						A2(func, a, b));
				}));
	});
var $elm$bytes$Bytes$Decode$unsignedInt32 = function (endianness) {
	return $elm$bytes$Bytes$Decode$Decoder(
		_Bytes_read_u32(
			_Utils_eq(endianness, $elm$bytes$Bytes$LE)));
};
var $folkertdev$elm_sha2$Int64$decode = A3(
	$elm$bytes$Bytes$Decode$map2,
	$folkertdev$elm_sha2$Int64$Int64,
	$elm$bytes$Bytes$Decode$unsignedInt32($elm$bytes$Bytes$BE),
	$elm$bytes$Bytes$Decode$unsignedInt32($elm$bytes$Bytes$BE));
var $folkertdev$elm_sha2$Internal$SHA512$u64 = $folkertdev$elm_sha2$Int64$decode;
var $folkertdev$elm_sha2$Internal$SHA512$reduceBytesMessage = function (state) {
	return $folkertdev$elm_sha2$Internal$SHA512$map16(
		$folkertdev$elm_sha2$Internal$SHA512$reduceMessage(state))($folkertdev$elm_sha2$Internal$SHA512$u64)($folkertdev$elm_sha2$Internal$SHA512$u64)($folkertdev$elm_sha2$Internal$SHA512$u64)($folkertdev$elm_sha2$Internal$SHA512$u64)($folkertdev$elm_sha2$Internal$SHA512$u64)($folkertdev$elm_sha2$Internal$SHA512$u64)($folkertdev$elm_sha2$Internal$SHA512$u64)($folkertdev$elm_sha2$Internal$SHA512$u64)($folkertdev$elm_sha2$Internal$SHA512$u64)($folkertdev$elm_sha2$Internal$SHA512$u64)($folkertdev$elm_sha2$Internal$SHA512$u64)($folkertdev$elm_sha2$Internal$SHA512$u64)($folkertdev$elm_sha2$Internal$SHA512$u64)($folkertdev$elm_sha2$Internal$SHA512$u64)($folkertdev$elm_sha2$Internal$SHA512$u64)($folkertdev$elm_sha2$Internal$SHA512$u64);
};
var $elm$bytes$Bytes$width = _Bytes_width;
var $folkertdev$elm_sha2$Internal$SHA512$hashChunks = F2(
	function (message, state) {
		var numberOfChunks = ($elm$bytes$Bytes$width(message) / 128) | 0;
		var hashState = A3($folkertdev$elm_sha2$Internal$SHA512$iterate, numberOfChunks, $folkertdev$elm_sha2$Internal$SHA512$reduceBytesMessage, state);
		var _v0 = A2($elm$bytes$Bytes$Decode$decode, hashState, message);
		if (_v0.$ === 'Just') {
			var newState = _v0.a;
			return newState;
		} else {
			return state;
		}
	});
var $folkertdev$elm_sha2$Internal$SHA512$maxSize = 1024 * 128;
var $elm$bytes$Bytes$Encode$Bytes = function (a) {
	return {$: 'Bytes', a: a};
};
var $elm$bytes$Bytes$Encode$bytes = $elm$bytes$Bytes$Encode$Bytes;
var $elm$bytes$Bytes$Encode$Seq = F2(
	function (a, b) {
		return {$: 'Seq', a: a, b: b};
	});
var $elm$bytes$Bytes$Encode$getWidths = F2(
	function (width, builders) {
		getWidths:
		while (true) {
			if (!builders.b) {
				return width;
			} else {
				var b = builders.a;
				var bs = builders.b;
				var $temp$width = width + $elm$bytes$Bytes$Encode$getWidth(b),
					$temp$builders = bs;
				width = $temp$width;
				builders = $temp$builders;
				continue getWidths;
			}
		}
	});
var $elm$bytes$Bytes$Encode$sequence = function (builders) {
	return A2(
		$elm$bytes$Bytes$Encode$Seq,
		A2($elm$bytes$Bytes$Encode$getWidths, 0, builders),
		builders);
};
var $elm$bytes$Bytes$Encode$U32 = F2(
	function (a, b) {
		return {$: 'U32', a: a, b: b};
	});
var $elm$bytes$Bytes$Encode$unsignedInt32 = $elm$bytes$Bytes$Encode$U32;
var $elm$bytes$Bytes$Encode$U8 = function (a) {
	return {$: 'U8', a: a};
};
var $elm$bytes$Bytes$Encode$unsignedInt8 = $elm$bytes$Bytes$Encode$U8;
var $folkertdev$elm_sha2$Internal$SHA512$padBuffer = F2(
	function (byteCount, bytes) {
		var finalBlockSize = byteCount & 127;
		var paddingSize = (finalBlockSize < 112) ? (((111 - finalBlockSize) + 4) + 8) : (((239 - finalBlockSize) + 4) + 8);
		var message = $elm$bytes$Bytes$Encode$encode(
			$elm$bytes$Bytes$Encode$sequence(
				_List_fromArray(
					[
						$elm$bytes$Bytes$Encode$bytes(bytes),
						$elm$bytes$Bytes$Encode$unsignedInt8(128),
						$elm$bytes$Bytes$Encode$sequence(
						A2(
							$elm$core$List$repeat,
							paddingSize,
							$elm$bytes$Bytes$Encode$unsignedInt8(0))),
						A2($elm$bytes$Bytes$Encode$unsignedInt32, $elm$bytes$Bytes$BE, byteCount << 3)
					])));
		return message;
	});
var $elm$bytes$Bytes$Decode$bytes = function (n) {
	return $elm$bytes$Bytes$Decode$Decoder(
		_Bytes_read_bytes(n));
};
var $elm$core$Tuple$pair = F2(
	function (a, b) {
		return _Utils_Tuple2(a, b);
	});
var $folkertdev$elm_sha2$Internal$SHA512$splitBytes = F2(
	function (n, buffer) {
		var decoder = A3(
			$elm$bytes$Bytes$Decode$map2,
			$elm$core$Tuple$pair,
			$elm$bytes$Bytes$Decode$bytes(n),
			$elm$bytes$Bytes$Decode$bytes(
				$elm$bytes$Bytes$width(buffer) - n));
		var _v0 = A2($elm$bytes$Bytes$Decode$decode, decoder, buffer);
		if (_v0.$ === 'Just') {
			var v = _v0.a;
			return v;
		} else {
			return _Utils_Tuple2(
				buffer,
				$elm$bytes$Bytes$Encode$encode(
					$elm$bytes$Bytes$Encode$sequence(_List_Nil)));
		}
	});
var $folkertdev$elm_sha2$Internal$SHA512$hashBytesHelp = F4(
	function (fullSize, isLast, bytes, state) {
		hashBytesHelp:
		while (true) {
			if (_Utils_cmp(
				$elm$bytes$Bytes$width(bytes),
				$folkertdev$elm_sha2$Internal$SHA512$maxSize) > 0) {
				var _v0 = A2($folkertdev$elm_sha2$Internal$SHA512$splitBytes, $folkertdev$elm_sha2$Internal$SHA512$maxSize, bytes);
				var first = _v0.a;
				var rest = _v0.b;
				var $temp$fullSize = fullSize,
					$temp$isLast = true,
					$temp$bytes = rest,
					$temp$state = A4($folkertdev$elm_sha2$Internal$SHA512$hashBytesHelp, fullSize, false, first, state);
				fullSize = $temp$fullSize;
				isLast = $temp$isLast;
				bytes = $temp$bytes;
				state = $temp$state;
				continue hashBytesHelp;
			} else {
				if (isLast) {
					return A2(
						$folkertdev$elm_sha2$Internal$SHA512$hashChunks,
						A2($folkertdev$elm_sha2$Internal$SHA512$padBuffer, fullSize, bytes),
						state);
				} else {
					return A2($folkertdev$elm_sha2$Internal$SHA512$hashChunks, bytes, state);
				}
			}
		}
	});
var $folkertdev$elm_sha2$Internal$SHA512$hashBytes = F2(
	function (state, bytes) {
		var _v0 = A4(
			$folkertdev$elm_sha2$Internal$SHA512$hashBytesHelp,
			$elm$bytes$Bytes$width(bytes),
			true,
			bytes,
			state);
		var r = _v0.a;
		return $folkertdev$elm_sha2$Internal$SHA512$Digest(r);
	});
var $elm$bytes$Bytes$Encode$Utf8 = F2(
	function (a, b) {
		return {$: 'Utf8', a: a, b: b};
	});
var $elm$bytes$Bytes$Encode$string = function (str) {
	return A2(
		$elm$bytes$Bytes$Encode$Utf8,
		_Bytes_getStringWidth(str),
		str);
};
var $folkertdev$elm_sha2$Internal$SHA512$fromString = function (state) {
	return A2(
		$elm$core$Basics$composeL,
		A2(
			$elm$core$Basics$composeL,
			$folkertdev$elm_sha2$Internal$SHA512$hashBytes(state),
			$elm$bytes$Bytes$Encode$encode),
		$elm$bytes$Bytes$Encode$string);
};
var $folkertdev$elm_sha2$SHA512$initialState = $folkertdev$elm_sha2$Internal$SHA512$State(
	A8(
		$folkertdev$elm_sha2$Internal$SHA512$Tuple8,
		A2($folkertdev$elm_sha2$Int64$Int64, 1779033703, 4089235720),
		A2($folkertdev$elm_sha2$Int64$Int64, 3144134277, 2227873595),
		A2($folkertdev$elm_sha2$Int64$Int64, 1013904242, 4271175723),
		A2($folkertdev$elm_sha2$Int64$Int64, 2773480762, 1595750129),
		A2($folkertdev$elm_sha2$Int64$Int64, 1359893119, 2917565137),
		A2($folkertdev$elm_sha2$Int64$Int64, 2600822924, 725511199),
		A2($folkertdev$elm_sha2$Int64$Int64, 528734635, 4215389547),
		A2($folkertdev$elm_sha2$Int64$Int64, 1541459225, 327033209)));
var $folkertdev$elm_sha2$SHA512$fromString = $folkertdev$elm_sha2$Internal$SHA512$fromString($folkertdev$elm_sha2$SHA512$initialState);
var $elm$core$String$cons = _String_cons;
var $elm$core$String$fromChar = function (_char) {
	return A2($elm$core$String$cons, _char, '');
};
var $danfishgold$base64_bytes$Decode$lowest6BitsMask = 63;
var $elm$core$Char$fromCode = _Char_fromCode;
var $danfishgold$base64_bytes$Decode$unsafeToChar = function (n) {
	if (n <= 25) {
		return $elm$core$Char$fromCode(65 + n);
	} else {
		if (n <= 51) {
			return $elm$core$Char$fromCode(97 + (n - 26));
		} else {
			if (n <= 61) {
				return $elm$core$Char$fromCode(48 + (n - 52));
			} else {
				switch (n) {
					case 62:
						return _Utils_chr('+');
					case 63:
						return _Utils_chr('/');
					default:
						return _Utils_chr('\u0000');
				}
			}
		}
	}
};
var $danfishgold$base64_bytes$Decode$bitsToChars = F2(
	function (bits, missing) {
		var s = $danfishgold$base64_bytes$Decode$unsafeToChar(bits & $danfishgold$base64_bytes$Decode$lowest6BitsMask);
		var r = $danfishgold$base64_bytes$Decode$unsafeToChar((bits >>> 6) & $danfishgold$base64_bytes$Decode$lowest6BitsMask);
		var q = $danfishgold$base64_bytes$Decode$unsafeToChar((bits >>> 12) & $danfishgold$base64_bytes$Decode$lowest6BitsMask);
		var p = $danfishgold$base64_bytes$Decode$unsafeToChar(bits >>> 18);
		switch (missing) {
			case 0:
				return A2(
					$elm$core$String$cons,
					p,
					A2(
						$elm$core$String$cons,
						q,
						A2(
							$elm$core$String$cons,
							r,
							$elm$core$String$fromChar(s))));
			case 1:
				return A2(
					$elm$core$String$cons,
					p,
					A2(
						$elm$core$String$cons,
						q,
						A2($elm$core$String$cons, r, '=')));
			case 2:
				return A2(
					$elm$core$String$cons,
					p,
					A2($elm$core$String$cons, q, '=='));
			default:
				return '';
		}
	});
var $danfishgold$base64_bytes$Decode$bitsToCharSpecialized = F4(
	function (bits1, bits2, bits3, accum) {
		var z = $danfishgold$base64_bytes$Decode$unsafeToChar((bits3 >>> 6) & $danfishgold$base64_bytes$Decode$lowest6BitsMask);
		var y = $danfishgold$base64_bytes$Decode$unsafeToChar((bits3 >>> 12) & $danfishgold$base64_bytes$Decode$lowest6BitsMask);
		var x = $danfishgold$base64_bytes$Decode$unsafeToChar(bits3 >>> 18);
		var w = $danfishgold$base64_bytes$Decode$unsafeToChar(bits3 & $danfishgold$base64_bytes$Decode$lowest6BitsMask);
		var s = $danfishgold$base64_bytes$Decode$unsafeToChar(bits1 & $danfishgold$base64_bytes$Decode$lowest6BitsMask);
		var r = $danfishgold$base64_bytes$Decode$unsafeToChar((bits1 >>> 6) & $danfishgold$base64_bytes$Decode$lowest6BitsMask);
		var q = $danfishgold$base64_bytes$Decode$unsafeToChar((bits1 >>> 12) & $danfishgold$base64_bytes$Decode$lowest6BitsMask);
		var p = $danfishgold$base64_bytes$Decode$unsafeToChar(bits1 >>> 18);
		var d = $danfishgold$base64_bytes$Decode$unsafeToChar(bits2 & $danfishgold$base64_bytes$Decode$lowest6BitsMask);
		var c = $danfishgold$base64_bytes$Decode$unsafeToChar((bits2 >>> 6) & $danfishgold$base64_bytes$Decode$lowest6BitsMask);
		var b = $danfishgold$base64_bytes$Decode$unsafeToChar((bits2 >>> 12) & $danfishgold$base64_bytes$Decode$lowest6BitsMask);
		var a = $danfishgold$base64_bytes$Decode$unsafeToChar(bits2 >>> 18);
		return A2(
			$elm$core$String$cons,
			x,
			A2(
				$elm$core$String$cons,
				y,
				A2(
					$elm$core$String$cons,
					z,
					A2(
						$elm$core$String$cons,
						w,
						A2(
							$elm$core$String$cons,
							a,
							A2(
								$elm$core$String$cons,
								b,
								A2(
									$elm$core$String$cons,
									c,
									A2(
										$elm$core$String$cons,
										d,
										A2(
											$elm$core$String$cons,
											p,
											A2(
												$elm$core$String$cons,
												q,
												A2(
													$elm$core$String$cons,
													r,
													A2($elm$core$String$cons, s, accum))))))))))));
	});
var $danfishgold$base64_bytes$Decode$decode18Help = F5(
	function (a, b, c, d, e) {
		var combined6 = ((255 & d) << 16) | e;
		var combined5 = d >>> 8;
		var combined4 = 16777215 & c;
		var combined3 = ((65535 & b) << 8) | (c >>> 24);
		var combined2 = ((255 & a) << 16) | (b >>> 16);
		var combined1 = a >>> 8;
		return A4(
			$danfishgold$base64_bytes$Decode$bitsToCharSpecialized,
			combined3,
			combined2,
			combined1,
			A4($danfishgold$base64_bytes$Decode$bitsToCharSpecialized, combined6, combined5, combined4, ''));
	});
var $elm$bytes$Bytes$Decode$unsignedInt16 = function (endianness) {
	return $elm$bytes$Bytes$Decode$Decoder(
		_Bytes_read_u16(
			_Utils_eq(endianness, $elm$bytes$Bytes$LE)));
};
var $danfishgold$base64_bytes$Decode$u16BE = $elm$bytes$Bytes$Decode$unsignedInt16($elm$bytes$Bytes$BE);
var $danfishgold$base64_bytes$Decode$u32BE = $elm$bytes$Bytes$Decode$unsignedInt32($elm$bytes$Bytes$BE);
var $danfishgold$base64_bytes$Decode$decode18Bytes = A6($elm$bytes$Bytes$Decode$map5, $danfishgold$base64_bytes$Decode$decode18Help, $danfishgold$base64_bytes$Decode$u32BE, $danfishgold$base64_bytes$Decode$u32BE, $danfishgold$base64_bytes$Decode$u32BE, $danfishgold$base64_bytes$Decode$u32BE, $danfishgold$base64_bytes$Decode$u16BE);
var $elm$bytes$Bytes$Decode$map3 = F4(
	function (func, _v0, _v1, _v2) {
		var decodeA = _v0.a;
		var decodeB = _v1.a;
		var decodeC = _v2.a;
		return $elm$bytes$Bytes$Decode$Decoder(
			F2(
				function (bites, offset) {
					var _v3 = A2(decodeA, bites, offset);
					var aOffset = _v3.a;
					var a = _v3.b;
					var _v4 = A2(decodeB, bites, aOffset);
					var bOffset = _v4.a;
					var b = _v4.b;
					var _v5 = A2(decodeC, bites, bOffset);
					var cOffset = _v5.a;
					var c = _v5.b;
					return _Utils_Tuple2(
						cOffset,
						A3(func, a, b, c));
				}));
	});
var $elm$bytes$Bytes$Decode$unsignedInt8 = $elm$bytes$Bytes$Decode$Decoder(_Bytes_read_u8);
var $danfishgold$base64_bytes$Decode$loopHelp = function (_v0) {
	var remaining = _v0.remaining;
	var string = _v0.string;
	if (remaining >= 18) {
		return A2(
			$elm$bytes$Bytes$Decode$map,
			function (result) {
				return $elm$bytes$Bytes$Decode$Loop(
					{
						remaining: remaining - 18,
						string: _Utils_ap(string, result)
					});
			},
			$danfishgold$base64_bytes$Decode$decode18Bytes);
	} else {
		if (remaining >= 3) {
			var helper = F3(
				function (a, b, c) {
					var combined = ((a << 16) | (b << 8)) | c;
					return $elm$bytes$Bytes$Decode$Loop(
						{
							remaining: remaining - 3,
							string: _Utils_ap(
								string,
								A2($danfishgold$base64_bytes$Decode$bitsToChars, combined, 0))
						});
				});
			return A4($elm$bytes$Bytes$Decode$map3, helper, $elm$bytes$Bytes$Decode$unsignedInt8, $elm$bytes$Bytes$Decode$unsignedInt8, $elm$bytes$Bytes$Decode$unsignedInt8);
		} else {
			if (!remaining) {
				return $elm$bytes$Bytes$Decode$succeed(
					$elm$bytes$Bytes$Decode$Done(string));
			} else {
				if (remaining === 2) {
					var helper = F2(
						function (a, b) {
							var combined = (a << 16) | (b << 8);
							return $elm$bytes$Bytes$Decode$Done(
								_Utils_ap(
									string,
									A2($danfishgold$base64_bytes$Decode$bitsToChars, combined, 1)));
						});
					return A3($elm$bytes$Bytes$Decode$map2, helper, $elm$bytes$Bytes$Decode$unsignedInt8, $elm$bytes$Bytes$Decode$unsignedInt8);
				} else {
					return A2(
						$elm$bytes$Bytes$Decode$map,
						function (a) {
							return $elm$bytes$Bytes$Decode$Done(
								_Utils_ap(
									string,
									A2($danfishgold$base64_bytes$Decode$bitsToChars, a << 16, 2)));
						},
						$elm$bytes$Bytes$Decode$unsignedInt8);
				}
			}
		}
	}
};
var $danfishgold$base64_bytes$Decode$decoder = function (width) {
	return A2(
		$elm$bytes$Bytes$Decode$loop,
		{remaining: width, string: ''},
		$danfishgold$base64_bytes$Decode$loopHelp);
};
var $danfishgold$base64_bytes$Decode$fromBytes = function (bytes) {
	return A2(
		$elm$bytes$Bytes$Decode$decode,
		$danfishgold$base64_bytes$Decode$decoder(
			$elm$bytes$Bytes$width(bytes)),
		bytes);
};
var $danfishgold$base64_bytes$Base64$fromBytes = $danfishgold$base64_bytes$Decode$fromBytes;
var $folkertdev$elm_sha2$Int64$toEncoder = function (_v0) {
	var higher = _v0.a;
	var lower = _v0.b;
	return $elm$bytes$Bytes$Encode$sequence(
		_List_fromArray(
			[
				A2($elm$bytes$Bytes$Encode$unsignedInt32, $elm$bytes$Bytes$BE, higher),
				A2($elm$bytes$Bytes$Encode$unsignedInt32, $elm$bytes$Bytes$BE, lower)
			]));
};
var $folkertdev$elm_sha2$SHA512$toEncoder = function (_v0) {
	var _v1 = _v0.a;
	var a = _v1.a;
	var b = _v1.b;
	var c = _v1.c;
	var d = _v1.d;
	var e = _v1.e;
	var f = _v1.f;
	var g = _v1.g;
	var h = _v1.h;
	return $elm$bytes$Bytes$Encode$sequence(
		_List_fromArray(
			[
				$folkertdev$elm_sha2$Int64$toEncoder(a),
				$folkertdev$elm_sha2$Int64$toEncoder(b),
				$folkertdev$elm_sha2$Int64$toEncoder(c),
				$folkertdev$elm_sha2$Int64$toEncoder(d),
				$folkertdev$elm_sha2$Int64$toEncoder(e),
				$folkertdev$elm_sha2$Int64$toEncoder(f),
				$folkertdev$elm_sha2$Int64$toEncoder(g),
				$folkertdev$elm_sha2$Int64$toEncoder(h)
			]));
};
var $folkertdev$elm_sha2$SHA512$toBase64 = function (digest) {
	return A2(
		$elm$core$Maybe$withDefault,
		'',
		$danfishgold$base64_bytes$Base64$fromBytes(
			$elm$bytes$Bytes$Encode$encode(
				$folkertdev$elm_sha2$SHA512$toEncoder(digest))));
};
var $author$project$Model$UserPassword$encrypt = function (password) {
	return $folkertdev$elm_sha2$SHA512$toBase64(
		$folkertdev$elm_sha2$SHA512$fromString(password));
};
var $author$project$Model$UserPassword$userPasswordEncoder = function (up) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'username',
				$elm$json$Json$Encode$string(up.username)),
				_Utils_Tuple2(
				'password',
				$elm$json$Json$Encode$string(
					$author$project$Model$UserPassword$encrypt(up.password)))
			]));
};
var $author$project$Page$Signin$signinAttempt = F2(
	function (token, userPassword) {
		return A4(
			$author$project$Api$postRequest,
			token,
			$author$project$Api$Signin,
			$elm$http$Http$jsonBody(
				$author$project$Model$UserPassword$userPasswordEncoder(userPassword)),
			$elm$http$Http$expectString($author$project$Page$Signin$Submitted));
	});
var $author$project$Page$Signin$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'UsernameChanged':
				var newName = msg.a;
				var rename = function (oldUser) {
					return _Utils_update(
						oldUser,
						{username: newName});
				};
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							userPassword: rename(model.userPassword)
						}),
					$elm$core$Platform$Cmd$none,
					$elm$core$Maybe$Nothing);
			case 'PasswordChanged':
				var newPassword = msg.a;
				var repass = function (oldUser) {
					return _Utils_update(
						oldUser,
						{password: newPassword});
				};
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							userPassword: repass(model.userPassword)
						}),
					$elm$core$Platform$Cmd$none,
					$elm$core$Maybe$Nothing);
			case 'Submit':
				return _Utils_Tuple3(
					model,
					A2($author$project$Page$Signin$signinAttempt, model.session.token, model.userPassword),
					$elm$core$Maybe$Nothing);
			default:
				if (msg.a.$ === 'Ok') {
					if (msg.a.a === '') {
						return _Utils_Tuple3(
							_Utils_update(
								model,
								{signinError: $elm$core$Maybe$Nothing, wrongPassword: true}),
							$elm$core$Platform$Cmd$none,
							$elm$core$Maybe$Nothing);
					} else {
						var token = msg.a.a;
						return _Utils_Tuple3(
							model,
							A2($author$project$Route$pushUrl, model.session.navkey, $author$project$Route$Home),
							$elm$core$Maybe$Just(
								$author$project$Page$Signin$ChangeToken(token)));
					}
				} else {
					var err = msg.a.a;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								signinError: $elm$core$Maybe$Just(
									$author$project$Error$buildErrorMessage(err)),
								wrongPassword: false
							}),
						$elm$core$Platform$Cmd$none,
						$elm$core$Maybe$Nothing);
				}
		}
	});
var $author$project$Page$ViewDivision$Coach = {$: 'Coach'};
var $author$project$Page$ViewDivision$CoachDesc = {$: 'CoachDesc'};
var $author$project$Page$ViewDivision$Elo = {$: 'Elo'};
var $author$project$Page$ViewDivision$EloDesc = {$: 'EloDesc'};
var $author$project$Page$ViewDivision$Name = {$: 'Name'};
var $author$project$Page$ViewDivision$NameDesc = {$: 'NameDesc'};
var $author$project$Page$ViewDivision$Race = {$: 'Race'};
var $author$project$Page$ViewDivision$RaceDesc = {$: 'RaceDesc'};
var $author$project$Page$ViewDivision$buildDeleteError = function (res) {
	return res.deleted ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just('Delete Failed. Team not found.');
};
var $author$project$Page$ViewDivision$GameDeleted = function (a) {
	return {$: 'GameDeleted', a: a};
};
var $author$project$Page$ViewDivision$deleteGameRequest = F2(
	function (token, id) {
		return A3(
			$author$project$Api$deleteRequest,
			token,
			$author$project$Api$Game(id),
			A2($elm$http$Http$expectJson, $author$project$Page$ViewDivision$GameDeleted, $author$project$Model$DeleteResponse$deleteResponseDecoder));
	});
var $author$project$Page$ViewDivision$TeamDeleted = function (a) {
	return {$: 'TeamDeleted', a: a};
};
var $author$project$Page$ViewDivision$deleteTeamRequest = F2(
	function (token, id) {
		return A3(
			$author$project$Api$deleteRequest,
			token,
			$author$project$Api$Team(id),
			A2($elm$http$Http$expectJson, $author$project$Page$ViewDivision$TeamDeleted, $author$project$Model$DeleteResponse$deleteResponseDecoder));
	});
var $author$project$Page$ViewDivision$newSort = F3(
	function (_default, alt, oldSort) {
		return _Utils_eq(oldSort, _default) ? alt : _default;
	});
var $author$project$Page$ViewDivision$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'RefreshButtonClick':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{division: $krisajenkins$remotedata$RemoteData$Loading, teams: $krisajenkins$remotedata$RemoteData$Loading}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								A2($author$project$Page$ViewDivision$getTeamsInDivRequest, model.session.token, model.divisionId),
								A2($author$project$Page$ViewDivision$getDivisionRequest, model.session.token, model.divisionId),
								A2($author$project$Page$ViewDivision$getGamesRequest, model.session.token, model.divisionId)
							])));
			case 'TeamsReceived':
				var response = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{teams: response}),
					$elm$core$Platform$Cmd$none);
			case 'GamesReceived':
				var response = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{games: response}),
					$elm$core$Platform$Cmd$none);
			case 'DivisionReceived':
				var response = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{division: response}),
					$elm$core$Platform$Cmd$none);
			case 'AddTeamButtonClick':
				return _Utils_Tuple2(
					model,
					A2(
						$author$project$Route$pushUrl,
						model.session.navkey,
						$author$project$Route$AddTeamToDivision(model.divisionId)));
			case 'EditTeamButtonClick':
				var id = msg.a;
				return _Utils_Tuple2(
					model,
					A2(
						$author$project$Route$pushUrl,
						model.session.navkey,
						$author$project$Route$EditTeam(id)));
			case 'DeleteTeamButtonClick':
				var id = msg.a;
				return _Utils_Tuple2(
					model,
					A2($author$project$Page$ViewDivision$deleteTeamRequest, model.session.token, id));
			case 'TeamDeleted':
				if (msg.a.$ === 'Ok') {
					var res = msg.a.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								deleteError: $author$project$Page$ViewDivision$buildDeleteError(res)
							}),
						A2($author$project$Page$ViewDivision$getTeamsInDivRequest, model.session.token, model.divisionId));
				} else {
					var err = msg.a.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								deleteError: $elm$core$Maybe$Just(
									$author$project$Error$buildErrorMessage(err))
							}),
						$elm$core$Platform$Cmd$none);
				}
			case 'GameDeleted':
				if (msg.a.$ === 'Ok') {
					var res = msg.a.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								deleteError: $author$project$Page$ViewDivision$buildDeleteError(res)
							}),
						A2($author$project$Page$ViewDivision$getGamesRequest, model.session.token, model.divisionId));
				} else {
					var err = msg.a.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								deleteError: $elm$core$Maybe$Just(
									$author$project$Error$buildErrorMessage(err))
							}),
						$elm$core$Platform$Cmd$none);
				}
			case 'TeamNameSortClick':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							sortingMethod: A3($author$project$Page$ViewDivision$newSort, $author$project$Page$ViewDivision$Name, $author$project$Page$ViewDivision$NameDesc, model.sortingMethod)
						}),
					$elm$core$Platform$Cmd$none);
			case 'TeamRaceSortClick':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							sortingMethod: A3($author$project$Page$ViewDivision$newSort, $author$project$Page$ViewDivision$Race, $author$project$Page$ViewDivision$RaceDesc, model.sortingMethod)
						}),
					$elm$core$Platform$Cmd$none);
			case 'TeamCoachSortClick':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							sortingMethod: A3($author$project$Page$ViewDivision$newSort, $author$project$Page$ViewDivision$Coach, $author$project$Page$ViewDivision$CoachDesc, model.sortingMethod)
						}),
					$elm$core$Platform$Cmd$none);
			case 'TeamEloSortClick':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							sortingMethod: A3($author$project$Page$ViewDivision$newSort, $author$project$Page$ViewDivision$Elo, $author$project$Page$ViewDivision$EloDesc, model.sortingMethod)
						}),
					$elm$core$Platform$Cmd$none);
			case 'ChangeWeek':
				var newWeek = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{displayedWeek: newWeek}),
					$elm$core$Platform$Cmd$none);
			case 'DeleteGameButtonClick':
				var id = msg.a;
				return _Utils_Tuple2(
					model,
					A2($author$project$Page$ViewDivision$deleteGameRequest, model.session.token, id));
			case 'EditGameButtonClick':
				var id = msg.a;
				return _Utils_Tuple2(
					model,
					A2(
						$author$project$Route$pushUrl,
						model.session.navkey,
						$author$project$Route$EditGame(id)));
			case 'AddGameButtonClick':
				var week = msg.a;
				return _Utils_Tuple2(
					model,
					A2(
						$author$project$Route$pushUrl,
						model.session.navkey,
						A2($author$project$Route$AddGameWithDefaults, model.divisionId, week)));
			default:
				var week = msg.a;
				return _Utils_Tuple2(
					model,
					A2(
						$author$project$Route$pushUrl,
						model.session.navkey,
						A2($author$project$Route$AddGameWeek, model.divisionId, week)));
		}
	});
var $author$project$Page$wrapUpdateWith = F3(
	function (toModel, toMsg, _v0) {
		var subModel = _v0.a;
		var subCmd = _v0.b;
		return _Utils_Tuple3(
			toModel(subModel),
			A2($elm$core$Platform$Cmd$map, toMsg, subCmd),
			$elm$core$Maybe$Nothing);
	});
var $author$project$Page$wrapUpdateWithOutMsg = F4(
	function (toModel, toMsg, toOutMsg, _v0) {
		var subModel = _v0.a;
		var subCmd = _v0.b;
		var subOut = _v0.c;
		if (subOut.$ === 'Just') {
			var subOutMsg = subOut.a;
			return _Utils_Tuple3(
				toModel(subModel),
				A2($elm$core$Platform$Cmd$map, toMsg, subCmd),
				$elm$core$Maybe$Just(
					toOutMsg(subOutMsg)));
		} else {
			return _Utils_Tuple3(
				toModel(subModel),
				A2($elm$core$Platform$Cmd$map, toMsg, subCmd),
				$elm$core$Maybe$Nothing);
		}
	});
var $author$project$Page$update = F2(
	function (msg, model) {
		var _v0 = _Utils_Tuple2(msg, model);
		switch (_v0.a.$) {
			case 'SigninPageMsg':
				if (_v0.b.$ === 'SigninPage') {
					var subMsg = _v0.a.a;
					var pageModel = _v0.b.a;
					return A4(
						$author$project$Page$wrapUpdateWithOutMsg,
						$author$project$Page$SigninPage,
						$author$project$Page$SigninPageMsg,
						$author$project$Page$SigninPageOutMsg,
						A2($author$project$Page$Signin$update, subMsg, pageModel));
				} else {
					return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
				}
			case 'TeamsPageMsg':
				if (_v0.b.$ === 'TeamsPage') {
					var subMsg = _v0.a.a;
					var pageModel = _v0.b.a;
					return A3(
						$author$project$Page$wrapUpdateWith,
						$author$project$Page$TeamsPage,
						$author$project$Page$TeamsPageMsg,
						A2($author$project$Page$ListTeams$update, subMsg, pageModel));
				} else {
					return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
				}
			case 'AddTeamPageMsg':
				if (_v0.b.$ === 'AddTeamPage') {
					var subMsg = _v0.a.a;
					var pageModel = _v0.b.a;
					return A3(
						$author$project$Page$wrapUpdateWith,
						$author$project$Page$AddTeamPage,
						$author$project$Page$AddTeamPageMsg,
						A2($author$project$Page$AddTeam$update, subMsg, pageModel));
				} else {
					return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
				}
			case 'EditTeamPageMsg':
				if (_v0.b.$ === 'EditTeamPage') {
					var subMsg = _v0.a.a;
					var pageModel = _v0.b.a;
					return A3(
						$author$project$Page$wrapUpdateWith,
						$author$project$Page$EditTeamPage,
						$author$project$Page$EditTeamPageMsg,
						A2($author$project$Page$EditTeam$update, subMsg, pageModel));
				} else {
					return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
				}
			case 'CoachesPageMsg':
				if (_v0.b.$ === 'CoachesPage') {
					var subMsg = _v0.a.a;
					var pageModel = _v0.b.a;
					return A3(
						$author$project$Page$wrapUpdateWith,
						$author$project$Page$CoachesPage,
						$author$project$Page$CoachesPageMsg,
						A2($author$project$Page$ListCoaches$update, subMsg, pageModel));
				} else {
					return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
				}
			case 'AddCoachPageMsg':
				if (_v0.b.$ === 'AddCoachPage') {
					var subMsg = _v0.a.a;
					var pageModel = _v0.b.a;
					return A3(
						$author$project$Page$wrapUpdateWith,
						$author$project$Page$AddCoachPage,
						$author$project$Page$AddCoachPageMsg,
						A2($author$project$Page$AddCoach$update, subMsg, pageModel));
				} else {
					return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
				}
			case 'EditCoachPageMsg':
				if (_v0.b.$ === 'EditCoachPage') {
					var subMsg = _v0.a.a;
					var pageModel = _v0.b.a;
					return A3(
						$author$project$Page$wrapUpdateWith,
						$author$project$Page$EditCoachPage,
						$author$project$Page$EditCoachPageMsg,
						A2($author$project$Page$EditCoach$update, subMsg, pageModel));
				} else {
					return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
				}
			case 'DivisionsPageMsg':
				if (_v0.b.$ === 'DivisionsPage') {
					var subMsg = _v0.a.a;
					var pageModel = _v0.b.a;
					return A3(
						$author$project$Page$wrapUpdateWith,
						$author$project$Page$DivisionsPage,
						$author$project$Page$DivisionsPageMsg,
						A2($author$project$Page$ListDivisions$update, subMsg, pageModel));
				} else {
					return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
				}
			case 'AddDivisionPageMsg':
				if (_v0.b.$ === 'AddDivisionPage') {
					var subMsg = _v0.a.a;
					var pageModel = _v0.b.a;
					return A3(
						$author$project$Page$wrapUpdateWith,
						$author$project$Page$AddDivisionPage,
						$author$project$Page$AddDivisionPageMsg,
						A2($author$project$Page$AddDivision$update, subMsg, pageModel));
				} else {
					return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
				}
			case 'EditDivisionPageMsg':
				if (_v0.b.$ === 'EditDivisionPage') {
					var subMsg = _v0.a.a;
					var pageModel = _v0.b.a;
					return A3(
						$author$project$Page$wrapUpdateWith,
						$author$project$Page$EditDivisionPage,
						$author$project$Page$EditDivisionPageMsg,
						A2($author$project$Page$EditDivision$update, subMsg, pageModel));
				} else {
					return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
				}
			case 'AddGamePageMsg':
				if (_v0.b.$ === 'AddGamePage') {
					var subMsg = _v0.a.a;
					var pageModel = _v0.b.a;
					return A3(
						$author$project$Page$wrapUpdateWith,
						$author$project$Page$AddGamePage,
						$author$project$Page$AddGamePageMsg,
						A2($author$project$Page$AddGame$update, subMsg, pageModel));
				} else {
					return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
				}
			case 'EditGamePageMsg':
				if (_v0.b.$ === 'EditGamePage') {
					var subMsg = _v0.a.a;
					var pageModel = _v0.b.a;
					return A3(
						$author$project$Page$wrapUpdateWith,
						$author$project$Page$EditGamePage,
						$author$project$Page$EditGamePageMsg,
						A2($author$project$Page$EditGame$update, subMsg, pageModel));
				} else {
					return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
				}
			case 'AddTeamToDivPageMsg':
				if (_v0.b.$ === 'AddTeamToDivPage') {
					var subMsg = _v0.a.a;
					var pageModel = _v0.b.a;
					return A3(
						$author$project$Page$wrapUpdateWith,
						$author$project$Page$AddTeamToDivPage,
						$author$project$Page$AddTeamToDivPageMsg,
						A2($author$project$Page$AddTeamToDiv$update, subMsg, pageModel));
				} else {
					return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
				}
			case 'AddGameWeekMsg':
				if (_v0.b.$ === 'AddGameWeekPage') {
					var subMsg = _v0.a.a;
					var pageModel = _v0.b.a;
					return A3(
						$author$project$Page$wrapUpdateWith,
						$author$project$Page$AddGameWeekPage,
						$author$project$Page$AddGameWeekMsg,
						A2($author$project$Page$AddGameWeek$update, subMsg, pageModel));
				} else {
					return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
				}
			default:
				if (_v0.b.$ === 'ViewDivisionPage') {
					var subMsg = _v0.a.a;
					var pageModel = _v0.b.a;
					return A3(
						$author$project$Page$wrapUpdateWith,
						$author$project$Page$ViewDivisionPage,
						$author$project$Page$ViewDivisionPageMsg,
						A2($author$project$Page$ViewDivision$update, subMsg, pageModel));
				} else {
					return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
				}
		}
	});
var $author$project$Main$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'LinkClicked':
				var urlRequest = msg.a;
				if (urlRequest.$ === 'Internal') {
					var url = urlRequest.a;
					return _Utils_Tuple2(
						model,
						A2(
							$elm$browser$Browser$Navigation$pushUrl,
							model.session.navkey,
							$elm$url$Url$toString(url)));
				} else {
					var url = urlRequest.a;
					return _Utils_Tuple2(
						model,
						$elm$browser$Browser$Navigation$load(url));
				}
			case 'UrlChanged':
				var url = msg.a;
				var newRoute = $author$project$Route$parseUrl(url);
				var _v2 = A2($author$project$Page$init, model.session, newRoute);
				var newPage = _v2.a;
				var pageCmds = _v2.b;
				var _v3 = $author$project$Header$init(model.session);
				var headModel = _v3.a;
				var headCommand = _v3.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{headerModel: headModel, page: newPage, route: newRoute}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								A2($elm$core$Platform$Cmd$map, $author$project$Main$PageMsg, pageCmds),
								A2($elm$core$Platform$Cmd$map, $author$project$Main$HeaderMsg, headCommand)
							])));
			case 'HeaderMsg':
				var subMsg = msg.a;
				var _v4 = A2($author$project$Header$update, subMsg, model.headerModel);
				var newHeader = _v4.a;
				var headerCmds = _v4.b;
				var headerOutMsg = _v4.c;
				var _v5 = A2($author$project$Main$processHeaderOutMsg, model, headerOutMsg);
				var newModel = _v5.a;
				var newCmds = _v5.b;
				return _Utils_Tuple2(
					_Utils_update(
						newModel,
						{headerModel: newHeader}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								A2($elm$core$Platform$Cmd$map, $author$project$Main$HeaderMsg, headerCmds),
								newCmds
							])));
			default:
				var subMsg = msg.a;
				var _v6 = A2($author$project$Page$update, subMsg, model.page);
				var newPage = _v6.a;
				var pageCmds = _v6.b;
				var pageOutMsg = _v6.c;
				var _v7 = A2($author$project$Main$processPageOutMsg, model, pageOutMsg);
				var newModel = _v7.a;
				var newCmds = _v7.b;
				return _Utils_Tuple2(
					_Utils_update(
						newModel,
						{page: newPage}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								A2($elm$core$Platform$Cmd$map, $author$project$Main$PageMsg, pageCmds),
								newCmds
							])));
		}
	});
var $elm$virtual_dom$VirtualDom$map = _VirtualDom_map;
var $elm$html$Html$map = $elm$virtual_dom$VirtualDom$map;
var $elm$html$Html$h3 = _VirtualDom_node('h3');
var $elm$virtual_dom$VirtualDom$text = _VirtualDom_text;
var $elm$html$Html$text = $elm$virtual_dom$VirtualDom$text;
var $author$project$Page$notFoundView = A2(
	$elm$html$Html$h3,
	_List_Nil,
	_List_fromArray(
		[
			$elm$html$Html$text('Oops! The page you requested was not found!')
		]));
var $elm$html$Html$br = _VirtualDom_node('br');
var $elm$html$Html$div = _VirtualDom_node('div');
var $elm$virtual_dom$VirtualDom$style = _VirtualDom_style;
var $elm$html$Html$Attributes$style = $elm$virtual_dom$VirtualDom$style;
var $author$project$Custom$Attributes$errorMessage = A2($elm$html$Html$Attributes$style, 'color', '#d00');
var $author$project$Page$AddCoach$viewError = function (maybeError) {
	if (maybeError.$ === 'Just') {
		var error = maybeError.a;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[$author$project$Custom$Attributes$errorMessage]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$h3,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text('Couldn\'t save a coach at this time.')
						])),
					$elm$html$Html$text('Error: ' + error),
					A2($elm$html$Html$br, _List_Nil, _List_Nil)
				]));
	} else {
		return $elm$html$Html$text('');
	}
};
var $author$project$Page$AddCoach$NameChanged = function (a) {
	return {$: 'NameChanged', a: a};
};
var $author$project$Page$AddCoach$Submit = {$: 'Submit'};
var $elm$html$Html$button = _VirtualDom_node('button');
var $elm$html$Html$Attributes$stringProperty = F2(
	function (key, string) {
		return A2(
			_VirtualDom_property,
			key,
			$elm$json$Json$Encode$string(string));
	});
var $elm$html$Html$Attributes$class = $elm$html$Html$Attributes$stringProperty('className');
var $author$project$Custom$Attributes$formEntry = $elm$html$Html$Attributes$class('mb-3');
var $elm$html$Html$Attributes$id = $elm$html$Html$Attributes$stringProperty('id');
var $author$project$Custom$Attributes$formInput = F2(
	function (thisId, otherAttributes) {
		return _Utils_ap(
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('form-control'),
					$elm$html$Html$Attributes$id(thisId)
				]),
			otherAttributes);
	});
var $elm$html$Html$Attributes$for = $elm$html$Html$Attributes$stringProperty('htmlFor');
var $author$project$Custom$Attributes$formLabel = function (id) {
	return _List_fromArray(
		[
			$elm$html$Html$Attributes$class('form-label'),
			$elm$html$Html$Attributes$for(id)
		]);
};
var $elm$html$Html$input = _VirtualDom_node('input');
var $elm$html$Html$label = _VirtualDom_node('label');
var $elm$virtual_dom$VirtualDom$Normal = function (a) {
	return {$: 'Normal', a: a};
};
var $elm$virtual_dom$VirtualDom$on = _VirtualDom_on;
var $elm$html$Html$Events$on = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$Normal(decoder));
	});
var $elm$html$Html$Events$onClick = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'click',
		$elm$json$Json$Decode$succeed(msg));
};
var $elm$json$Json$Decode$fail = _Json_fail;
var $elm$html$Html$Events$keyCode = A2($elm$json$Json$Decode$field, 'keyCode', $elm$json$Json$Decode$int);
var $author$project$Custom$Events$onEnter = function (msg) {
	var isEnter = function (code) {
		return (code === 13) ? $elm$json$Json$Decode$succeed(msg) : $elm$json$Json$Decode$fail('not ENTER');
	};
	return A2(
		$elm$html$Html$Events$on,
		'keydown',
		A2($elm$json$Json$Decode$andThen, isEnter, $elm$html$Html$Events$keyCode));
};
var $elm$html$Html$Events$alwaysStop = function (x) {
	return _Utils_Tuple2(x, true);
};
var $elm$virtual_dom$VirtualDom$MayStopPropagation = function (a) {
	return {$: 'MayStopPropagation', a: a};
};
var $elm$html$Html$Events$stopPropagationOn = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$MayStopPropagation(decoder));
	});
var $elm$html$Html$Events$targetValue = A2(
	$elm$json$Json$Decode$at,
	_List_fromArray(
		['target', 'value']),
	$elm$json$Json$Decode$string);
var $elm$html$Html$Events$onInput = function (tagger) {
	return A2(
		$elm$html$Html$Events$stopPropagationOn,
		'input',
		A2(
			$elm$json$Json$Decode$map,
			$elm$html$Html$Events$alwaysStop,
			A2($elm$json$Json$Decode$map, tagger, $elm$html$Html$Events$targetValue)));
};
var $author$project$Custom$Attributes$submitButton = $elm$html$Html$Attributes$class('btn btn-primary');
var $elm$html$Html$Attributes$value = $elm$html$Html$Attributes$stringProperty('value');
var $author$project$Page$AddCoach$viewForm = function (coach) {
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		_List_fromArray(
			[
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[$author$project$Custom$Attributes$formEntry]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$label,
						$author$project$Custom$Attributes$formLabel('nameInput'),
						_List_fromArray(
							[
								$elm$html$Html$text('Name')
							])),
						A2(
						$elm$html$Html$input,
						A2(
							$author$project$Custom$Attributes$formInput,
							'nameInput',
							_List_fromArray(
								[
									$elm$html$Html$Events$onInput($author$project$Page$AddCoach$NameChanged),
									$author$project$Custom$Events$onEnter($author$project$Page$AddCoach$Submit),
									$elm$html$Html$Attributes$value(coach.name)
								])),
						_List_Nil)
					])),
				A2(
				$elm$html$Html$button,
				_List_fromArray(
					[
						$author$project$Custom$Attributes$submitButton,
						$elm$html$Html$Events$onClick($author$project$Page$AddCoach$Submit)
					]),
				_List_fromArray(
					[
						$elm$html$Html$text('Add')
					]))
			]));
};
var $author$project$Page$AddCoach$view = function (model) {
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		_List_fromArray(
			[
				A2(
				$elm$html$Html$h3,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text('Add Coach')
					])),
				A2($elm$html$Html$br, _List_Nil, _List_Nil),
				$author$project$Page$AddCoach$viewError(model.submitError),
				$author$project$Page$AddCoach$viewForm(model.coach)
			]));
};
var $author$project$Page$AddDivision$Submit = {$: 'Submit'};
var $author$project$Page$AddDivision$NameChanged = function (a) {
	return {$: 'NameChanged', a: a};
};
var $author$project$Page$AddDivision$viewNameField = function (division) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[$author$project$Custom$Attributes$formEntry]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$label,
				$author$project$Custom$Attributes$formLabel('nameInput'),
				_List_fromArray(
					[
						$elm$html$Html$text('Name')
					])),
				A2(
				$elm$html$Html$input,
				A2(
					$author$project$Custom$Attributes$formInput,
					'nameInput',
					_List_fromArray(
						[
							$elm$html$Html$Events$onInput($author$project$Page$AddDivision$NameChanged),
							$elm$html$Html$Attributes$value(division.name)
						])),
				_List_Nil)
			]));
};
var $author$project$Page$AddDivision$SeasonChanged = function (a) {
	return {$: 'SeasonChanged', a: a};
};
var $author$project$Page$AddDivision$viewSeasonField = function (division) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[$author$project$Custom$Attributes$formEntry]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$label,
				$author$project$Custom$Attributes$formLabel('seasonInput'),
				_List_fromArray(
					[
						$elm$html$Html$text('Season')
					])),
				A2(
				$elm$html$Html$input,
				A2(
					$author$project$Custom$Attributes$formInput,
					'seasonInput',
					_List_fromArray(
						[
							$elm$html$Html$Events$onInput($author$project$Page$AddDivision$SeasonChanged),
							$author$project$Custom$Events$onEnter($author$project$Page$AddDivision$Submit),
							$elm$html$Html$Attributes$value(
							$elm$core$String$fromInt(division.season))
						])),
				_List_Nil)
			]));
};
var $author$project$Page$AddDivision$viewForm = function (model) {
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		_List_fromArray(
			[
				$author$project$Page$AddDivision$viewNameField(model.division),
				$author$project$Page$AddDivision$viewSeasonField(model.division),
				A2(
				$elm$html$Html$button,
				_List_fromArray(
					[
						$author$project$Custom$Attributes$submitButton,
						$elm$html$Html$Events$onClick($author$project$Page$AddDivision$Submit)
					]),
				_List_fromArray(
					[
						$elm$html$Html$text('Add')
					]))
			]));
};
var $author$project$Page$AddDivision$viewSubmitError = function (maybeError) {
	if (maybeError.$ === 'Just') {
		var error = maybeError.a;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[$author$project$Custom$Attributes$errorMessage]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$h3,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text('Couldn\'t save a division at this time.')
						])),
					$elm$html$Html$text('Error: ' + error),
					A2($elm$html$Html$br, _List_Nil, _List_Nil)
				]));
	} else {
		return $elm$html$Html$text('');
	}
};
var $author$project$Page$AddDivision$view = function (model) {
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		_List_fromArray(
			[
				A2(
				$elm$html$Html$h3,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text('Add Division')
					])),
				A2($elm$html$Html$br, _List_Nil, _List_Nil),
				$author$project$Page$AddDivision$viewSubmitError(model.submitError),
				$author$project$Page$AddDivision$viewForm(model)
			]));
};
var $author$project$Page$AddGame$Submit = {$: 'Submit'};
var $author$project$Page$AddGame$AwayTeamSelected = function (a) {
	return {$: 'AwayTeamSelected', a: a};
};
var $elm$html$Html$option = _VirtualDom_node('option');
var $elm$html$Html$Attributes$boolProperty = F2(
	function (key, bool) {
		return A2(
			_VirtualDom_property,
			key,
			$elm$json$Json$Encode$bool(bool));
	});
var $elm$html$Html$Attributes$selected = $elm$html$Html$Attributes$boolProperty('selected');
var $author$project$Page$AddGame$awayTeamOption = F2(
	function (game, team) {
		return A2(
			$elm$html$Html$option,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$value(
					$author$project$Model$Team$idToString(team.id)),
					$elm$html$Html$Attributes$selected(
					_Utils_eq(team.id, game.awayTeam.id))
				]),
			_List_fromArray(
				[
					$elm$html$Html$text(team.name)
				]));
	});
var $author$project$Page$AddGame$defaultOption = A2(
	$elm$html$Html$option,
	_List_fromArray(
		[
			$elm$html$Html$Attributes$value('0')
		]),
	_List_fromArray(
		[
			$elm$html$Html$text('-')
		]));
var $author$project$Custom$Attributes$formDropdown = F2(
	function (thisId, otherAttributes) {
		return A2(
			$author$project$Custom$Attributes$formInput,
			thisId,
			A2(
				$elm$core$List$cons,
				$elm$html$Html$Attributes$class('form-select'),
				otherAttributes));
	});
var $elm$html$Html$select = _VirtualDom_node('select');
var $author$project$Page$AddGame$awayTeamDropdown = F2(
	function (game, teams) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[$author$project$Custom$Attributes$formEntry]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$label,
					$author$project$Custom$Attributes$formLabel('awayTeamDropdown'),
					_List_fromArray(
						[
							$elm$html$Html$text('Away Team')
						])),
					A2(
					$elm$html$Html$select,
					A2(
						$author$project$Custom$Attributes$formDropdown,
						'awayTeamDropdown',
						_List_fromArray(
							[
								$elm$html$Html$Events$onInput($author$project$Page$AddGame$AwayTeamSelected)
							])),
					A2(
						$elm$core$List$cons,
						$author$project$Page$AddGame$defaultOption,
						A2(
							$elm$core$List$map,
							$author$project$Page$AddGame$awayTeamOption(game),
							teams)))
				]));
	});
var $author$project$Page$AddGame$DivisionSelected = function (a) {
	return {$: 'DivisionSelected', a: a};
};
var $author$project$Page$AddGame$divOption = F2(
	function (game, division) {
		return A2(
			$elm$html$Html$option,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$value(
					$author$project$Model$Division$idToString(division.id)),
					$elm$html$Html$Attributes$selected(
					_Utils_eq(division.id, game.division.id))
				]),
			_List_fromArray(
				[
					$elm$html$Html$text(
					division.name + (' Season ' + $elm$core$String$fromInt(division.season)))
				]));
	});
var $author$project$Page$AddGame$divisionDropdown = F2(
	function (game, divs) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[$author$project$Custom$Attributes$formEntry]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$label,
					$author$project$Custom$Attributes$formLabel('divDropdown'),
					_List_fromArray(
						[
							$elm$html$Html$text('Division')
						])),
					A2(
					$elm$html$Html$select,
					A2(
						$author$project$Custom$Attributes$formDropdown,
						'divDropdown',
						_List_fromArray(
							[
								$elm$html$Html$Events$onInput($author$project$Page$AddGame$DivisionSelected)
							])),
					A2(
						$elm$core$List$cons,
						$author$project$Page$AddGame$defaultOption,
						A2(
							$elm$core$List$map,
							$author$project$Page$AddGame$divOption(game),
							divs)))
				]));
	});
var $krisajenkins$remotedata$RemoteData$andThen = F2(
	function (f, data) {
		switch (data.$) {
			case 'Success':
				var a = data.a;
				return f(a);
			case 'Failure':
				var e = data.a;
				return $krisajenkins$remotedata$RemoteData$Failure(e);
			case 'NotAsked':
				return $krisajenkins$remotedata$RemoteData$NotAsked;
			default:
				return $krisajenkins$remotedata$RemoteData$Loading;
		}
	});
var $author$project$Page$AddGame$filterWebData = function (filterFunc) {
	return $krisajenkins$remotedata$RemoteData$andThen(
		A2(
			$elm$core$Basics$composeR,
			$elm$core$List$filter(filterFunc),
			$krisajenkins$remotedata$RemoteData$Success));
};
var $author$project$Page$AddGame$HomeTeamSelected = function (a) {
	return {$: 'HomeTeamSelected', a: a};
};
var $author$project$Page$AddGame$homeTeamOption = F2(
	function (game, team) {
		return A2(
			$elm$html$Html$option,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$value(
					$author$project$Model$Team$idToString(team.id)),
					$elm$html$Html$Attributes$selected(
					_Utils_eq(team.id, game.homeTeam.id))
				]),
			_List_fromArray(
				[
					$elm$html$Html$text(team.name)
				]));
	});
var $author$project$Page$AddGame$homeTeamDropdown = F2(
	function (game, teams) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[$author$project$Custom$Attributes$formEntry]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$label,
					$author$project$Custom$Attributes$formLabel('homeTeamDropdown'),
					_List_fromArray(
						[
							$elm$html$Html$text('Home Team')
						])),
					A2(
					$elm$html$Html$select,
					A2(
						$author$project$Custom$Attributes$formDropdown,
						'homeTeamDropdown',
						_List_fromArray(
							[
								$elm$html$Html$Events$onInput($author$project$Page$AddGame$HomeTeamSelected)
							])),
					A2(
						$elm$core$List$cons,
						$author$project$Page$AddGame$defaultOption,
						A2(
							$elm$core$List$map,
							$author$project$Page$AddGame$homeTeamOption(game),
							teams)))
				]));
	});
var $elm$core$Basics$neq = _Utils_notEqual;
var $author$project$Page$AddGame$AwayScoreChanged = function (a) {
	return {$: 'AwayScoreChanged', a: a};
};
var $author$project$Page$AddGame$stringFromMaybeInt = function (i) {
	return A2(
		$elm$core$Maybe$withDefault,
		'',
		A2(
			$elm$core$Maybe$andThen,
			A2($elm$core$Basics$composeR, $elm$core$String$fromInt, $elm$core$Maybe$Just),
			i));
};
var $author$project$Page$AddGame$viewAwayScoreField = function (val) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[$author$project$Custom$Attributes$formEntry]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$label,
				$author$project$Custom$Attributes$formLabel('awayScoreInput'),
				_List_fromArray(
					[
						$elm$html$Html$text('Away Score')
					])),
				A2(
				$elm$html$Html$input,
				A2(
					$author$project$Custom$Attributes$formInput,
					'awayScoreInput',
					_List_fromArray(
						[
							$elm$html$Html$Events$onInput($author$project$Page$AddGame$AwayScoreChanged),
							$author$project$Custom$Events$onEnter($author$project$Page$AddGame$Submit),
							$elm$html$Html$Attributes$value(
							$author$project$Page$AddGame$stringFromMaybeInt(val))
						])),
				_List_Nil)
			]));
};
var $elm$html$Html$h4 = _VirtualDom_node('h4');
var $author$project$Page$AddGame$viewDropdown = F3(
	function (game, data, dropDownFunction) {
		switch (data.$) {
			case 'NotAsked':
				return A2(dropDownFunction, game, _List_Nil);
			case 'Loading':
				return A2(
					$elm$html$Html$h4,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text('Loading Options...')
						]));
			case 'Failure':
				var httpError = data.a;
				return A2(
					$elm$html$Html$h4,
					_List_fromArray(
						[$author$project$Custom$Attributes$errorMessage]),
					_List_fromArray(
						[
							$elm$html$Html$text(
							'Cannot load Options. ' + $author$project$Error$buildErrorMessage(httpError))
						]));
			default:
				var d = data.a;
				return A2(
					dropDownFunction,
					game,
					A2(
						$elm$core$List$sortBy,
						function ($) {
							return $.name;
						},
						d));
		}
	});
var $author$project$Page$AddGame$HomeScoreChanged = function (a) {
	return {$: 'HomeScoreChanged', a: a};
};
var $author$project$Page$AddGame$viewHomeScoreField = function (val) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[$author$project$Custom$Attributes$formEntry]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$label,
				$author$project$Custom$Attributes$formLabel('homeScoreInput'),
				_List_fromArray(
					[
						$elm$html$Html$text('Home Score')
					])),
				A2(
				$elm$html$Html$input,
				A2(
					$author$project$Custom$Attributes$formInput,
					'homeScoreInput',
					_List_fromArray(
						[
							$elm$html$Html$Events$onInput($author$project$Page$AddGame$HomeScoreChanged),
							$elm$html$Html$Attributes$value(
							$author$project$Page$AddGame$stringFromMaybeInt(val))
						])),
				_List_Nil)
			]));
};
var $author$project$Page$AddGame$WeekChanged = function (a) {
	return {$: 'WeekChanged', a: a};
};
var $author$project$Page$AddGame$viewWeekField = function (val) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[$author$project$Custom$Attributes$formEntry]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$label,
				$author$project$Custom$Attributes$formLabel('weekInput'),
				_List_fromArray(
					[
						$elm$html$Html$text('Week')
					])),
				A2(
				$elm$html$Html$input,
				A2(
					$author$project$Custom$Attributes$formInput,
					'weekInput',
					_List_fromArray(
						[
							$elm$html$Html$Events$onInput($author$project$Page$AddGame$WeekChanged),
							$elm$html$Html$Attributes$value(
							$elm$core$String$fromInt(val))
						])),
				_List_Nil)
			]));
};
var $author$project$Page$AddGame$viewGame = F2(
	function (model, game) {
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					A3($author$project$Page$AddGame$viewDropdown, game, model.divisionOptions, $author$project$Page$AddGame$divisionDropdown),
					$author$project$Page$AddGame$viewWeekField(game.week),
					A3(
					$author$project$Page$AddGame$viewDropdown,
					game,
					A2(
						$author$project$Page$AddGame$filterWebData,
						function (team) {
							return !_Utils_eq(team.id, game.awayTeam.id);
						},
						model.teamOptions),
					$author$project$Page$AddGame$homeTeamDropdown),
					$author$project$Page$AddGame$viewHomeScoreField(game.homeScore),
					A3(
					$author$project$Page$AddGame$viewDropdown,
					game,
					A2(
						$author$project$Page$AddGame$filterWebData,
						function (team) {
							return !_Utils_eq(team.id, game.homeTeam.id);
						},
						model.teamOptions),
					$author$project$Page$AddGame$awayTeamDropdown),
					$author$project$Page$AddGame$viewAwayScoreField(game.awayScore),
					A2(
					$elm$html$Html$button,
					_List_fromArray(
						[
							$author$project$Custom$Attributes$submitButton,
							$elm$html$Html$Events$onClick($author$project$Page$AddGame$Submit)
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('Save')
						]))
				]));
	});
var $author$project$Page$AddGame$viewSaveError = function (maybeError) {
	if (maybeError.$ === 'Just') {
		var error = maybeError.a;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[$author$project$Custom$Attributes$errorMessage]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$h3,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text('Couldn\'t save a game at this time.')
						])),
					$elm$html$Html$text('Error: ' + error),
					A2($elm$html$Html$br, _List_Nil, _List_Nil)
				]));
	} else {
		return $elm$html$Html$text('');
	}
};
var $author$project$Page$AddGame$view = function (model) {
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		_List_fromArray(
			[
				A2(
				$elm$html$Html$h3,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text('Add Game')
					])),
				A2($elm$html$Html$br, _List_Nil, _List_Nil),
				$author$project$Page$AddGame$viewSaveError(model.saveError),
				A2($author$project$Page$AddGame$viewGame, model, model.game)
			]));
};
var $elm$html$Html$h5 = _VirtualDom_node('h5');
var $author$project$Page$AddGameWeek$Submit = {$: 'Submit'};
var $author$project$Page$AddGameWeek$submitButton = A2(
	$elm$html$Html$button,
	_List_fromArray(
		[
			$author$project$Custom$Attributes$submitButton,
			$elm$html$Html$Events$onClick($author$project$Page$AddGameWeek$Submit)
		]),
	_List_fromArray(
		[
			$elm$html$Html$text('Add Games')
		]));
var $author$project$Page$AddGameWeek$AwayTeamSelected = F2(
	function (a, b) {
		return {$: 'AwayTeamSelected', a: a, b: b};
	});
var $author$project$Page$AddGameWeek$awayTeamOption = F2(
	function (game, team) {
		return A2(
			$elm$html$Html$option,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$value(
					$author$project$Model$Team$idToString(team.id)),
					$elm$html$Html$Attributes$selected(
					_Utils_eq(team.id, game.awayTeam.id))
				]),
			_List_fromArray(
				[
					$elm$html$Html$text(team.name)
				]));
	});
var $author$project$Custom$Attributes$col = $elm$html$Html$Attributes$class('col');
var $author$project$Page$AddGameWeek$defaultOption = A2(
	$elm$html$Html$option,
	_List_fromArray(
		[
			$elm$html$Html$Attributes$value('0')
		]),
	_List_fromArray(
		[
			$elm$html$Html$text('-')
		]));
var $author$project$Page$AddGameWeek$awayTeamDropdown = F3(
	function (gameIndex, game, teams) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[$author$project$Custom$Attributes$col]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$select,
					A2(
						$author$project$Custom$Attributes$formDropdown,
						'awayTeamDropdown',
						_List_fromArray(
							[
								$elm$html$Html$Events$onInput(
								$author$project$Page$AddGameWeek$AwayTeamSelected(gameIndex))
							])),
					A2(
						$elm$core$List$cons,
						$author$project$Page$AddGameWeek$defaultOption,
						A2(
							$elm$core$List$map,
							$author$project$Page$AddGameWeek$awayTeamOption(game),
							A2(
								$elm$core$List$filter,
								function (team) {
									return !_Utils_eq(team.id, game.homeTeam.id);
								},
								teams))))
				]));
	});
var $author$project$Page$AddGameWeek$HomeTeamSelected = F2(
	function (a, b) {
		return {$: 'HomeTeamSelected', a: a, b: b};
	});
var $author$project$Page$AddGameWeek$homeTeamOption = F2(
	function (game, team) {
		return A2(
			$elm$html$Html$option,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$value(
					$author$project$Model$Team$idToString(team.id)),
					$elm$html$Html$Attributes$selected(
					_Utils_eq(team.id, game.homeTeam.id))
				]),
			_List_fromArray(
				[
					$elm$html$Html$text(team.name)
				]));
	});
var $author$project$Page$AddGameWeek$homeTeamDropdown = F3(
	function (gameIndex, game, teams) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[$author$project$Custom$Attributes$col]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$select,
					A2(
						$author$project$Custom$Attributes$formDropdown,
						'homeTeamDropdown',
						_List_fromArray(
							[
								$elm$html$Html$Events$onInput(
								$author$project$Page$AddGameWeek$HomeTeamSelected(gameIndex))
							])),
					A2(
						$elm$core$List$cons,
						$author$project$Page$AddGameWeek$defaultOption,
						A2(
							$elm$core$List$map,
							$author$project$Page$AddGameWeek$homeTeamOption(game),
							A2(
								$elm$core$List$filter,
								function (team) {
									return !_Utils_eq(team.id, game.awayTeam.id);
								},
								teams))))
				]));
	});
var $author$project$Custom$Attributes$row = _List_fromArray(
	[
		$elm$html$Html$Attributes$class('row'),
		A2($elm$html$Html$Attributes$style, 'padding-bottom', '6px')
	]);
var $author$project$Page$AddGameWeek$viewDropdown = F3(
	function (game, data, dropDownFunction) {
		switch (data.$) {
			case 'NotAsked':
				return A2(dropDownFunction, game, _List_Nil);
			case 'Loading':
				return A2(
					$elm$html$Html$h4,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text('Loading Options...')
						]));
			case 'Failure':
				var httpError = data.a;
				return A2(
					$elm$html$Html$h4,
					_List_fromArray(
						[$author$project$Custom$Attributes$errorMessage]),
					_List_fromArray(
						[
							$elm$html$Html$text(
							'Cannot load Options. ' + $author$project$Error$buildErrorMessage(httpError))
						]));
			default:
				var d = data.a;
				return A2(
					dropDownFunction,
					game,
					A2(
						$elm$core$List$sortBy,
						function ($) {
							return $.name;
						},
						d));
		}
	});
var $author$project$Page$AddGameWeek$viewGame = F3(
	function (model, game, gameIndex) {
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					$author$project$Custom$Attributes$row,
					_List_fromArray(
						[
							A3(
							$author$project$Page$AddGameWeek$viewDropdown,
							game,
							model.teams,
							$author$project$Page$AddGameWeek$homeTeamDropdown(gameIndex)),
							$elm$html$Html$text(' vs. '),
							A3(
							$author$project$Page$AddGameWeek$viewDropdown,
							game,
							model.teams,
							$author$project$Page$AddGameWeek$awayTeamDropdown(gameIndex))
						])),
					A2($elm$html$Html$br, _List_Nil, _List_Nil)
				]));
	});
var $author$project$Page$AddGameWeek$viewForm = function (model) {
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		A2(
			$elm$core$List$append,
			A3(
				$elm$core$List$map2,
				$author$project$Page$AddGameWeek$viewGame(model),
				model.games,
				A2(
					$elm$core$List$range,
					0,
					$elm$core$List$length(model.games))),
			_List_fromArray(
				[$author$project$Page$AddGameWeek$submitButton])));
};
var $author$project$Page$AddGameWeek$viewSubmitErrors = function (errors) {
	return ($elm$core$List$length(errors) > 0) ? A2(
		$elm$html$Html$div,
		_List_fromArray(
			[$author$project$Custom$Attributes$errorMessage]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$h3,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text('Couldn\'t save a team at this time.')
					])),
				$elm$html$Html$text(
				'Error: ' + A3(
					$elm$core$List$foldl,
					F2(
						function (a, b) {
							return a + (' ' + b);
						}),
					'',
					errors)),
				A2($elm$html$Html$br, _List_Nil, _List_Nil)
			])) : $elm$html$Html$text('');
};
var $author$project$Page$AddGameWeek$view = function (model) {
	var _v0 = model.division;
	switch (_v0.$) {
		case 'Success':
			var division = _v0.a;
			return A2(
				$elm$html$Html$div,
				_List_Nil,
				_List_fromArray(
					[
						A2(
						$elm$html$Html$h3,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text(
								division.name + (' Season ' + $elm$core$String$fromInt(division.season)))
							])),
						A2(
						$elm$html$Html$h5,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text(
								'Week ' + $elm$core$String$fromInt(model.week))
							])),
						A2($elm$html$Html$br, _List_Nil, _List_Nil),
						$author$project$Page$AddGameWeek$viewSubmitErrors(model.submitErrors),
						$author$project$Page$AddGameWeek$viewForm(model)
					]));
		case 'NotAsked':
			return $elm$html$Html$text('');
		case 'Loading':
			return A2(
				$elm$html$Html$h4,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text('Loading...')
					]));
		default:
			var httpError = _v0.a;
			return A2(
				$elm$html$Html$h4,
				_List_fromArray(
					[$author$project$Custom$Attributes$errorMessage]),
				_List_fromArray(
					[
						$elm$html$Html$text(
						'Cannot load Division. ' + $author$project$Error$buildErrorMessage(httpError))
					]));
	}
};
var $author$project$Page$AddTeam$Submit = {$: 'Submit'};
var $author$project$Page$AddTeam$CoachSelected = function (a) {
	return {$: 'CoachSelected', a: a};
};
var $author$project$Page$AddTeam$coachOption = F2(
	function (team, coach) {
		return A2(
			$elm$html$Html$option,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$value(
					$author$project$Model$Coach$idToString(coach.id)),
					$elm$html$Html$Attributes$selected(
					_Utils_eq(coach.id, team.coach.id))
				]),
			_List_fromArray(
				[
					$elm$html$Html$text(coach.name)
				]));
	});
var $author$project$Page$AddTeam$defaultOption = A2(
	$elm$html$Html$option,
	_List_fromArray(
		[
			$elm$html$Html$Attributes$value('0')
		]),
	_List_fromArray(
		[
			$elm$html$Html$text('-')
		]));
var $author$project$Page$AddTeam$coachDropdown = F2(
	function (team, coaches) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[$author$project$Custom$Attributes$formEntry]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$label,
					$author$project$Custom$Attributes$formLabel('coachDropdown'),
					_List_fromArray(
						[
							$elm$html$Html$text('Coach')
						])),
					A2(
					$elm$html$Html$select,
					A2(
						$author$project$Custom$Attributes$formDropdown,
						'coachDropdown',
						_List_fromArray(
							[
								$elm$html$Html$Events$onInput($author$project$Page$AddTeam$CoachSelected)
							])),
					A2(
						$elm$core$List$cons,
						$author$project$Page$AddTeam$defaultOption,
						A2(
							$elm$core$List$map,
							$author$project$Page$AddTeam$coachOption(team),
							coaches)))
				]));
	});
var $author$project$Page$AddTeam$viewCoachField = F2(
	function (team, data) {
		switch (data.$) {
			case 'NotAsked':
				return $elm$html$Html$text('');
			case 'Loading':
				return A2(
					$elm$html$Html$h4,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text('Loading Options...')
						]));
			case 'Failure':
				var httpError = data.a;
				return A2(
					$elm$html$Html$h4,
					_List_fromArray(
						[$author$project$Custom$Attributes$errorMessage]),
					_List_fromArray(
						[
							$elm$html$Html$text(
							'Cannot load Options. ' + $author$project$Error$buildErrorMessage(httpError))
						]));
			default:
				var coaches = data.a;
				return A2(
					$author$project$Page$AddTeam$coachDropdown,
					team,
					A2(
						$elm$core$List$sortBy,
						function ($) {
							return $.name;
						},
						coaches));
		}
	});
var $author$project$Page$AddTeam$NameChanged = function (a) {
	return {$: 'NameChanged', a: a};
};
var $author$project$Page$AddTeam$viewNameField = function (team) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[$author$project$Custom$Attributes$formEntry]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$label,
				$author$project$Custom$Attributes$formLabel('nameInput'),
				_List_fromArray(
					[
						$elm$html$Html$text('Name')
					])),
				A2(
				$elm$html$Html$input,
				A2(
					$author$project$Custom$Attributes$formInput,
					'nameInput',
					_List_fromArray(
						[
							$elm$html$Html$Events$onInput($author$project$Page$AddTeam$NameChanged),
							$author$project$Custom$Events$onEnter($author$project$Page$AddTeam$Submit),
							$elm$html$Html$Attributes$value(team.name)
						])),
				_List_Nil)
			]));
};
var $author$project$Page$AddTeam$RaceSelected = function (a) {
	return {$: 'RaceSelected', a: a};
};
var $author$project$Page$AddTeam$raceOption = F2(
	function (team, race) {
		return A2(
			$elm$html$Html$option,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$value(
					$author$project$Model$Race$idToString(race.id)),
					$elm$html$Html$Attributes$selected(
					_Utils_eq(race.id, team.race.id))
				]),
			_List_fromArray(
				[
					$elm$html$Html$text(race.name)
				]));
	});
var $author$project$Page$AddTeam$raceDropdown = F2(
	function (team, races) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[$author$project$Custom$Attributes$formEntry]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$label,
					$author$project$Custom$Attributes$formLabel('raceDropdown'),
					_List_fromArray(
						[
							$elm$html$Html$text('Race')
						])),
					A2(
					$elm$html$Html$select,
					A2(
						$author$project$Custom$Attributes$formDropdown,
						'raceDropdown',
						_List_fromArray(
							[
								$elm$html$Html$Events$onInput($author$project$Page$AddTeam$RaceSelected)
							])),
					A2(
						$elm$core$List$cons,
						$author$project$Page$AddTeam$defaultOption,
						A2(
							$elm$core$List$map,
							$author$project$Page$AddTeam$raceOption(team),
							races)))
				]));
	});
var $author$project$Page$AddTeam$viewRaceField = F2(
	function (team, data) {
		switch (data.$) {
			case 'NotAsked':
				return $elm$html$Html$text('');
			case 'Loading':
				return A2(
					$elm$html$Html$h4,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text('Loading Options...')
						]));
			case 'Failure':
				var httpError = data.a;
				return A2(
					$elm$html$Html$h4,
					_List_fromArray(
						[$author$project$Custom$Attributes$errorMessage]),
					_List_fromArray(
						[
							$elm$html$Html$text(
							'Cannot load Options. ' + $author$project$Error$buildErrorMessage(httpError))
						]));
			default:
				var races = data.a;
				return A2(
					$author$project$Page$AddTeam$raceDropdown,
					team,
					A2(
						$elm$core$List$sortBy,
						function ($) {
							return $.name;
						},
						races));
		}
	});
var $author$project$Page$AddTeam$viewForm = function (model) {
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		_List_fromArray(
			[
				$author$project$Page$AddTeam$viewNameField(model.team),
				A2($author$project$Page$AddTeam$viewRaceField, model.team, model.raceOptions),
				A2($author$project$Page$AddTeam$viewCoachField, model.team, model.coachOptions),
				A2(
				$elm$html$Html$button,
				_List_fromArray(
					[
						$author$project$Custom$Attributes$submitButton,
						$elm$html$Html$Events$onClick($author$project$Page$AddTeam$Submit)
					]),
				_List_fromArray(
					[
						$elm$html$Html$text('Add')
					]))
			]));
};
var $author$project$Page$AddTeam$viewSubmitError = function (maybeError) {
	if (maybeError.$ === 'Just') {
		var error = maybeError.a;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[$author$project$Custom$Attributes$errorMessage]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$h3,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text('Couldn\'t save a team at this time.')
						])),
					$elm$html$Html$text('Error: ' + error),
					A2($elm$html$Html$br, _List_Nil, _List_Nil)
				]));
	} else {
		return $elm$html$Html$text('');
	}
};
var $author$project$Page$AddTeam$view = function (model) {
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		_List_fromArray(
			[
				A2(
				$elm$html$Html$h3,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text('Add Team')
					])),
				A2($elm$html$Html$br, _List_Nil, _List_Nil),
				$author$project$Page$AddTeam$viewSubmitError(model.submitError),
				$author$project$Page$AddTeam$viewForm(model)
			]));
};
var $author$project$Page$AddTeamToDiv$teamHasGivenId = F2(
	function (maybeId, team) {
		if (maybeId.$ === 'Just') {
			var id = maybeId.a;
			return _Utils_eq(team.id, id);
		} else {
			return false;
		}
	});
var $author$project$Page$AddTeamToDiv$getSelectedTeam = F2(
	function (teams, id) {
		return $elm$core$List$head(
			A2(
				$elm$core$List$filter,
				$author$project$Page$AddTeamToDiv$teamHasGivenId(id),
				teams));
	});
var $author$project$Page$AddTeamToDiv$TeamSelected = function (a) {
	return {$: 'TeamSelected', a: a};
};
var $author$project$Page$AddTeamToDiv$defaultOption = A2(
	$elm$html$Html$option,
	_List_fromArray(
		[
			$elm$html$Html$Attributes$value('0')
		]),
	_List_fromArray(
		[
			$elm$html$Html$text('-')
		]));
var $author$project$Page$AddTeamToDiv$teamOption = F2(
	function (selectedId, team) {
		return A2(
			$elm$html$Html$option,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$value(
					$author$project$Model$Team$idToString(team.id)),
					$elm$html$Html$Attributes$selected(
					_Utils_eq(
						$elm$core$Maybe$Just(team.id),
						selectedId))
				]),
			_List_fromArray(
				[
					$elm$html$Html$text(team.name)
				]));
	});
var $author$project$Page$AddTeamToDiv$teamDropdown = F2(
	function (selectedId, teams) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[$author$project$Custom$Attributes$formEntry]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$label,
					$author$project$Custom$Attributes$formLabel('teamDropdown'),
					_List_fromArray(
						[
							$elm$html$Html$text('Team')
						])),
					A2(
					$elm$html$Html$select,
					A2(
						$author$project$Custom$Attributes$formDropdown,
						'teamDropdown',
						_List_fromArray(
							[
								$elm$html$Html$Events$onInput($author$project$Page$AddTeamToDiv$TeamSelected)
							])),
					A2(
						$elm$core$List$cons,
						$author$project$Page$AddTeamToDiv$defaultOption,
						A2(
							$elm$core$List$map,
							$author$project$Page$AddTeamToDiv$teamOption(selectedId),
							teams)))
				]));
	});
var $author$project$Page$AddTeamToDiv$Submit = {$: 'Submit'};
var $elm$html$Html$Attributes$readonly = $elm$html$Html$Attributes$boolProperty('readOnly');
var $author$project$Page$AddTeamToDiv$viewStaticField = F3(
	function (id, lblText, entry) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[$author$project$Custom$Attributes$formEntry]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$label,
					$author$project$Custom$Attributes$formLabel(id),
					_List_fromArray(
						[
							$elm$html$Html$text(lblText)
						])),
					A2(
					$elm$html$Html$input,
					A2(
						$author$project$Custom$Attributes$formInput,
						id,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$readonly(true),
								$elm$html$Html$Attributes$value(entry)
							])),
					_List_Nil)
				]));
	});
var $author$project$Page$AddTeamToDiv$viewSelectedTeam = function (maybeTeam) {
	if (maybeTeam.$ === 'Just') {
		var team = maybeTeam.a;
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					A3($author$project$Page$AddTeamToDiv$viewStaticField, 'raceField', 'Race', team.race.name),
					A3($author$project$Page$AddTeamToDiv$viewStaticField, 'coachField', 'Coach', team.coach.name),
					A3(
					$author$project$Page$AddTeamToDiv$viewStaticField,
					'eloField',
					'Elo',
					$elm$core$String$fromInt(team.elo)),
					A2(
					$elm$html$Html$button,
					_List_fromArray(
						[
							$author$project$Custom$Attributes$submitButton,
							$elm$html$Html$Events$onClick($author$project$Page$AddTeamToDiv$Submit)
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('Save')
						]))
				]));
	} else {
		return $elm$html$Html$text('');
	}
};
var $author$project$Page$AddTeamToDiv$viewForm = F2(
	function (teams, model) {
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$author$project$Page$AddTeamToDiv$teamDropdown,
					model.selectedTeamId,
					A2(
						$elm$core$List$sortBy,
						function ($) {
							return $.name;
						},
						teams)),
					$author$project$Page$AddTeamToDiv$viewSelectedTeam(
					A2($author$project$Page$AddTeamToDiv$getSelectedTeam, teams, model.selectedTeamId))
				]));
	});
var $author$project$Page$AddTeamToDiv$viewLoadError = function (errorMessage) {
	var errorHeading = 'Couldn\'t fetch data at this time.';
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[$author$project$Custom$Attributes$errorMessage]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$h3,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text(errorHeading)
					])),
				$elm$html$Html$text('Error: ' + errorMessage)
			]));
};
var $author$project$Page$AddTeamToDiv$viewFormOrError = function (model) {
	var _v0 = model.teams;
	switch (_v0.$) {
		case 'NotAsked':
			return $elm$html$Html$text('');
		case 'Loading':
			return A2(
				$elm$html$Html$h3,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text('Loading...')
					]));
		case 'Success':
			var teams = _v0.a;
			return A2($author$project$Page$AddTeamToDiv$viewForm, teams, model);
		default:
			var httpError = _v0.a;
			return $author$project$Page$AddTeamToDiv$viewLoadError(
				$author$project$Error$buildErrorMessage(httpError));
	}
};
var $author$project$Page$AddTeamToDiv$viewSaveError = function (maybeError) {
	if (maybeError.$ === 'Just') {
		var error = maybeError.a;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[$author$project$Custom$Attributes$errorMessage]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$h3,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text('Couldn\'t add team to a new division at this time.')
						])),
					$elm$html$Html$text('Error: ' + error),
					A2($elm$html$Html$br, _List_Nil, _List_Nil)
				]));
	} else {
		return $elm$html$Html$text('');
	}
};
var $author$project$Page$AddTeamToDiv$view = function (model) {
	var _v0 = model.division;
	switch (_v0.$) {
		case 'NotAsked':
			return $elm$html$Html$text('');
		case 'Loading':
			return A2(
				$elm$html$Html$h3,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text('Loading...')
					]));
		case 'Success':
			var division = _v0.a;
			return A2(
				$elm$html$Html$div,
				_List_Nil,
				_List_fromArray(
					[
						A2(
						$elm$html$Html$h3,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text('Add Team to ' + division.name)
							])),
						A2($elm$html$Html$br, _List_Nil, _List_Nil),
						$author$project$Page$AddTeamToDiv$viewSaveError(model.saveError),
						$author$project$Page$AddTeamToDiv$viewFormOrError(model)
					]));
		default:
			var httpError = _v0.a;
			return $author$project$Page$AddTeamToDiv$viewLoadError(
				$author$project$Error$buildErrorMessage(httpError));
	}
};
var $author$project$Page$EditCoach$Submit = {$: 'Submit'};
var $author$project$Page$EditCoach$NameChanged = function (a) {
	return {$: 'NameChanged', a: a};
};
var $author$project$Page$EditCoach$viewNameField = function (name) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[$author$project$Custom$Attributes$formEntry]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$label,
				$author$project$Custom$Attributes$formLabel('nameInput'),
				_List_fromArray(
					[
						$elm$html$Html$text('Name')
					])),
				A2(
				$elm$html$Html$input,
				A2(
					$author$project$Custom$Attributes$formInput,
					'nameInput',
					_List_fromArray(
						[
							$elm$html$Html$Events$onInput($author$project$Page$EditCoach$NameChanged),
							$author$project$Custom$Events$onEnter($author$project$Page$EditCoach$Submit),
							$elm$html$Html$Attributes$value(name)
						])),
				_List_Nil)
			]));
};
var $author$project$Page$EditCoach$viewStaticField = F3(
	function (id, lblText, entry) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[$author$project$Custom$Attributes$formEntry]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$label,
					$author$project$Custom$Attributes$formLabel(id),
					_List_fromArray(
						[
							$elm$html$Html$text(lblText)
						])),
					A2(
					$elm$html$Html$input,
					A2(
						$author$project$Custom$Attributes$formInput,
						id,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$readonly(true),
								$elm$html$Html$Attributes$value(entry)
							])),
					_List_Nil)
				]));
	});
var $author$project$Page$EditCoach$viewCoach = function (coach) {
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		_List_fromArray(
			[
				$author$project$Page$EditCoach$viewNameField(coach.name),
				A3(
				$author$project$Page$EditCoach$viewStaticField,
				'eloField',
				'Elo',
				$elm$core$String$fromInt(coach.elo)),
				A2(
				$elm$html$Html$button,
				_List_fromArray(
					[
						$author$project$Custom$Attributes$submitButton,
						$elm$html$Html$Events$onClick($author$project$Page$EditCoach$Submit)
					]),
				_List_fromArray(
					[
						$elm$html$Html$text('Save')
					]))
			]));
};
var $author$project$Page$EditCoach$viewLoadError = function (errorMessage) {
	var errorHeading = 'Couldn\'t fetch data at this time.';
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[$author$project$Custom$Attributes$errorMessage]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$h3,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text(errorHeading)
					])),
				$elm$html$Html$text('Error: ' + errorMessage)
			]));
};
var $author$project$Page$EditCoach$viewCoachOrError = function (model) {
	var _v0 = model.coach;
	switch (_v0.$) {
		case 'NotAsked':
			return $elm$html$Html$text('');
		case 'Loading':
			return A2(
				$elm$html$Html$h3,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text('Loading...')
					]));
		case 'Success':
			var coach = _v0.a;
			return $author$project$Page$EditCoach$viewCoach(coach);
		default:
			var httpError = _v0.a;
			return $author$project$Page$EditCoach$viewLoadError(
				$author$project$Error$buildErrorMessage(httpError));
	}
};
var $author$project$Page$EditCoach$viewSaveError = function (maybeError) {
	if (maybeError.$ === 'Just') {
		var error = maybeError.a;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[$author$project$Custom$Attributes$errorMessage]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$h3,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text('Couldn\'t save a coach at this time.')
						])),
					$elm$html$Html$text('Error: ' + error),
					A2($elm$html$Html$br, _List_Nil, _List_Nil)
				]));
	} else {
		return $elm$html$Html$text('');
	}
};
var $author$project$Page$EditCoach$view = function (model) {
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		_List_fromArray(
			[
				A2(
				$elm$html$Html$h3,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text('Edit Coach')
					])),
				A2($elm$html$Html$br, _List_Nil, _List_Nil),
				$author$project$Page$EditCoach$viewSaveError(model.saveError),
				$author$project$Page$EditCoach$viewCoachOrError(model)
			]));
};
var $author$project$Page$EditDivision$Submit = {$: 'Submit'};
var $author$project$Page$EditDivision$NameChanged = function (a) {
	return {$: 'NameChanged', a: a};
};
var $author$project$Page$EditDivision$viewNameField = function (name) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[$author$project$Custom$Attributes$formEntry]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$label,
				$author$project$Custom$Attributes$formLabel('nameInput'),
				_List_fromArray(
					[
						$elm$html$Html$text('Name')
					])),
				A2(
				$elm$html$Html$input,
				A2(
					$author$project$Custom$Attributes$formInput,
					'nameInput',
					_List_fromArray(
						[
							$elm$html$Html$Events$onInput($author$project$Page$EditDivision$NameChanged),
							$elm$html$Html$Attributes$value(name)
						])),
				_List_Nil)
			]));
};
var $author$project$Page$EditDivision$SeasonChanged = function (a) {
	return {$: 'SeasonChanged', a: a};
};
var $author$project$Page$EditDivision$viewSeasonField = function (name) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[$author$project$Custom$Attributes$formEntry]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$label,
				$author$project$Custom$Attributes$formLabel('seasonInput'),
				_List_fromArray(
					[
						$elm$html$Html$text('Season')
					])),
				A2(
				$elm$html$Html$input,
				A2(
					$author$project$Custom$Attributes$formInput,
					'seasonInput',
					_List_fromArray(
						[
							$elm$html$Html$Events$onInput($author$project$Page$EditDivision$SeasonChanged),
							$author$project$Custom$Events$onEnter($author$project$Page$EditDivision$Submit),
							$elm$html$Html$Attributes$value(
							$elm$core$String$fromInt(name))
						])),
				_List_Nil)
			]));
};
var $author$project$Page$EditDivision$viewDivision = function (division) {
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		_List_fromArray(
			[
				$author$project$Page$EditDivision$viewNameField(division.name),
				$author$project$Page$EditDivision$viewSeasonField(division.season),
				A2(
				$elm$html$Html$button,
				_List_fromArray(
					[
						$author$project$Custom$Attributes$submitButton,
						$elm$html$Html$Events$onClick($author$project$Page$EditDivision$Submit)
					]),
				_List_fromArray(
					[
						$elm$html$Html$text('Save')
					]))
			]));
};
var $author$project$Page$EditDivision$viewLoadError = function (errorMessage) {
	var errorHeading = 'Couldn\'t fetch data at this time.';
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[$author$project$Custom$Attributes$errorMessage]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$h3,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text(errorHeading)
					])),
				$elm$html$Html$text('Error: ' + errorMessage)
			]));
};
var $author$project$Page$EditDivision$viewCoachOrError = function (model) {
	var _v0 = model.division;
	switch (_v0.$) {
		case 'NotAsked':
			return $elm$html$Html$text('');
		case 'Loading':
			return A2(
				$elm$html$Html$h3,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text('Loading...')
					]));
		case 'Success':
			var coach = _v0.a;
			return $author$project$Page$EditDivision$viewDivision(coach);
		default:
			var httpError = _v0.a;
			return $author$project$Page$EditDivision$viewLoadError(
				$author$project$Error$buildErrorMessage(httpError));
	}
};
var $author$project$Page$EditDivision$viewSaveError = function (maybeError) {
	if (maybeError.$ === 'Just') {
		var error = maybeError.a;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[$author$project$Custom$Attributes$errorMessage]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$h3,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text('Couldn\'t save a division at this time.')
						])),
					$elm$html$Html$text('Error: ' + error),
					A2($elm$html$Html$br, _List_Nil, _List_Nil)
				]));
	} else {
		return $elm$html$Html$text('');
	}
};
var $author$project$Page$EditDivision$view = function (model) {
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		_List_fromArray(
			[
				A2(
				$elm$html$Html$h3,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text('Edit Division')
					])),
				A2($elm$html$Html$br, _List_Nil, _List_Nil),
				$author$project$Page$EditDivision$viewSaveError(model.saveError),
				$author$project$Page$EditDivision$viewCoachOrError(model)
			]));
};
var $author$project$Page$EditGame$Submit = {$: 'Submit'};
var $author$project$Page$EditGame$AwayScoreChanged = function (a) {
	return {$: 'AwayScoreChanged', a: a};
};
var $author$project$Page$EditGame$stringFromMaybeInt = function (i) {
	return A2(
		$elm$core$Maybe$withDefault,
		'',
		A2(
			$elm$core$Maybe$andThen,
			A2($elm$core$Basics$composeR, $elm$core$String$fromInt, $elm$core$Maybe$Just),
			i));
};
var $author$project$Page$EditGame$viewAwayScoreField = function (val) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[$author$project$Custom$Attributes$formEntry]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$label,
				$author$project$Custom$Attributes$formLabel('awayScoreInput'),
				_List_fromArray(
					[
						$elm$html$Html$text('Away Score')
					])),
				A2(
				$elm$html$Html$input,
				A2(
					$author$project$Custom$Attributes$formInput,
					'awayScoreInput',
					_List_fromArray(
						[
							$elm$html$Html$Events$onInput($author$project$Page$EditGame$AwayScoreChanged),
							$author$project$Custom$Events$onEnter($author$project$Page$EditGame$Submit),
							$elm$html$Html$Attributes$value(
							$author$project$Page$EditGame$stringFromMaybeInt(val))
						])),
				_List_Nil)
			]));
};
var $author$project$Page$EditGame$HomeScoreChanged = function (a) {
	return {$: 'HomeScoreChanged', a: a};
};
var $author$project$Page$EditGame$viewHomeScoreField = function (val) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[$author$project$Custom$Attributes$formEntry]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$label,
				$author$project$Custom$Attributes$formLabel('homeScoreInput'),
				_List_fromArray(
					[
						$elm$html$Html$text('Home Score')
					])),
				A2(
				$elm$html$Html$input,
				A2(
					$author$project$Custom$Attributes$formInput,
					'homeScoreInput',
					_List_fromArray(
						[
							$elm$html$Html$Events$onInput($author$project$Page$EditGame$HomeScoreChanged),
							$elm$html$Html$Attributes$value(
							$author$project$Page$EditGame$stringFromMaybeInt(val))
						])),
				_List_Nil)
			]));
};
var $author$project$Page$EditGame$viewStaticField = F3(
	function (id, lblText, entry) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[$author$project$Custom$Attributes$formEntry]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$label,
					$author$project$Custom$Attributes$formLabel(id),
					_List_fromArray(
						[
							$elm$html$Html$text(lblText)
						])),
					A2(
					$elm$html$Html$input,
					A2(
						$author$project$Custom$Attributes$formInput,
						id,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$readonly(true),
								$elm$html$Html$Attributes$value(entry)
							])),
					_List_Nil)
				]));
	});
var $author$project$Page$EditGame$WeekChanged = function (a) {
	return {$: 'WeekChanged', a: a};
};
var $author$project$Page$EditGame$viewWeekField = function (val) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[$author$project$Custom$Attributes$formEntry]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$label,
				$author$project$Custom$Attributes$formLabel('weekInput'),
				_List_fromArray(
					[
						$elm$html$Html$text('Week')
					])),
				A2(
				$elm$html$Html$input,
				A2(
					$author$project$Custom$Attributes$formInput,
					'weekInput',
					_List_fromArray(
						[
							$elm$html$Html$Events$onInput($author$project$Page$EditGame$WeekChanged),
							$elm$html$Html$Attributes$value(
							$elm$core$String$fromInt(val))
						])),
				_List_Nil)
			]));
};
var $author$project$Page$EditGame$viewGame = function (game) {
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		_List_fromArray(
			[
				A3(
				$author$project$Page$EditGame$viewStaticField,
				'divisionName',
				'Division',
				game.division.name + (' Season ' + $elm$core$String$fromInt(game.division.season))),
				$author$project$Page$EditGame$viewWeekField(game.week),
				A3($author$project$Page$EditGame$viewStaticField, 'homeTeamName', 'Home Team', game.homeTeam.name),
				$author$project$Page$EditGame$viewHomeScoreField(game.homeScore),
				A3($author$project$Page$EditGame$viewStaticField, 'awayTeamName', 'Away Team', game.awayTeam.name),
				$author$project$Page$EditGame$viewAwayScoreField(game.awayScore),
				A2(
				$elm$html$Html$button,
				_List_fromArray(
					[
						$author$project$Custom$Attributes$submitButton,
						$elm$html$Html$Events$onClick($author$project$Page$EditGame$Submit)
					]),
				_List_fromArray(
					[
						$elm$html$Html$text('Save')
					]))
			]));
};
var $author$project$Page$EditGame$viewLoadError = function (errorMessage) {
	var errorHeading = 'Couldn\'t fetch data at this time.';
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[$author$project$Custom$Attributes$errorMessage]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$h3,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text(errorHeading)
					])),
				$elm$html$Html$text('Error: ' + errorMessage)
			]));
};
var $author$project$Page$EditGame$viewGameOrError = function (model) {
	var _v0 = model.game;
	switch (_v0.$) {
		case 'NotAsked':
			return $elm$html$Html$text('');
		case 'Loading':
			return A2(
				$elm$html$Html$h3,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text('Loading...')
					]));
		case 'Success':
			var game = _v0.a;
			return $author$project$Page$EditGame$viewGame(game);
		default:
			var httpError = _v0.a;
			return $author$project$Page$EditGame$viewLoadError(
				$author$project$Error$buildErrorMessage(httpError));
	}
};
var $author$project$Page$EditGame$viewSaveError = function (maybeError) {
	if (maybeError.$ === 'Just') {
		var error = maybeError.a;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[$author$project$Custom$Attributes$errorMessage]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$h3,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text('Couldn\'t save a game at this time.')
						])),
					$elm$html$Html$text('Error: ' + error),
					A2($elm$html$Html$br, _List_Nil, _List_Nil)
				]));
	} else {
		return $elm$html$Html$text('');
	}
};
var $author$project$Page$EditGame$view = function (model) {
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		_List_fromArray(
			[
				A2(
				$elm$html$Html$h3,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text('Edit Game')
					])),
				A2($elm$html$Html$br, _List_Nil, _List_Nil),
				$author$project$Page$EditGame$viewSaveError(model.saveError),
				$author$project$Page$EditGame$viewGameOrError(model)
			]));
};
var $author$project$Page$EditTeam$viewSaveError = function (maybeError) {
	if (maybeError.$ === 'Just') {
		var error = maybeError.a;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[$author$project$Custom$Attributes$errorMessage]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$h3,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text('Couldn\'t save a team at this time.')
						])),
					$elm$html$Html$text('Error: ' + error),
					A2($elm$html$Html$br, _List_Nil, _List_Nil)
				]));
	} else {
		return $elm$html$Html$text('');
	}
};
var $author$project$Page$EditTeam$viewLoadError = function (errorMessage) {
	var errorHeading = 'Couldn\'t fetch data at this time.';
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[$author$project$Custom$Attributes$errorMessage]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$h3,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text(errorHeading)
					])),
				$elm$html$Html$text('Error: ' + errorMessage)
			]));
};
var $author$project$Page$EditTeam$CoachLinkClicked = function (a) {
	return {$: 'CoachLinkClicked', a: a};
};
var $author$project$Page$EditTeam$Submit = {$: 'Submit'};
var $author$project$Custom$Attributes$formInputLink = F3(
	function (thisId, clickMsg, otherAttributes) {
		return _Utils_ap(
			A2(
				$author$project$Custom$Attributes$formInput,
				thisId,
				_List_fromArray(
					[
						$elm$html$Html$Events$onClick(clickMsg),
						$elm$html$Html$Attributes$class('btn-link')
					])),
			otherAttributes);
	});
var $author$project$Page$EditTeam$viewLinkedStaticField = F4(
	function (id, lblText, entry, msg) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[$author$project$Custom$Attributes$formEntry]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$label,
					$author$project$Custom$Attributes$formLabel(id),
					_List_fromArray(
						[
							$elm$html$Html$text(lblText)
						])),
					A2(
					$elm$html$Html$input,
					A3(
						$author$project$Custom$Attributes$formInputLink,
						id,
						msg,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$readonly(true),
								$elm$html$Html$Attributes$value(entry)
							])),
					_List_Nil)
				]));
	});
var $author$project$Page$EditTeam$NameChanged = function (a) {
	return {$: 'NameChanged', a: a};
};
var $author$project$Page$EditTeam$viewNameField = function (name) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[$author$project$Custom$Attributes$formEntry]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$label,
				$author$project$Custom$Attributes$formLabel('nameInput'),
				_List_fromArray(
					[
						$elm$html$Html$text('Name')
					])),
				A2(
				$elm$html$Html$input,
				A2(
					$author$project$Custom$Attributes$formInput,
					'nameInput',
					_List_fromArray(
						[
							$elm$html$Html$Events$onInput($author$project$Page$EditTeam$NameChanged),
							$author$project$Custom$Events$onEnter($author$project$Page$EditTeam$Submit),
							$elm$html$Html$Attributes$value(name)
						])),
				_List_Nil)
			]));
};
var $author$project$Page$EditTeam$viewStaticField = F3(
	function (id, lblText, entry) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[$author$project$Custom$Attributes$formEntry]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$label,
					$author$project$Custom$Attributes$formLabel(id),
					_List_fromArray(
						[
							$elm$html$Html$text(lblText)
						])),
					A2(
					$elm$html$Html$input,
					A2(
						$author$project$Custom$Attributes$formInput,
						id,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$readonly(true),
								$elm$html$Html$Attributes$value(entry)
							])),
					_List_Nil)
				]));
	});
var $author$project$Page$EditTeam$viewTeam = function (team) {
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		_List_fromArray(
			[
				$author$project$Page$EditTeam$viewNameField(team.name),
				A3($author$project$Page$EditTeam$viewStaticField, 'raceField', 'Race', team.race.name),
				A4(
				$author$project$Page$EditTeam$viewLinkedStaticField,
				'coachField',
				'Coach',
				team.coach.name,
				$author$project$Page$EditTeam$CoachLinkClicked(team.coach.id)),
				A3(
				$author$project$Page$EditTeam$viewStaticField,
				'eloField',
				'Elo',
				$elm$core$String$fromInt(team.elo)),
				A2(
				$elm$html$Html$button,
				_List_fromArray(
					[
						$author$project$Custom$Attributes$submitButton,
						$elm$html$Html$Events$onClick($author$project$Page$EditTeam$Submit)
					]),
				_List_fromArray(
					[
						$elm$html$Html$text('Save')
					]))
			]));
};
var $author$project$Page$EditTeam$viewTeamOrError = function (model) {
	var _v0 = model.team;
	switch (_v0.$) {
		case 'NotAsked':
			return $elm$html$Html$text('');
		case 'Loading':
			return A2(
				$elm$html$Html$h3,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text('Loading...')
					]));
		case 'Success':
			var team = _v0.a;
			return $author$project$Page$EditTeam$viewTeam(team);
		default:
			var httpError = _v0.a;
			return $author$project$Page$EditTeam$viewLoadError(
				$author$project$Error$buildErrorMessage(httpError));
	}
};
var $author$project$Page$EditTeam$view = function (model) {
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		_List_fromArray(
			[
				A2(
				$elm$html$Html$h3,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text('Edit Team')
					])),
				A2($elm$html$Html$br, _List_Nil, _List_Nil),
				$author$project$Page$EditTeam$viewSaveError(model.saveError),
				$author$project$Page$EditTeam$viewTeamOrError(model)
			]));
};
var $elm$core$List$sortWith = _List_sortWith;
var $author$project$Page$ListCoaches$sortedCoaches = F2(
	function (sortingMethod, coaches) {
		switch (sortingMethod.$) {
			case 'None':
				return coaches;
			case 'Name':
				return A2(
					$elm$core$List$sortWith,
					F2(
						function (a, b) {
							return A2($elm$core$Basics$compare, a.name, b.name);
						}),
					coaches);
			case 'NameDesc':
				return A2(
					$elm$core$List$sortWith,
					F2(
						function (a, b) {
							return A2($elm$core$Basics$compare, b.name, a.name);
						}),
					coaches);
			case 'Elo':
				return A2(
					$elm$core$List$sortWith,
					F2(
						function (a, b) {
							return A2($elm$core$Basics$compare, a.elo, b.elo);
						}),
					coaches);
			default:
				return A2(
					$elm$core$List$sortWith,
					F2(
						function (a, b) {
							return A2($elm$core$Basics$compare, b.elo, a.elo);
						}),
					coaches);
		}
	});
var $author$project$Custom$Attributes$table = $elm$html$Html$Attributes$class('table table-striped table-hover');
var $elm$html$Html$table = _VirtualDom_node('table');
var $elm$html$Html$tbody = _VirtualDom_node('tbody');
var $author$project$Auth$requiresAuth = F2(
	function (session, value) {
		var _v0 = session.token;
		if (_v0.$ === 'Just') {
			return value;
		} else {
			return $elm$html$Html$text('');
		}
	});
var $elm$html$Html$Attributes$width = function (n) {
	return A2(
		_VirtualDom_attribute,
		'width',
		$elm$core$String$fromInt(n));
};
var $author$project$Custom$Attributes$tableButtonColumn = function (btnCount) {
	return $elm$html$Html$Attributes$width(btnCount * 100);
};
var $elm$html$Html$td = _VirtualDom_node('td');
var $elm$html$Html$tr = _VirtualDom_node('tr');
var $author$project$Page$ListCoaches$DeleteCoachButtonClick = function (a) {
	return {$: 'DeleteCoachButtonClick', a: a};
};
var $author$project$Custom$Attributes$deleteButton = _List_fromArray(
	[
		$elm$html$Html$Attributes$class('btn btn-danger'),
		A2($elm$html$Html$Attributes$style, 'margin-left', '6px')
	]);
var $author$project$Page$ListCoaches$viewDeleteButton = function (coach) {
	return A2(
		$elm$html$Html$button,
		A2(
			$elm$core$List$cons,
			$elm$html$Html$Events$onClick(
				$author$project$Page$ListCoaches$DeleteCoachButtonClick(coach.id)),
			$author$project$Custom$Attributes$deleteButton),
		_List_fromArray(
			[
				$elm$html$Html$text('Delete')
			]));
};
var $author$project$Page$ListCoaches$EditCoachButtonClick = function (a) {
	return {$: 'EditCoachButtonClick', a: a};
};
var $author$project$Custom$Attributes$editButton = _List_fromArray(
	[
		$elm$html$Html$Attributes$class('btn btn-secondary'),
		A2($elm$html$Html$Attributes$style, 'margin-left', '6px')
	]);
var $author$project$Page$ListCoaches$viewEditButton = function (coach) {
	return A2(
		$elm$html$Html$button,
		A2(
			$elm$core$List$cons,
			$elm$html$Html$Events$onClick(
				$author$project$Page$ListCoaches$EditCoachButtonClick(coach.id)),
			$author$project$Custom$Attributes$editButton),
		_List_fromArray(
			[
				$elm$html$Html$text('Edit')
			]));
};
var $author$project$Page$ListCoaches$viewCoach = F2(
	function (session, coach) {
		return A2(
			$elm$html$Html$tr,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$elm$html$Html$td,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text(coach.name)
						])),
					A2(
					$elm$html$Html$td,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text(
							$elm$core$String$fromInt(coach.elo))
						])),
					A2(
					$author$project$Auth$requiresAuth,
					session,
					A2(
						$elm$html$Html$td,
						_List_fromArray(
							[
								$author$project$Custom$Attributes$tableButtonColumn(2)
							]),
						_List_fromArray(
							[
								$author$project$Page$ListCoaches$viewEditButton(coach),
								$author$project$Page$ListCoaches$viewDeleteButton(coach)
							])))
				]));
	});
var $author$project$Page$ListCoaches$AddCoachButtonClick = {$: 'AddCoachButtonClick'};
var $author$project$Custom$Attributes$addButton = $elm$html$Html$Attributes$class('btn btn-success');
var $author$project$Custom$Attributes$rightSideButtons = $elm$html$Html$Attributes$class('btn-group float-end');
var $author$project$Page$ListCoaches$viewToolBar = A2(
	$elm$html$Html$div,
	_List_fromArray(
		[$author$project$Custom$Attributes$rightSideButtons]),
	_List_fromArray(
		[
			A2(
			$elm$html$Html$button,
			_List_fromArray(
				[
					$author$project$Custom$Attributes$addButton,
					$elm$html$Html$Events$onClick($author$project$Page$ListCoaches$AddCoachButtonClick)
				]),
			_List_fromArray(
				[
					$elm$html$Html$text('Add Coach')
				]))
		]));
var $author$project$Page$ListCoaches$viewHeader = function (session) {
	return A2(
		$elm$html$Html$div,
		$author$project$Custom$Attributes$row,
		_List_fromArray(
			[
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[$author$project$Custom$Attributes$col]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$h3,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text('Coaches')
							]))
					])),
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[$author$project$Custom$Attributes$col]),
				_List_fromArray(
					[
						A2($author$project$Auth$requiresAuth, session, $author$project$Page$ListCoaches$viewToolBar)
					]))
			]));
};
var $author$project$Page$ListCoaches$EloSortClick = {$: 'EloSortClick'};
var $author$project$Page$ListCoaches$NameSortClick = {$: 'NameSortClick'};
var $elm$html$Html$Attributes$scope = $elm$html$Html$Attributes$stringProperty('scope');
var $elm$html$Html$th = _VirtualDom_node('th');
var $elm$html$Html$thead = _VirtualDom_node('thead');
var $author$project$Page$ListCoaches$viewTableHeader = function (sortMethod) {
	return A2(
		$elm$html$Html$thead,
		_List_Nil,
		_List_fromArray(
			[
				A2(
				$elm$html$Html$tr,
				_List_Nil,
				_List_fromArray(
					[
						A2(
						$elm$html$Html$th,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$scope('col'),
								$elm$html$Html$Events$onClick($author$project$Page$ListCoaches$NameSortClick)
							]),
						_List_fromArray(
							[
								function () {
								switch (sortMethod.$) {
									case 'Name':
										return $elm$html$Html$text('Name ▲');
									case 'NameDesc':
										return $elm$html$Html$text('Name ▼');
									default:
										return $elm$html$Html$text('Name');
								}
							}()
							])),
						A2(
						$elm$html$Html$th,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$scope('col'),
								$elm$html$Html$Events$onClick($author$project$Page$ListCoaches$EloSortClick)
							]),
						_List_fromArray(
							[
								function () {
								switch (sortMethod.$) {
									case 'Elo':
										return $elm$html$Html$text('Elo ▲');
									case 'EloDesc':
										return $elm$html$Html$text('Elo ▼');
									default:
										return $elm$html$Html$text('Elo');
								}
							}()
							])),
						A2(
						$elm$html$Html$th,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$scope('col')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text('')
							]))
					]))
			]));
};
var $author$project$Page$ListCoaches$viewCoaches = F3(
	function (session, sortMethod, coaches) {
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					$author$project$Page$ListCoaches$viewHeader(session),
					A2(
					$elm$html$Html$table,
					_List_fromArray(
						[$author$project$Custom$Attributes$table]),
					_List_fromArray(
						[
							$author$project$Page$ListCoaches$viewTableHeader(sortMethod),
							A2(
							$elm$html$Html$tbody,
							_List_Nil,
							A2(
								$elm$core$List$map,
								$author$project$Page$ListCoaches$viewCoach(session),
								A2($author$project$Page$ListCoaches$sortedCoaches, sortMethod, coaches)))
						]))
				]));
	});
var $author$project$Page$ListCoaches$viewLoadError = function (errorMessage) {
	var errorHeading = 'Couldn\'t fetch data at this time.';
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[$author$project$Custom$Attributes$errorMessage]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$h3,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text(errorHeading)
					])),
				$elm$html$Html$text('Error: ' + errorMessage)
			]));
};
var $author$project$Page$ListCoaches$viewCoachesOrError = function (model) {
	var _v0 = model.coaches;
	switch (_v0.$) {
		case 'NotAsked':
			return $elm$html$Html$text('');
		case 'Loading':
			return A2(
				$elm$html$Html$h3,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text('Loading...')
					]));
		case 'Success':
			var coaches = _v0.a;
			return A3($author$project$Page$ListCoaches$viewCoaches, model.session, model.sortingMethod, coaches);
		default:
			var httpError = _v0.a;
			return $author$project$Page$ListCoaches$viewLoadError(
				$author$project$Error$buildErrorMessage(httpError));
	}
};
var $author$project$Page$ListCoaches$viewErrorMessage = function (message) {
	if (message.$ === 'Just') {
		var m = message.a;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[$author$project$Custom$Attributes$errorMessage]),
			_List_fromArray(
				[
					$elm$html$Html$text('Error: ' + m)
				]));
	} else {
		return $elm$html$Html$text('');
	}
};
var $author$project$Page$ListCoaches$FetchCoaches = {$: 'FetchCoaches'};
var $author$project$Custom$Attributes$refreshButton = $elm$html$Html$Attributes$class('btn btn-sm btn-secondary float-end');
var $author$project$Page$ListCoaches$viewRefreshButton = A2(
	$elm$html$Html$div,
	_List_fromArray(
		[$author$project$Custom$Attributes$col]),
	_List_fromArray(
		[
			A2(
			$elm$html$Html$button,
			_List_fromArray(
				[
					$elm$html$Html$Events$onClick($author$project$Page$ListCoaches$FetchCoaches),
					$author$project$Custom$Attributes$refreshButton
				]),
			_List_fromArray(
				[
					$elm$html$Html$text('Refresh Coaches')
				]))
		]));
var $author$project$Page$ListCoaches$view = function (model) {
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		_List_fromArray(
			[
				A2(
				$elm$html$Html$div,
				$author$project$Custom$Attributes$row,
				_List_fromArray(
					[$author$project$Page$ListCoaches$viewRefreshButton])),
				$author$project$Page$ListCoaches$viewErrorMessage(model.deleteError),
				$author$project$Page$ListCoaches$viewCoachesOrError(model)
			]));
};
var $author$project$Page$ListDivisions$sortedDivs = F2(
	function (sortingMethod, divs) {
		switch (sortingMethod.$) {
			case 'None':
				return A2(
					$elm$core$List$sortWith,
					F2(
						function (a, b) {
							return A2($elm$core$Basics$compare, b.season, a.season);
						}),
					divs);
			case 'Name':
				return A2(
					$elm$core$List$sortWith,
					F2(
						function (a, b) {
							return A2($elm$core$Basics$compare, a.name, b.name);
						}),
					divs);
			case 'NameDesc':
				return A2(
					$elm$core$List$sortWith,
					F2(
						function (a, b) {
							return A2($elm$core$Basics$compare, b.name, a.name);
						}),
					divs);
			case 'Season':
				return A2(
					$elm$core$List$sortWith,
					F2(
						function (a, b) {
							return A2($elm$core$Basics$compare, a.season, b.season);
						}),
					divs);
			default:
				return A2(
					$elm$core$List$sortWith,
					F2(
						function (a, b) {
							return A2($elm$core$Basics$compare, b.season, a.season);
						}),
					divs);
		}
	});
var $author$project$Page$ListDivisions$ViewDivisionButtonClick = function (a) {
	return {$: 'ViewDivisionButtonClick', a: a};
};
var $author$project$Page$ListDivisions$DeleteDivisionButtonClick = function (a) {
	return {$: 'DeleteDivisionButtonClick', a: a};
};
var $author$project$Page$ListDivisions$viewDeleteButton = function (division) {
	return A2(
		$elm$html$Html$button,
		A2(
			$elm$core$List$cons,
			$elm$html$Html$Events$onClick(
				$author$project$Page$ListDivisions$DeleteDivisionButtonClick(division.id)),
			$author$project$Custom$Attributes$deleteButton),
		_List_fromArray(
			[
				$elm$html$Html$text('Delete')
			]));
};
var $author$project$Page$ListDivisions$EditDivisionButtonClick = function (a) {
	return {$: 'EditDivisionButtonClick', a: a};
};
var $author$project$Page$ListDivisions$viewEditButton = function (division) {
	return A2(
		$elm$html$Html$button,
		A2(
			$elm$core$List$cons,
			$elm$html$Html$Events$onClick(
				$author$project$Page$ListDivisions$EditDivisionButtonClick(division.id)),
			$author$project$Custom$Attributes$editButton),
		_List_fromArray(
			[
				$elm$html$Html$text('Edit')
			]));
};
var $author$project$Page$ListDivisions$viewDivision = F2(
	function (session, division) {
		return A2(
			$elm$html$Html$tr,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$elm$html$Html$td,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('btn-link'),
							$elm$html$Html$Events$onClick(
							$author$project$Page$ListDivisions$ViewDivisionButtonClick(division.id))
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(division.name)
						])),
					A2(
					$elm$html$Html$td,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text(
							$elm$core$String$fromInt(division.season))
						])),
					A2(
					$author$project$Auth$requiresAuth,
					session,
					A2(
						$elm$html$Html$td,
						_List_fromArray(
							[
								$author$project$Custom$Attributes$tableButtonColumn(2)
							]),
						_List_fromArray(
							[
								$author$project$Page$ListDivisions$viewEditButton(division),
								$author$project$Page$ListDivisions$viewDeleteButton(division)
							])))
				]));
	});
var $author$project$Page$ListDivisions$AddDivisionButtonClick = {$: 'AddDivisionButtonClick'};
var $author$project$Page$ListDivisions$viewToolBar = A2(
	$elm$html$Html$div,
	_List_fromArray(
		[$author$project$Custom$Attributes$rightSideButtons]),
	_List_fromArray(
		[
			A2(
			$elm$html$Html$button,
			_List_fromArray(
				[
					$author$project$Custom$Attributes$addButton,
					$elm$html$Html$Events$onClick($author$project$Page$ListDivisions$AddDivisionButtonClick)
				]),
			_List_fromArray(
				[
					$elm$html$Html$text('Add Division')
				]))
		]));
var $author$project$Page$ListDivisions$viewHeader = function (session) {
	return A2(
		$elm$html$Html$div,
		$author$project$Custom$Attributes$row,
		_List_fromArray(
			[
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[$author$project$Custom$Attributes$col]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$h3,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text('Divisions')
							]))
					])),
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[$author$project$Custom$Attributes$col]),
				_List_fromArray(
					[
						A2($author$project$Auth$requiresAuth, session, $author$project$Page$ListDivisions$viewToolBar)
					]))
			]));
};
var $author$project$Page$ListDivisions$NameSortClick = {$: 'NameSortClick'};
var $author$project$Page$ListDivisions$SeasonSortClick = {$: 'SeasonSortClick'};
var $author$project$Page$ListDivisions$viewTableHeader = function (sortMethod) {
	return A2(
		$elm$html$Html$thead,
		_List_Nil,
		_List_fromArray(
			[
				A2(
				$elm$html$Html$tr,
				_List_Nil,
				_List_fromArray(
					[
						A2(
						$elm$html$Html$th,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$scope('col'),
								$elm$html$Html$Events$onClick($author$project$Page$ListDivisions$NameSortClick)
							]),
						_List_fromArray(
							[
								function () {
								switch (sortMethod.$) {
									case 'Name':
										return $elm$html$Html$text('Name ▲');
									case 'NameDesc':
										return $elm$html$Html$text('Name ▼');
									default:
										return $elm$html$Html$text('Name');
								}
							}()
							])),
						A2(
						$elm$html$Html$th,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$scope('col'),
								$elm$html$Html$Events$onClick($author$project$Page$ListDivisions$SeasonSortClick)
							]),
						_List_fromArray(
							[
								function () {
								switch (sortMethod.$) {
									case 'Season':
										return $elm$html$Html$text('Season ▲');
									case 'SeasonDesc':
										return $elm$html$Html$text('Season ▼');
									default:
										return $elm$html$Html$text('Season');
								}
							}()
							])),
						A2(
						$elm$html$Html$th,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$scope('col')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text('')
							]))
					]))
			]));
};
var $author$project$Page$ListDivisions$viewDivisions = F3(
	function (session, sortMethod, divisions) {
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					$author$project$Page$ListDivisions$viewHeader(session),
					A2(
					$elm$html$Html$table,
					_List_fromArray(
						[$author$project$Custom$Attributes$table]),
					_List_fromArray(
						[
							$author$project$Page$ListDivisions$viewTableHeader(sortMethod),
							A2(
							$elm$html$Html$tbody,
							_List_Nil,
							A2(
								$elm$core$List$map,
								$author$project$Page$ListDivisions$viewDivision(session),
								A2($author$project$Page$ListDivisions$sortedDivs, sortMethod, divisions)))
						]))
				]));
	});
var $author$project$Page$ListDivisions$viewLoadError = function (errorMessage) {
	var errorHeading = 'Couldn\'t fetch data at this time.';
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[$author$project$Custom$Attributes$errorMessage]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$h3,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text(errorHeading)
					])),
				$elm$html$Html$text('Error: ' + errorMessage)
			]));
};
var $author$project$Page$ListDivisions$viewDivisionsOrError = function (model) {
	var _v0 = model.divisions;
	switch (_v0.$) {
		case 'NotAsked':
			return $elm$html$Html$text('');
		case 'Loading':
			return A2(
				$elm$html$Html$h3,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text('Loading...')
					]));
		case 'Success':
			var divisions = _v0.a;
			return A3($author$project$Page$ListDivisions$viewDivisions, model.session, model.sortingMethod, divisions);
		default:
			var httpError = _v0.a;
			return $author$project$Page$ListDivisions$viewLoadError(
				$author$project$Error$buildErrorMessage(httpError));
	}
};
var $author$project$Page$ListDivisions$viewErrorMessage = function (message) {
	if (message.$ === 'Just') {
		var m = message.a;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[$author$project$Custom$Attributes$errorMessage]),
			_List_fromArray(
				[
					$elm$html$Html$text('Error: ' + m)
				]));
	} else {
		return $elm$html$Html$text('');
	}
};
var $author$project$Page$ListDivisions$FetchDivisions = {$: 'FetchDivisions'};
var $author$project$Page$ListDivisions$viewRefreshButton = A2(
	$elm$html$Html$div,
	_List_fromArray(
		[$author$project$Custom$Attributes$col]),
	_List_fromArray(
		[
			A2(
			$elm$html$Html$button,
			_List_fromArray(
				[
					$elm$html$Html$Events$onClick($author$project$Page$ListDivisions$FetchDivisions),
					$author$project$Custom$Attributes$refreshButton
				]),
			_List_fromArray(
				[
					$elm$html$Html$text('Refresh Divisions')
				]))
		]));
var $author$project$Page$ListDivisions$view = function (model) {
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		_List_fromArray(
			[
				A2(
				$elm$html$Html$div,
				$author$project$Custom$Attributes$row,
				_List_fromArray(
					[$author$project$Page$ListDivisions$viewRefreshButton])),
				$author$project$Page$ListDivisions$viewErrorMessage(model.deleteError),
				$author$project$Page$ListDivisions$viewDivisionsOrError(model)
			]));
};
var $author$project$Page$ListTeams$viewErrorMessage = function (message) {
	if (message.$ === 'Just') {
		var m = message.a;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[$author$project$Custom$Attributes$errorMessage]),
			_List_fromArray(
				[
					$elm$html$Html$text('Error: ' + m)
				]));
	} else {
		return $elm$html$Html$text('');
	}
};
var $author$project$Page$ListTeams$FetchTeams = {$: 'FetchTeams'};
var $author$project$Page$ListTeams$viewRefreshButton = A2(
	$elm$html$Html$div,
	_List_fromArray(
		[$author$project$Custom$Attributes$col]),
	_List_fromArray(
		[
			A2(
			$elm$html$Html$button,
			_List_fromArray(
				[
					$elm$html$Html$Events$onClick($author$project$Page$ListTeams$FetchTeams),
					$author$project$Custom$Attributes$refreshButton
				]),
			_List_fromArray(
				[
					$elm$html$Html$text('Refresh Teams')
				]))
		]));
var $author$project$Page$ListTeams$viewLoadError = function (errorMessage) {
	var errorHeading = 'Couldn\'t fetch data at this time.';
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[$author$project$Custom$Attributes$errorMessage]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$h3,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text(errorHeading)
					])),
				$elm$html$Html$text('Error: ' + errorMessage)
			]));
};
var $author$project$Page$ListTeams$sortedTeams = F2(
	function (sortingMethod, teams) {
		switch (sortingMethod.$) {
			case 'None':
				return teams;
			case 'Name':
				return A2(
					$elm$core$List$sortWith,
					F2(
						function (a, b) {
							return A2($elm$core$Basics$compare, a.name, b.name);
						}),
					teams);
			case 'NameDesc':
				return A2(
					$elm$core$List$sortWith,
					F2(
						function (a, b) {
							return A2($elm$core$Basics$compare, b.name, a.name);
						}),
					teams);
			case 'Coach':
				return A2(
					$elm$core$List$sortWith,
					F2(
						function (a, b) {
							return A2($elm$core$Basics$compare, a.coach.name, b.coach.name);
						}),
					teams);
			case 'CoachDesc':
				return A2(
					$elm$core$List$sortWith,
					F2(
						function (a, b) {
							return A2($elm$core$Basics$compare, b.coach.name, a.coach.name);
						}),
					teams);
			case 'Race':
				return A2(
					$elm$core$List$sortWith,
					F2(
						function (a, b) {
							return A2($elm$core$Basics$compare, a.race.name, b.race.name);
						}),
					teams);
			case 'RaceDesc':
				return A2(
					$elm$core$List$sortWith,
					F2(
						function (a, b) {
							return A2($elm$core$Basics$compare, b.race.name, a.race.name);
						}),
					teams);
			case 'Elo':
				return A2(
					$elm$core$List$sortWith,
					F2(
						function (a, b) {
							return A2($elm$core$Basics$compare, a.elo, b.elo);
						}),
					teams);
			default:
				return A2(
					$elm$core$List$sortWith,
					F2(
						function (a, b) {
							return A2($elm$core$Basics$compare, b.elo, a.elo);
						}),
					teams);
		}
	});
var $author$project$Page$ListTeams$AddTeamButtonClick = {$: 'AddTeamButtonClick'};
var $author$project$Page$ListTeams$viewToolBar = A2(
	$elm$html$Html$div,
	_List_fromArray(
		[$author$project$Custom$Attributes$rightSideButtons]),
	_List_fromArray(
		[
			A2(
			$elm$html$Html$button,
			_List_fromArray(
				[
					$author$project$Custom$Attributes$addButton,
					$elm$html$Html$Events$onClick($author$project$Page$ListTeams$AddTeamButtonClick)
				]),
			_List_fromArray(
				[
					$elm$html$Html$text('Add Team')
				]))
		]));
var $author$project$Page$ListTeams$viewHeader = function (session) {
	return A2(
		$elm$html$Html$div,
		$author$project$Custom$Attributes$row,
		_List_fromArray(
			[
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[$author$project$Custom$Attributes$col]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$h3,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text('Teams')
							]))
					])),
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[$author$project$Custom$Attributes$col]),
				_List_fromArray(
					[
						A2($author$project$Auth$requiresAuth, session, $author$project$Page$ListTeams$viewToolBar)
					]))
			]));
};
var $author$project$Page$ListTeams$CoachSortClick = {$: 'CoachSortClick'};
var $author$project$Page$ListTeams$EloSortClick = {$: 'EloSortClick'};
var $author$project$Page$ListTeams$NameSortClick = {$: 'NameSortClick'};
var $author$project$Page$ListTeams$RaceSortClick = {$: 'RaceSortClick'};
var $author$project$Page$ListTeams$viewTableHeader = function (sortMethod) {
	return A2(
		$elm$html$Html$thead,
		_List_Nil,
		_List_fromArray(
			[
				A2(
				$elm$html$Html$tr,
				_List_Nil,
				_List_fromArray(
					[
						A2(
						$elm$html$Html$th,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$scope('col'),
								$elm$html$Html$Events$onClick($author$project$Page$ListTeams$NameSortClick)
							]),
						_List_fromArray(
							[
								function () {
								switch (sortMethod.$) {
									case 'Name':
										return $elm$html$Html$text('Name ▲');
									case 'NameDesc':
										return $elm$html$Html$text('Name ▼');
									default:
										return $elm$html$Html$text('Name');
								}
							}()
							])),
						A2(
						$elm$html$Html$th,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$scope('col'),
								$elm$html$Html$Events$onClick($author$project$Page$ListTeams$RaceSortClick)
							]),
						_List_fromArray(
							[
								function () {
								switch (sortMethod.$) {
									case 'Race':
										return $elm$html$Html$text('Race ▲');
									case 'RaceDesc':
										return $elm$html$Html$text('Race ▼');
									default:
										return $elm$html$Html$text('Race');
								}
							}()
							])),
						A2(
						$elm$html$Html$th,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$scope('col'),
								$elm$html$Html$Events$onClick($author$project$Page$ListTeams$CoachSortClick)
							]),
						_List_fromArray(
							[
								function () {
								switch (sortMethod.$) {
									case 'Coach':
										return $elm$html$Html$text('Coach ▲');
									case 'CoachDesc':
										return $elm$html$Html$text('Coach ▼');
									default:
										return $elm$html$Html$text('Coach');
								}
							}()
							])),
						A2(
						$elm$html$Html$th,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$scope('col'),
								$elm$html$Html$Events$onClick($author$project$Page$ListTeams$EloSortClick)
							]),
						_List_fromArray(
							[
								function () {
								switch (sortMethod.$) {
									case 'Elo':
										return $elm$html$Html$text('Elo ▲');
									case 'EloDesc':
										return $elm$html$Html$text('Elo ▼');
									default:
										return $elm$html$Html$text('Elo');
								}
							}()
							])),
						A2(
						$elm$html$Html$th,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$scope('col')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text('')
							]))
					]))
			]));
};
var $author$project$Page$ListTeams$DeleteTeamButtonClick = function (a) {
	return {$: 'DeleteTeamButtonClick', a: a};
};
var $author$project$Page$ListTeams$viewDeleteButton = function (team) {
	return A2(
		$elm$html$Html$button,
		A2(
			$elm$core$List$cons,
			$elm$html$Html$Events$onClick(
				$author$project$Page$ListTeams$DeleteTeamButtonClick(team.id)),
			$author$project$Custom$Attributes$deleteButton),
		_List_fromArray(
			[
				$elm$html$Html$text('Delete')
			]));
};
var $author$project$Page$ListTeams$EditTeamButtonClick = function (a) {
	return {$: 'EditTeamButtonClick', a: a};
};
var $author$project$Page$ListTeams$viewEditButton = function (team) {
	return A2(
		$elm$html$Html$button,
		A2(
			$elm$core$List$cons,
			$elm$html$Html$Events$onClick(
				$author$project$Page$ListTeams$EditTeamButtonClick(team.id)),
			$author$project$Custom$Attributes$editButton),
		_List_fromArray(
			[
				$elm$html$Html$text('Edit')
			]));
};
var $author$project$Page$ListTeams$viewTeam = F2(
	function (session, team) {
		return A2(
			$elm$html$Html$tr,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$elm$html$Html$td,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text(team.name)
						])),
					A2(
					$elm$html$Html$td,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text(team.race.name)
						])),
					A2(
					$elm$html$Html$td,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text(team.coach.name)
						])),
					A2(
					$elm$html$Html$td,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text(
							$elm$core$String$fromInt(team.elo))
						])),
					A2(
					$author$project$Auth$requiresAuth,
					session,
					A2(
						$elm$html$Html$td,
						_List_fromArray(
							[
								$author$project$Custom$Attributes$tableButtonColumn(2)
							]),
						_List_fromArray(
							[
								$author$project$Page$ListTeams$viewEditButton(team),
								$author$project$Page$ListTeams$viewDeleteButton(team)
							])))
				]));
	});
var $author$project$Page$ListTeams$viewTeams = F3(
	function (session, sortMethod, teams) {
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					$author$project$Page$ListTeams$viewHeader(session),
					A2(
					$elm$html$Html$table,
					_List_fromArray(
						[$author$project$Custom$Attributes$table]),
					_List_fromArray(
						[
							$author$project$Page$ListTeams$viewTableHeader(sortMethod),
							A2(
							$elm$html$Html$tbody,
							_List_Nil,
							A2(
								$elm$core$List$map,
								$author$project$Page$ListTeams$viewTeam(session),
								A2($author$project$Page$ListTeams$sortedTeams, sortMethod, teams)))
						]))
				]));
	});
var $author$project$Page$ListTeams$viewTeamsOrError = function (model) {
	var _v0 = model.teams;
	switch (_v0.$) {
		case 'NotAsked':
			return $elm$html$Html$text('');
		case 'Loading':
			return A2(
				$elm$html$Html$h3,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text('Loading...')
					]));
		case 'Success':
			var teams = _v0.a;
			return A3($author$project$Page$ListTeams$viewTeams, model.session, model.sortingMethod, teams);
		default:
			var httpError = _v0.a;
			return $author$project$Page$ListTeams$viewLoadError(
				$author$project$Error$buildErrorMessage(httpError));
	}
};
var $author$project$Page$ListTeams$view = function (model) {
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		_List_fromArray(
			[
				A2(
				$elm$html$Html$div,
				$author$project$Custom$Attributes$row,
				_List_fromArray(
					[$author$project$Page$ListTeams$viewRefreshButton])),
				$author$project$Page$ListTeams$viewErrorMessage(model.deleteError),
				$author$project$Page$ListTeams$viewTeamsOrError(model)
			]));
};
var $author$project$Page$Signin$Submit = {$: 'Submit'};
var $author$project$Page$Signin$PasswordChanged = function (a) {
	return {$: 'PasswordChanged', a: a};
};
var $elm$html$Html$Attributes$type_ = $elm$html$Html$Attributes$stringProperty('type');
var $author$project$Custom$Attributes$formPasswordInput = F2(
	function (thisId, otherAttributes) {
		return _Utils_ap(
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('form-control'),
					$elm$html$Html$Attributes$type_('password'),
					$elm$html$Html$Attributes$id(thisId)
				]),
			otherAttributes);
	});
var $author$project$Page$Signin$viewPasswordField = function (userPassword) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[$author$project$Custom$Attributes$formEntry]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$label,
				$author$project$Custom$Attributes$formLabel('passwordInput'),
				_List_fromArray(
					[
						$elm$html$Html$text('Password')
					])),
				A2(
				$elm$html$Html$input,
				A2(
					$author$project$Custom$Attributes$formPasswordInput,
					'passwordInput',
					_List_fromArray(
						[
							$elm$html$Html$Events$onInput($author$project$Page$Signin$PasswordChanged),
							$author$project$Custom$Events$onEnter($author$project$Page$Signin$Submit),
							$elm$html$Html$Attributes$value(userPassword.password)
						])),
				_List_Nil)
			]));
};
var $author$project$Page$Signin$UsernameChanged = function (a) {
	return {$: 'UsernameChanged', a: a};
};
var $author$project$Page$Signin$viewUsernameField = function (userPassword) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[$author$project$Custom$Attributes$formEntry]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$label,
				$author$project$Custom$Attributes$formLabel('usernameInput'),
				_List_fromArray(
					[
						$elm$html$Html$text('User Name')
					])),
				A2(
				$elm$html$Html$input,
				A2(
					$author$project$Custom$Attributes$formInput,
					'usernameInput',
					_List_fromArray(
						[
							$elm$html$Html$Events$onInput($author$project$Page$Signin$UsernameChanged),
							$author$project$Custom$Events$onEnter($author$project$Page$Signin$Submit),
							$elm$html$Html$Attributes$value(userPassword.username)
						])),
				_List_Nil)
			]));
};
var $author$project$Page$Signin$viewForm = function (model) {
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		_List_fromArray(
			[
				$author$project$Page$Signin$viewUsernameField(model.userPassword),
				$author$project$Page$Signin$viewPasswordField(model.userPassword),
				A2(
				$elm$html$Html$button,
				_List_fromArray(
					[
						$author$project$Custom$Attributes$submitButton,
						$elm$html$Html$Events$onClick($author$project$Page$Signin$Submit)
					]),
				_List_fromArray(
					[
						$elm$html$Html$text('Sign in')
					]))
			]));
};
var $author$project$Page$Signin$viewSigninError = function (maybeError) {
	if (maybeError.$ === 'Just') {
		var error = maybeError.a;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[$author$project$Custom$Attributes$errorMessage]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$h3,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text('Couldn\'t sign in at this time.')
						])),
					$elm$html$Html$text('Error: ' + error),
					A2($elm$html$Html$br, _List_Nil, _List_Nil)
				]));
	} else {
		return $elm$html$Html$text('');
	}
};
var $author$project$Page$Signin$viewWrongPassword = function (wrongPassword) {
	return wrongPassword ? A2(
		$elm$html$Html$div,
		_List_fromArray(
			[$author$project$Custom$Attributes$errorMessage]),
		_List_fromArray(
			[
				$elm$html$Html$text('Incorrect Username or Password.')
			])) : $elm$html$Html$text('');
};
var $author$project$Page$Signin$view = function (model) {
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		_List_fromArray(
			[
				A2(
				$elm$html$Html$h3,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text('Sign in')
					])),
				A2($elm$html$Html$br, _List_Nil, _List_Nil),
				$author$project$Page$Signin$viewSigninError(model.signinError),
				$author$project$Page$Signin$viewWrongPassword(model.wrongPassword),
				$author$project$Page$Signin$viewForm(model)
			]));
};
var $author$project$Page$ViewDivision$viewErrorMessage = function (message) {
	if (message.$ === 'Just') {
		var m = message.a;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[$author$project$Custom$Attributes$errorMessage]),
			_List_fromArray(
				[
					$elm$html$Html$text('Error: ' + m)
				]));
	} else {
		return $elm$html$Html$text('');
	}
};
var $author$project$Page$ViewDivision$RefreshButtonClick = {$: 'RefreshButtonClick'};
var $author$project$Page$ViewDivision$viewRefreshButton = A2(
	$elm$html$Html$div,
	_List_fromArray(
		[$author$project$Custom$Attributes$col]),
	_List_fromArray(
		[
			A2(
			$elm$html$Html$button,
			_List_fromArray(
				[
					$elm$html$Html$Events$onClick($author$project$Page$ViewDivision$RefreshButtonClick),
					$author$project$Custom$Attributes$refreshButton
				]),
			_List_fromArray(
				[
					$elm$html$Html$text('Refresh Page')
				]))
		]));
var $elm$virtual_dom$VirtualDom$attribute = F2(
	function (key, value) {
		return A2(
			_VirtualDom_attribute,
			_VirtualDom_noOnOrFormAction(key),
			_VirtualDom_noJavaScriptOrHtmlUri(value));
	});
var $elm$html$Html$Attributes$attribute = $elm$virtual_dom$VirtualDom$attribute;
var $author$project$Custom$Attributes$backgroundColor = $elm$html$Html$Attributes$style('background-color');
var $author$project$Custom$Attributes$carouselContainer = _List_fromArray(
	[
		$elm$html$Html$Attributes$class('carousel slide carousel-dark'),
		A2($elm$html$Html$Attributes$attribute, 'data-bs-interval', 'false'),
		A2($elm$html$Html$Attributes$attribute, 'data-bs-wrap', 'false'),
		$author$project$Custom$Attributes$backgroundColor('#eee')
	]);
var $author$project$Page$ViewDivision$ChangeWeek = function (a) {
	return {$: 'ChangeWeek', a: a};
};
var $author$project$Custom$Attributes$button = $elm$html$Html$Attributes$type_('button');
var $author$project$Custom$Attributes$dataBsTarget = $elm$html$Html$Attributes$attribute('data-bs-target');
var $author$project$Page$ViewDivision$carouselIndicator = F3(
	function (id, week, currWeek) {
		return A2(
			$elm$html$Html$button,
			_List_fromArray(
				[
					$author$project$Custom$Attributes$button,
					$author$project$Custom$Attributes$dataBsTarget('#' + id),
					$elm$html$Html$Events$onClick(
					$author$project$Page$ViewDivision$ChangeWeek(week)),
					_Utils_eq(week, currWeek) ? $elm$html$Html$Attributes$class('active') : $elm$html$Html$Attributes$class('')
				]),
			_List_Nil);
	});
var $author$project$Custom$Attributes$carouselIndicators = $elm$html$Html$Attributes$class('carousel-indicators');
var $elm$html$Html$ol = _VirtualDom_node('ol');
var $author$project$Page$ViewDivision$carouselIndicators = F3(
	function (id, endWeek, currPage) {
		return A2(
			$elm$html$Html$ol,
			_List_fromArray(
				[$author$project$Custom$Attributes$carouselIndicators]),
			A2(
				$elm$core$List$map,
				function (week) {
					return A3($author$project$Page$ViewDivision$carouselIndicator, id, week, currPage);
				},
				A2($elm$core$List$range, 1, endWeek)));
	});
var $author$project$Custom$Attributes$carouselNextButton = $elm$html$Html$Attributes$class('carousel-control-next');
var $author$project$Custom$Attributes$carouselNextIcon = $elm$html$Html$Attributes$class('carousel-control-next-icon');
var $elm$core$Basics$min = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) < 0) ? x : y;
	});
var $elm$html$Html$span = _VirtualDom_node('span');
var $author$project$Custom$Attributes$visuallyHidden = $elm$html$Html$Attributes$class('visually-hidden');
var $author$project$Page$ViewDivision$carouselNext = F2(
	function (currWeek, endWeek) {
		return A2(
			$elm$html$Html$button,
			_List_fromArray(
				[
					$author$project$Custom$Attributes$carouselNextButton,
					$elm$html$Html$Events$onClick(
					$author$project$Page$ViewDivision$ChangeWeek(
						A2($elm$core$Basics$min, endWeek, currWeek + 1)))
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$span,
					_List_fromArray(
						[$author$project$Custom$Attributes$carouselNextIcon]),
					_List_Nil),
					A2(
					$elm$html$Html$span,
					_List_fromArray(
						[$author$project$Custom$Attributes$visuallyHidden]),
					_List_fromArray(
						[
							$elm$html$Html$text('Next')
						]))
				]));
	});
var $author$project$Custom$Attributes$carouselPrevButton = $elm$html$Html$Attributes$class('carousel-control-prev');
var $author$project$Custom$Attributes$carouselPrevIcon = $elm$html$Html$Attributes$class('carousel-control-prev-icon');
var $author$project$Page$ViewDivision$carouselPrev = function (currWeek) {
	return A2(
		$elm$html$Html$button,
		_List_fromArray(
			[
				$author$project$Custom$Attributes$carouselPrevButton,
				$elm$html$Html$Events$onClick(
				$author$project$Page$ViewDivision$ChangeWeek(
					A2($elm$core$Basics$max, 1, currWeek - 1)))
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$span,
				_List_fromArray(
					[$author$project$Custom$Attributes$carouselPrevIcon]),
				_List_Nil),
				A2(
				$elm$html$Html$span,
				_List_fromArray(
					[$author$project$Custom$Attributes$visuallyHidden]),
				_List_fromArray(
					[
						$elm$html$Html$text('Previous')
					]))
			]));
};
var $elm$core$List$maximum = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(
			A3($elm$core$List$foldl, $elm$core$Basics$max, x, xs));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Page$ViewDivision$maxWeek = function (games) {
	return A2(
		$elm$core$Maybe$withDefault,
		0,
		$elm$core$List$maximum(
			A2(
				$elm$core$List$map,
				function (game) {
					return game.week;
				},
				games)));
};
var $author$project$Custom$Attributes$carouselInner = $elm$html$Html$Attributes$class('carousel-inner');
var $author$project$Custom$Attributes$carouselItem = _List_fromArray(
	[
		$elm$html$Html$Attributes$class('carousel-item'),
		A2($elm$html$Html$Attributes$style, 'padding', '3em 5em 5em')
	]);
var $author$project$Page$ViewDivision$gamesInWeek = F2(
	function (week, games) {
		return A2(
			$elm$core$List$filter,
			function (game) {
				return _Utils_eq(game.week, week);
			},
			games);
	});
var $author$project$Page$ViewDivision$AddGameButtonClick = function (a) {
	return {$: 'AddGameButtonClick', a: a};
};
var $author$project$Custom$Attributes$centered = A2($elm$html$Html$Attributes$style, 'margin', '1em auto');
var $author$project$Custom$Attributes$textCentered = A2($elm$html$Html$Attributes$style, 'text-align', 'center');
var $author$project$Page$ViewDivision$viewAddGameButton = function (week) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[$author$project$Custom$Attributes$textCentered]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$button,
				_List_fromArray(
					[
						$author$project$Custom$Attributes$addButton,
						$author$project$Custom$Attributes$centered,
						$elm$html$Html$Events$onClick(
						$author$project$Page$ViewDivision$AddGameButtonClick(week))
					]),
				_List_fromArray(
					[
						$elm$html$Html$text('Add Game')
					]))
			]));
};
var $author$project$Custom$Attributes$maxWidth = $elm$html$Html$Attributes$style('max-width');
var $author$project$Custom$Attributes$padding = $elm$html$Html$Attributes$style('padding');
var $author$project$Custom$Attributes$carouselItemEntry = _List_fromArray(
	[
		$author$project$Custom$Attributes$textCentered,
		$author$project$Custom$Attributes$backgroundColor('#aaa'),
		$author$project$Custom$Attributes$maxWidth('70%'),
		$author$project$Custom$Attributes$centered,
		$author$project$Custom$Attributes$padding('0.5em')
	]);
var $elm$html$Html$p = _VirtualDom_node('p');
var $author$project$Page$ViewDivision$DeleteGameButtonClick = function (a) {
	return {$: 'DeleteGameButtonClick', a: a};
};
var $author$project$Page$ViewDivision$viewGameDeleteButton = function (game) {
	return A2(
		$elm$html$Html$button,
		A2(
			$elm$core$List$cons,
			$elm$html$Html$Events$onClick(
				$author$project$Page$ViewDivision$DeleteGameButtonClick(game.id)),
			$author$project$Custom$Attributes$deleteButton),
		_List_fromArray(
			[
				$elm$html$Html$text('Delete')
			]));
};
var $author$project$Page$ViewDivision$EditGameButtonClick = function (a) {
	return {$: 'EditGameButtonClick', a: a};
};
var $author$project$Page$ViewDivision$viewGameEditButton = function (game) {
	return A2(
		$elm$html$Html$button,
		A2(
			$elm$core$List$cons,
			$elm$html$Html$Events$onClick(
				$author$project$Page$ViewDivision$EditGameButtonClick(game.id)),
			$author$project$Custom$Attributes$editButton),
		_List_fromArray(
			[
				$elm$html$Html$text('Edit')
			]));
};
var $author$project$Page$ViewDivision$viewGameButtons = function (game) {
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		_List_fromArray(
			[
				$author$project$Page$ViewDivision$viewGameEditButton(game),
				$author$project$Page$ViewDivision$viewGameDeleteButton(game)
			]));
};
var $author$project$Page$ViewDivision$viewScore = function (game) {
	var _v0 = game.homeScore;
	if (_v0.$ === 'Just') {
		var homeScore = _v0.a;
		var _v1 = game.awayScore;
		if (_v1.$ === 'Just') {
			var awayScore = _v1.a;
			return A2(
				$elm$html$Html$p,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text(
						$elm$core$String$fromInt(homeScore) + (' - ' + $elm$core$String$fromInt(awayScore)))
					]));
		} else {
			return $elm$html$Html$text('');
		}
	} else {
		return $elm$html$Html$text('');
	}
};
var $author$project$Page$ViewDivision$viewGame = F2(
	function (session, game) {
		return A2(
			$elm$html$Html$div,
			$author$project$Custom$Attributes$carouselItemEntry,
			_List_fromArray(
				[
					A2(
					$elm$html$Html$p,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text(game.homeTeam.name + (' vs. ' + game.awayTeam.name))
						])),
					$author$project$Page$ViewDivision$viewScore(game),
					A2(
					$author$project$Auth$requiresAuth,
					session,
					$author$project$Page$ViewDivision$viewGameButtons(game))
				]));
	});
var $author$project$Page$ViewDivision$viewWeekTitle = function (currWeek) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[$author$project$Custom$Attributes$textCentered]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$h5,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text(
						'Week ' + $elm$core$String$fromInt(currWeek))
					])),
				A2($elm$html$Html$br, _List_Nil, _List_Nil)
			]));
};
var $author$project$Page$ViewDivision$viewWeek = F4(
	function (session, games, thisWeek, currWeek) {
		return A2(
			$elm$html$Html$div,
			_Utils_eq(thisWeek, currWeek) ? A2(
				$elm$core$List$cons,
				$elm$html$Html$Attributes$class('active'),
				$author$project$Custom$Attributes$carouselItem) : $author$project$Custom$Attributes$carouselItem,
			A2(
				$elm$core$List$append,
				A2(
					$elm$core$List$cons,
					$author$project$Page$ViewDivision$viewWeekTitle(thisWeek),
					A2(
						$elm$core$List$map,
						$author$project$Page$ViewDivision$viewGame(session),
						A2($author$project$Page$ViewDivision$gamesInWeek, thisWeek, games))),
				_List_fromArray(
					[
						A2(
						$author$project$Auth$requiresAuth,
						session,
						$author$project$Page$ViewDivision$viewAddGameButton(thisWeek))
					])));
	});
var $author$project$Page$ViewDivision$viewGames = F4(
	function (session, games, endWeek, currWeek) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[$author$project$Custom$Attributes$carouselInner]),
			A2(
				$elm$core$List$map,
				function (week) {
					return A4($author$project$Page$ViewDivision$viewWeek, session, games, week, currWeek);
				},
				A2($elm$core$List$range, 1, endWeek)));
	});
var $author$project$Page$ViewDivision$viewGamesCarousel = F2(
	function (model, games) {
		var thisId = 'games';
		var endWeek = $author$project$Page$ViewDivision$maxWeek(games);
		return A2(
			$elm$html$Html$div,
			A2(
				$elm$core$List$cons,
				$elm$html$Html$Attributes$id(thisId),
				$author$project$Custom$Attributes$carouselContainer),
			_List_fromArray(
				[
					A3($author$project$Page$ViewDivision$carouselIndicators, thisId, endWeek, model.displayedWeek),
					A4($author$project$Page$ViewDivision$viewGames, model.session, games, endWeek, model.displayedWeek),
					$author$project$Page$ViewDivision$carouselPrev(model.displayedWeek),
					A2($author$project$Page$ViewDivision$carouselNext, model.displayedWeek, endWeek)
				]));
	});
var $author$project$Page$ViewDivision$AddWeekButtonClick = function (a) {
	return {$: 'AddWeekButtonClick', a: a};
};
var $author$project$Page$ViewDivision$viewAddWeekButton = function (nextWeek) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[$author$project$Custom$Attributes$rightSideButtons]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$button,
				_List_fromArray(
					[
						$author$project$Custom$Attributes$addButton,
						$elm$html$Html$Events$onClick(
						$author$project$Page$ViewDivision$AddWeekButtonClick(nextWeek))
					]),
				_List_fromArray(
					[
						$elm$html$Html$text(
						'Add Week ' + $elm$core$String$fromInt(nextWeek))
					]))
			]));
};
var $author$project$Page$ViewDivision$viewGamesHeader = F2(
	function (games, session) {
		return A2(
			$elm$html$Html$div,
			$author$project$Custom$Attributes$row,
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[$author$project$Custom$Attributes$col]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$h3,
							_List_Nil,
							_List_fromArray(
								[
									$elm$html$Html$text('Scheduled Games')
								]))
						])),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[$author$project$Custom$Attributes$col]),
					_List_fromArray(
						[
							A2(
							$author$project$Auth$requiresAuth,
							session,
							$author$project$Page$ViewDivision$viewAddWeekButton(
								$author$project$Page$ViewDivision$maxWeek(games) + 1))
						]))
				]));
	});
var $author$project$Page$ViewDivision$viewLoadError = function (errorMessage) {
	var errorHeading = 'Couldn\'t fetch data at this time.';
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[$author$project$Custom$Attributes$errorMessage]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$h3,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text(errorHeading)
					])),
				$elm$html$Html$text('Error: ' + errorMessage)
			]));
};
var $author$project$Page$ViewDivision$viewGamesOrError = function (model) {
	var _v0 = model.games;
	switch (_v0.$) {
		case 'NotAsked':
			return $elm$html$Html$text('');
		case 'Loading':
			return A2(
				$elm$html$Html$h3,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text('Loading...')
					]));
		case 'Success':
			var games = _v0.a;
			return A2(
				$elm$html$Html$div,
				_List_Nil,
				_List_fromArray(
					[
						A2($elm$html$Html$br, _List_Nil, _List_Nil),
						A2($author$project$Page$ViewDivision$viewGamesHeader, games, model.session),
						A2($elm$html$Html$br, _List_Nil, _List_Nil),
						A2($author$project$Page$ViewDivision$viewGamesCarousel, model, games)
					]));
		default:
			var httpError = _v0.a;
			return $author$project$Page$ViewDivision$viewLoadError(
				$author$project$Error$buildErrorMessage(httpError));
	}
};
var $elm$html$Html$h6 = _VirtualDom_node('h6');
var $author$project$Page$ViewDivision$AddTeamButtonClick = {$: 'AddTeamButtonClick'};
var $author$project$Page$ViewDivision$viewAddTeamButton = A2(
	$elm$html$Html$div,
	_List_fromArray(
		[$author$project$Custom$Attributes$rightSideButtons]),
	_List_fromArray(
		[
			A2(
			$elm$html$Html$button,
			_List_fromArray(
				[
					$author$project$Custom$Attributes$addButton,
					$elm$html$Html$Events$onClick($author$project$Page$ViewDivision$AddTeamButtonClick)
				]),
			_List_fromArray(
				[
					$elm$html$Html$text('Add Team to Div')
				]))
		]));
var $author$project$Page$ViewDivision$viewDivHeader = F3(
	function (title, subtitle, session) {
		return A2(
			$elm$html$Html$div,
			$author$project$Custom$Attributes$row,
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[$author$project$Custom$Attributes$col]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$h3,
							_List_Nil,
							_List_fromArray(
								[
									$elm$html$Html$text(title)
								])),
							A2(
							$elm$html$Html$h6,
							_List_Nil,
							_List_fromArray(
								[
									$elm$html$Html$text(subtitle)
								]))
						])),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[$author$project$Custom$Attributes$col]),
					_List_fromArray(
						[
							A2($author$project$Auth$requiresAuth, session, $author$project$Page$ViewDivision$viewAddTeamButton)
						]))
				]));
	});
var $author$project$Page$ViewDivision$viewHeaderOrError = F2(
	function (data, session) {
		switch (data.$) {
			case 'NotAsked':
				return $elm$html$Html$text('');
			case 'Loading':
				return A3($author$project$Page$ViewDivision$viewDivHeader, 'Loading...', '', session);
			case 'Success':
				var division = data.a;
				return A3(
					$author$project$Page$ViewDivision$viewDivHeader,
					division.name,
					'Season ' + $elm$core$String$fromInt(division.season),
					session);
			default:
				var httpError = data.a;
				return A3(
					$author$project$Page$ViewDivision$viewDivHeader,
					$author$project$Error$buildErrorMessage(httpError),
					'',
					session);
		}
	});
var $author$project$Page$ViewDivision$sortedTeams = F2(
	function (sortingMethod, teams) {
		switch (sortingMethod.$) {
			case 'None':
				return teams;
			case 'Name':
				return A2(
					$elm$core$List$sortWith,
					F2(
						function (a, b) {
							return A2($elm$core$Basics$compare, a.name, b.name);
						}),
					teams);
			case 'NameDesc':
				return A2(
					$elm$core$List$sortWith,
					F2(
						function (a, b) {
							return A2($elm$core$Basics$compare, b.name, a.name);
						}),
					teams);
			case 'Coach':
				return A2(
					$elm$core$List$sortWith,
					F2(
						function (a, b) {
							return A2($elm$core$Basics$compare, a.coach.name, b.coach.name);
						}),
					teams);
			case 'CoachDesc':
				return A2(
					$elm$core$List$sortWith,
					F2(
						function (a, b) {
							return A2($elm$core$Basics$compare, b.coach.name, a.coach.name);
						}),
					teams);
			case 'Race':
				return A2(
					$elm$core$List$sortWith,
					F2(
						function (a, b) {
							return A2($elm$core$Basics$compare, a.race.name, b.race.name);
						}),
					teams);
			case 'RaceDesc':
				return A2(
					$elm$core$List$sortWith,
					F2(
						function (a, b) {
							return A2($elm$core$Basics$compare, b.race.name, a.race.name);
						}),
					teams);
			case 'Elo':
				return A2(
					$elm$core$List$sortWith,
					F2(
						function (a, b) {
							return A2($elm$core$Basics$compare, a.elo, b.elo);
						}),
					teams);
			default:
				return A2(
					$elm$core$List$sortWith,
					F2(
						function (a, b) {
							return A2($elm$core$Basics$compare, b.elo, a.elo);
						}),
					teams);
		}
	});
var $author$project$Page$ViewDivision$TeamCoachSortClick = {$: 'TeamCoachSortClick'};
var $author$project$Page$ViewDivision$TeamEloSortClick = {$: 'TeamEloSortClick'};
var $author$project$Page$ViewDivision$TeamNameSortClick = {$: 'TeamNameSortClick'};
var $author$project$Page$ViewDivision$TeamRaceSortClick = {$: 'TeamRaceSortClick'};
var $author$project$Page$ViewDivision$viewTableHeader = function (sortMethod) {
	return A2(
		$elm$html$Html$thead,
		_List_Nil,
		_List_fromArray(
			[
				A2(
				$elm$html$Html$tr,
				_List_Nil,
				_List_fromArray(
					[
						A2(
						$elm$html$Html$th,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$scope('col'),
								$elm$html$Html$Events$onClick($author$project$Page$ViewDivision$TeamNameSortClick)
							]),
						_List_fromArray(
							[
								function () {
								switch (sortMethod.$) {
									case 'Name':
										return $elm$html$Html$text('Name ▲');
									case 'NameDesc':
										return $elm$html$Html$text('Name ▼');
									default:
										return $elm$html$Html$text('Name');
								}
							}()
							])),
						A2(
						$elm$html$Html$th,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$scope('col'),
								$elm$html$Html$Events$onClick($author$project$Page$ViewDivision$TeamRaceSortClick)
							]),
						_List_fromArray(
							[
								function () {
								switch (sortMethod.$) {
									case 'Race':
										return $elm$html$Html$text('Race ▲');
									case 'RaceDesc':
										return $elm$html$Html$text('Race ▼');
									default:
										return $elm$html$Html$text('Race');
								}
							}()
							])),
						A2(
						$elm$html$Html$th,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$scope('col'),
								$elm$html$Html$Events$onClick($author$project$Page$ViewDivision$TeamCoachSortClick)
							]),
						_List_fromArray(
							[
								function () {
								switch (sortMethod.$) {
									case 'Coach':
										return $elm$html$Html$text('Coach ▲');
									case 'CoachDesc':
										return $elm$html$Html$text('Coach ▼');
									default:
										return $elm$html$Html$text('Coach');
								}
							}()
							])),
						A2(
						$elm$html$Html$th,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$scope('col'),
								$elm$html$Html$Events$onClick($author$project$Page$ViewDivision$TeamEloSortClick)
							]),
						_List_fromArray(
							[
								function () {
								switch (sortMethod.$) {
									case 'Elo':
										return $elm$html$Html$text('Elo ▲');
									case 'EloDesc':
										return $elm$html$Html$text('Elo ▼');
									default:
										return $elm$html$Html$text('Elo');
								}
							}()
							])),
						A2(
						$elm$html$Html$th,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$scope('col')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text('')
							]))
					]))
			]));
};
var $author$project$Page$ViewDivision$DeleteTeamButtonClick = function (a) {
	return {$: 'DeleteTeamButtonClick', a: a};
};
var $author$project$Page$ViewDivision$viewTeamDeleteButton = function (team) {
	return A2(
		$elm$html$Html$button,
		A2(
			$elm$core$List$cons,
			$elm$html$Html$Events$onClick(
				$author$project$Page$ViewDivision$DeleteTeamButtonClick(team.id)),
			$author$project$Custom$Attributes$deleteButton),
		_List_fromArray(
			[
				$elm$html$Html$text('Delete')
			]));
};
var $author$project$Page$ViewDivision$EditTeamButtonClick = function (a) {
	return {$: 'EditTeamButtonClick', a: a};
};
var $author$project$Page$ViewDivision$viewTeamEditButton = function (team) {
	return A2(
		$elm$html$Html$button,
		A2(
			$elm$core$List$cons,
			$elm$html$Html$Events$onClick(
				$author$project$Page$ViewDivision$EditTeamButtonClick(team.id)),
			$author$project$Custom$Attributes$editButton),
		_List_fromArray(
			[
				$elm$html$Html$text('Edit')
			]));
};
var $author$project$Page$ViewDivision$viewTeamTableRow = F2(
	function (session, team) {
		return A2(
			$elm$html$Html$tr,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$elm$html$Html$td,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text(team.name)
						])),
					A2(
					$elm$html$Html$td,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text(team.race.name)
						])),
					A2(
					$elm$html$Html$td,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text(team.coach.name)
						])),
					A2(
					$elm$html$Html$td,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text(
							$elm$core$String$fromInt(team.elo))
						])),
					A2(
					$author$project$Auth$requiresAuth,
					session,
					A2(
						$elm$html$Html$td,
						_List_fromArray(
							[
								$author$project$Custom$Attributes$tableButtonColumn(2)
							]),
						_List_fromArray(
							[
								$author$project$Page$ViewDivision$viewTeamEditButton(team),
								$author$project$Page$ViewDivision$viewTeamDeleteButton(team)
							])))
				]));
	});
var $author$project$Page$ViewDivision$viewTeams = F2(
	function (model, teams) {
		return A2(
			$elm$html$Html$table,
			_List_fromArray(
				[$author$project$Custom$Attributes$table]),
			_List_fromArray(
				[
					$author$project$Page$ViewDivision$viewTableHeader(model.sortingMethod),
					A2(
					$elm$html$Html$tbody,
					_List_Nil,
					A2(
						$elm$core$List$map,
						$author$project$Page$ViewDivision$viewTeamTableRow(model.session),
						A2($author$project$Page$ViewDivision$sortedTeams, model.sortingMethod, teams)))
				]));
	});
var $author$project$Page$ViewDivision$viewTeamsOrError = function (model) {
	var _v0 = model.teams;
	switch (_v0.$) {
		case 'NotAsked':
			return $elm$html$Html$text('');
		case 'Loading':
			return A2(
				$elm$html$Html$h3,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text('Loading...')
					]));
		case 'Success':
			var teams = _v0.a;
			return A2(
				$elm$html$Html$div,
				_List_Nil,
				_List_fromArray(
					[
						A2($author$project$Page$ViewDivision$viewHeaderOrError, model.division, model.session),
						A2($author$project$Page$ViewDivision$viewTeams, model, teams),
						$author$project$Page$ViewDivision$viewGamesOrError(model)
					]));
		default:
			var httpError = _v0.a;
			return $author$project$Page$ViewDivision$viewLoadError(
				$author$project$Error$buildErrorMessage(httpError));
	}
};
var $author$project$Page$ViewDivision$view = function (model) {
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		_List_fromArray(
			[
				A2(
				$elm$html$Html$div,
				$author$project$Custom$Attributes$row,
				_List_fromArray(
					[$author$project$Page$ViewDivision$viewRefreshButton])),
				$author$project$Page$ViewDivision$viewErrorMessage(model.deleteError),
				$author$project$Page$ViewDivision$viewTeamsOrError(model)
			]));
};
var $author$project$Page$view = function (model) {
	switch (model.$) {
		case 'NotFoundPage':
			return $author$project$Page$notFoundView;
		case 'SigninPage':
			var pageModel = model.a;
			return A2(
				$elm$html$Html$map,
				$author$project$Page$SigninPageMsg,
				$author$project$Page$Signin$view(pageModel));
		case 'TeamsPage':
			var pageModel = model.a;
			return A2(
				$elm$html$Html$map,
				$author$project$Page$TeamsPageMsg,
				$author$project$Page$ListTeams$view(pageModel));
		case 'AddTeamPage':
			var pageModel = model.a;
			return A2(
				$elm$html$Html$map,
				$author$project$Page$AddTeamPageMsg,
				$author$project$Page$AddTeam$view(pageModel));
		case 'EditTeamPage':
			var pageModel = model.a;
			return A2(
				$elm$html$Html$map,
				$author$project$Page$EditTeamPageMsg,
				$author$project$Page$EditTeam$view(pageModel));
		case 'CoachesPage':
			var pageModel = model.a;
			return A2(
				$elm$html$Html$map,
				$author$project$Page$CoachesPageMsg,
				$author$project$Page$ListCoaches$view(pageModel));
		case 'AddCoachPage':
			var pageModel = model.a;
			return A2(
				$elm$html$Html$map,
				$author$project$Page$AddCoachPageMsg,
				$author$project$Page$AddCoach$view(pageModel));
		case 'EditCoachPage':
			var pageModel = model.a;
			return A2(
				$elm$html$Html$map,
				$author$project$Page$EditCoachPageMsg,
				$author$project$Page$EditCoach$view(pageModel));
		case 'DivisionsPage':
			var pageModel = model.a;
			return A2(
				$elm$html$Html$map,
				$author$project$Page$DivisionsPageMsg,
				$author$project$Page$ListDivisions$view(pageModel));
		case 'AddDivisionPage':
			var pageModel = model.a;
			return A2(
				$elm$html$Html$map,
				$author$project$Page$AddDivisionPageMsg,
				$author$project$Page$AddDivision$view(pageModel));
		case 'EditDivisionPage':
			var pageModel = model.a;
			return A2(
				$elm$html$Html$map,
				$author$project$Page$EditDivisionPageMsg,
				$author$project$Page$EditDivision$view(pageModel));
		case 'AddGamePage':
			var pageModel = model.a;
			return A2(
				$elm$html$Html$map,
				$author$project$Page$AddGamePageMsg,
				$author$project$Page$AddGame$view(pageModel));
		case 'EditGamePage':
			var pageModel = model.a;
			return A2(
				$elm$html$Html$map,
				$author$project$Page$EditGamePageMsg,
				$author$project$Page$EditGame$view(pageModel));
		case 'ViewDivisionPage':
			var pageModel = model.a;
			return A2(
				$elm$html$Html$map,
				$author$project$Page$ViewDivisionPageMsg,
				$author$project$Page$ViewDivision$view(pageModel));
		case 'AddTeamToDivPage':
			var pageModel = model.a;
			return A2(
				$elm$html$Html$map,
				$author$project$Page$AddTeamToDivPageMsg,
				$author$project$Page$AddTeamToDiv$view(pageModel));
		default:
			var pageModel = model.a;
			return A2(
				$elm$html$Html$map,
				$author$project$Page$AddGameWeekMsg,
				$author$project$Page$AddGameWeek$view(pageModel));
	}
};
var $author$project$Main$currentPageView = function (model) {
	return A2(
		$elm$html$Html$map,
		$author$project$Main$PageMsg,
		$author$project$Page$view(model.page));
};
var $author$project$Custom$Attributes$mainContainer = $elm$html$Html$Attributes$class('container');
var $author$project$Header$CoachIndexClicked = {$: 'CoachIndexClicked'};
var $author$project$Header$HomeClicked = {$: 'HomeClicked'};
var $author$project$Header$TeamIndexClicked = {$: 'TeamIndexClicked'};
var $elm$html$Html$a = _VirtualDom_node('a');
var $elm$html$Html$Attributes$href = function (url) {
	return A2(
		$elm$html$Html$Attributes$stringProperty,
		'href',
		_VirtualDom_noJavaScriptUri(url));
};
var $elm$html$Html$li = _VirtualDom_node('li');
var $author$project$Custom$Attributes$navItem = $elm$html$Html$Attributes$class('nav-item');
var $author$project$Custom$Attributes$navLink = $elm$html$Html$Attributes$class('nav-link');
var $author$project$Header$linkElement = F2(
	function (title, msg) {
		return A2(
			$elm$html$Html$li,
			_List_fromArray(
				[$author$project$Custom$Attributes$navItem]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$a,
					_List_fromArray(
						[
							$author$project$Custom$Attributes$navLink,
							$elm$html$Html$Events$onClick(msg),
							$elm$html$Html$Attributes$href('#')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(title)
						]))
				]));
	});
var $author$project$Custom$Attributes$mainNavBar = $elm$html$Html$Attributes$class('navbar navbar-expand-lg navbar-light bg-light');
var $elm$html$Html$nav = _VirtualDom_node('nav');
var $author$project$Custom$Attributes$navBarBrand = $elm$html$Html$Attributes$class('navbar-brand');
var $author$project$Custom$Attributes$navBarCollapsable = $elm$html$Html$Attributes$class('collapse navbar-collapse');
var $author$project$Custom$Attributes$navBarLinkList = $elm$html$Html$Attributes$class('navbar-nav');
var $elm$virtual_dom$VirtualDom$node = function (tag) {
	return _VirtualDom_node(
		_VirtualDom_noScript(tag));
};
var $elm$html$Html$node = $elm$virtual_dom$VirtualDom$node;
var $author$project$Header$styleTag = function () {
	var styles = '\n        @media all and (min-width: 992px) {\n            .navbar .nav-item .dropdown-menu{ display: none; }\n            .navbar .nav-item:hover .nav-link{   }\n            .navbar .nav-item:hover .dropdown-menu{ display: block; }\n            .navbar .nav-item .dropdown-menu{ margin-top:0; }\n        }\n      ';
	return A3(
		$elm$html$Html$node,
		'style',
		_List_Nil,
		_List_fromArray(
			[
				$elm$html$Html$text(styles)
			]));
}();
var $author$project$Header$toggleBarButton = A2(
	$elm$html$Html$button,
	_List_fromArray(
		[
			$elm$html$Html$Attributes$class('navbar-toggler'),
			$elm$html$Html$Attributes$type_('button'),
			A2($elm$html$Html$Attributes$attribute, 'data-toggle', 'collapse'),
			A2($elm$html$Html$Attributes$attribute, 'data-target', '#navbarNav')
		]),
	_List_fromArray(
		[
			A2(
			$elm$html$Html$span,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('navbar-toggler-icon')
				]),
			_List_Nil)
		]));
var $elm$html$Html$ul = _VirtualDom_node('ul');
var $author$project$Header$DivisionIndexClicked = {$: 'DivisionIndexClicked'};
var $author$project$Header$SpecificDivisionClicked = function (a) {
	return {$: 'SpecificDivisionClicked', a: a};
};
var $author$project$Custom$Attributes$navDropDownItem = $elm$html$Html$Attributes$class('dropdown-item');
var $author$project$Header$dropdownEntry = F2(
	function (label, clickEvent) {
		return A2(
			$elm$html$Html$li,
			_List_fromArray(
				[
					$author$project$Custom$Attributes$navDropDownItem,
					$elm$html$Html$Events$onClick(clickEvent)
				]),
			_List_fromArray(
				[
					$elm$html$Html$text(label)
				]));
	});
var $author$project$Custom$Attributes$navDropDownContainer = $elm$html$Html$Attributes$class('nav-item dropdown');
var $author$project$Custom$Attributes$navDropDownMenu = $elm$html$Html$Attributes$class('dropdown-menu');
var $author$project$Custom$Attributes$navDropDownTitleLink = _List_fromArray(
	[
		$elm$html$Html$Attributes$class('nav-link dropdown-toggle'),
		A2($elm$html$Html$Attributes$attribute, 'data-bs-toggle', 'dropdown')
	]);
var $author$project$Header$dropdownLink = F3(
	function (title, clickEvent, submenu) {
		return A2(
			$elm$html$Html$li,
			_List_fromArray(
				[$author$project$Custom$Attributes$navDropDownContainer]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$a,
					A2(
						$elm$core$List$cons,
						$elm$html$Html$Events$onClick(clickEvent),
						$author$project$Custom$Attributes$navDropDownTitleLink),
					_List_fromArray(
						[
							$elm$html$Html$text(title)
						])),
					A2(
					$elm$html$Html$ul,
					_List_fromArray(
						[$author$project$Custom$Attributes$navDropDownMenu]),
					submenu)
				]));
	});
var $author$project$Header$viewDivisionsLink = function (divisions) {
	if (divisions.$ === 'Success') {
		var divs = divisions.a;
		return A3(
			$author$project$Header$dropdownLink,
			'Divisions',
			$author$project$Header$DivisionIndexClicked,
			A2(
				$elm$core$List$map,
				function (div) {
					return A2(
						$author$project$Header$dropdownEntry,
						div.name + (' Season ' + $elm$core$String$fromInt(div.season)),
						$author$project$Header$SpecificDivisionClicked(div.id));
				},
				divs));
	} else {
		return A2($author$project$Header$linkElement, 'Divisions', $author$project$Header$DivisionIndexClicked);
	}
};
var $author$project$Header$SigninClicked = {$: 'SigninClicked'};
var $author$project$Header$SignoutClicked = {$: 'SignoutClicked'};
var $author$project$Header$viewSignInOutLink = function (token) {
	if (token.$ === 'Just') {
		return A2($author$project$Header$linkElement, 'Sign Out', $author$project$Header$SignoutClicked);
	} else {
		return A2($author$project$Header$linkElement, 'Sign In', $author$project$Header$SigninClicked);
	}
};
var $author$project$Header$view = function (model) {
	return A2(
		$elm$html$Html$nav,
		_List_fromArray(
			[$author$project$Custom$Attributes$mainNavBar]),
		_List_fromArray(
			[
				$author$project$Header$styleTag,
				A2(
				$elm$html$Html$a,
				_List_fromArray(
					[
						$author$project$Custom$Attributes$navBarBrand,
						$elm$html$Html$Events$onClick($author$project$Header$HomeClicked)
					]),
				_List_fromArray(
					[
						$elm$html$Html$text('FTBBL')
					])),
				$author$project$Header$toggleBarButton,
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$author$project$Custom$Attributes$navBarCollapsable,
						$elm$html$Html$Attributes$id('navbarNav')
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$ul,
						_List_fromArray(
							[$author$project$Custom$Attributes$navBarLinkList]),
						_List_fromArray(
							[
								A2($author$project$Header$linkElement, 'Teams', $author$project$Header$TeamIndexClicked),
								A2($author$project$Header$linkElement, 'Coaches', $author$project$Header$CoachIndexClicked),
								$author$project$Header$viewDivisionsLink(model.divisions),
								$author$project$Header$viewSignInOutLink(model.session.token)
							]))
					]))
			]));
};
var $author$project$Main$navView = function (model) {
	return A2(
		$elm$html$Html$map,
		$author$project$Main$HeaderMsg,
		$author$project$Header$view(model.headerModel));
};
var $author$project$Main$view = function (model) {
	return {
		body: _List_fromArray(
			[
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[$author$project$Custom$Attributes$mainContainer]),
				_List_fromArray(
					[
						$author$project$Main$navView(model),
						$author$project$Main$currentPageView(model)
					]))
			]),
		title: 'FTBBL'
	};
};
var $author$project$Main$main = $elm$browser$Browser$application(
	{init: $author$project$Main$init, onUrlChange: $author$project$Main$UrlChanged, onUrlRequest: $author$project$Main$LinkClicked, subscriptions: $author$project$Main$unsubscribe, update: $author$project$Main$update, view: $author$project$Main$view});
_Platform_export({'Main':{'init':$author$project$Main$main(
	$elm$json$Json$Decode$succeed(_Utils_Tuple0))(0)}});}(this));